import * as i0 from '@angular/core';
import { Injectable, Inject, Optional, Component, EventEmitter, ViewEncapsulation, Input, Output, ContentChild, NgModule, ChangeDetectionStrategy, Directive, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef, ViewChild, forwardRef, ElementRef, HostListener, Pipe } from '@angular/core';
import * as _ from 'lodash';
import { Subject, throwError, Observable, of, BehaviorSubject, fromEvent } from 'rxjs';
import { debounceTime, filter, takeUntil, mergeMap, catchError, distinctUntilChanged, map, tap, finalize } from 'rxjs/operators';
import { HttpHeaders, HttpResponseBase, HttpResponse, HttpClient } from '@angular/common/http';
import * as moment from 'moment';
import * as i1 from '@angular/forms';
import { Validators, FormBuilder, NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';
import * as $ from 'jquery';
import * as i1$1 from '@abp/ng.core';
import { RestService, DynamicLayoutComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { RouterModule } from '@angular/router';
import { NzAffixModule } from 'ng-zorro-antd/affix';
import { NzAlertModule } from 'ng-zorro-antd/alert';
import { NzAnchorModule } from 'ng-zorro-antd/anchor';
import { NzAutocompleteModule } from 'ng-zorro-antd/auto-complete';
import { NzAvatarModule } from 'ng-zorro-antd/avatar';
import { NzBackTopModule } from 'ng-zorro-antd/back-top';
import { NzBadgeModule } from 'ng-zorro-antd/badge';
import { NzBreadCrumbModule } from 'ng-zorro-antd/breadcrumb';
import { NzButtonModule } from 'ng-zorro-antd/button';
import { NzCalendarModule } from 'ng-zorro-antd/calendar';
import { NzCardModule } from 'ng-zorro-antd/card';
import { NzCarouselModule } from 'ng-zorro-antd/carousel';
import { NzCascaderModule } from 'ng-zorro-antd/cascader';
import { NzCheckboxModule } from 'ng-zorro-antd/checkbox';
import { NzCollapseModule } from 'ng-zorro-antd/collapse';
import { NzCommentModule } from 'ng-zorro-antd/comment';
import { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';
import { NzTransButtonModule } from 'ng-zorro-antd/core/trans-button';
import { NzWaveModule } from 'ng-zorro-antd/core/wave';
import { NzDatePickerModule } from 'ng-zorro-antd/date-picker';
import { NzDescriptionsModule } from 'ng-zorro-antd/descriptions';
import { NzDividerModule } from 'ng-zorro-antd/divider';
import { NzDrawerModule } from 'ng-zorro-antd/drawer';
import { NzDropDownModule } from 'ng-zorro-antd/dropdown';
import { NzEmptyModule } from 'ng-zorro-antd/empty';
import { NzFormModule } from 'ng-zorro-antd/form';
import { NzGridModule } from 'ng-zorro-antd/grid';
import { NzI18nModule, vi_VN, NZ_I18N, NZ_DATE_LOCALE } from 'ng-zorro-antd/i18n';
import { NzIconModule, NZ_ICONS } from 'ng-zorro-antd/icon';
import { NzInputModule } from 'ng-zorro-antd/input';
import { NzInputNumberModule } from 'ng-zorro-antd/input-number';
import { NzLayoutModule } from 'ng-zorro-antd/layout';
import { NzListModule } from 'ng-zorro-antd/list';
import { NzMentionModule } from 'ng-zorro-antd/mention';
import { NzMenuModule } from 'ng-zorro-antd/menu';
import { NzMessageModule } from 'ng-zorro-antd/message';
import { NzModalModule } from 'ng-zorro-antd/modal';
import { NzNotificationModule } from 'ng-zorro-antd/notification';
import { NzPageHeaderModule } from 'ng-zorro-antd/page-header';
import { NzPaginationModule } from 'ng-zorro-antd/pagination';
import { NzPopconfirmModule } from 'ng-zorro-antd/popconfirm';
import { NzPopoverModule } from 'ng-zorro-antd/popover';
import { NzProgressModule } from 'ng-zorro-antd/progress';
import { NzRadioModule } from 'ng-zorro-antd/radio';
import { NzRateModule } from 'ng-zorro-antd/rate';
import { NzResultModule } from 'ng-zorro-antd/result';
import { NzSelectModule } from 'ng-zorro-antd/select';
import { NzSkeletonModule } from 'ng-zorro-antd/skeleton';
import { NzSliderModule } from 'ng-zorro-antd/slider';
import { NzSpinModule } from 'ng-zorro-antd/spin';
import { NzStatisticModule } from 'ng-zorro-antd/statistic';
import { NzStepsModule } from 'ng-zorro-antd/steps';
import { NzSwitchModule } from 'ng-zorro-antd/switch';
import { NzTableModule } from 'ng-zorro-antd/table';
import { NzTabsModule } from 'ng-zorro-antd/tabs';
import { NzTagModule } from 'ng-zorro-antd/tag';
import { NzTimePickerModule } from 'ng-zorro-antd/time-picker';
import { NzTimelineModule } from 'ng-zorro-antd/timeline';
import { NzToolTipModule } from 'ng-zorro-antd/tooltip';
import { NzTransferModule } from 'ng-zorro-antd/transfer';
import { NzTreeModule } from 'ng-zorro-antd/tree';
import { NzTreeSelectModule } from 'ng-zorro-antd/tree-select';
import { NzTypographyModule } from 'ng-zorro-antd/typography';
import { NzUploadModule } from 'ng-zorro-antd/upload';
import { NzResizableModule } from 'ng-zorro-antd/resizable';
import { vi as vi$1 } from 'date-fns/locale';
import { registerLocaleData } from '@angular/common';
import vi from '@angular/common/locales/vi';
import * as AllIcons from '@ant-design/icons-angular/icons';
import { NzSpaceModule } from 'ng-zorro-antd/space';
import { __awaiter } from 'tslib';
import differenceInCalendarDays from 'date-fns/differenceInCalendarDays';
import { CurrencyMaskModule } from 'ng2-currency-mask';
import { TextMaskModule } from 'angular2-text-mask';

class OfControlModel {
    constructor(config) {
        this.type = 'text';
        this.dataField = '';
        this.label = '';
        this.hiddenLabel = false;
        this.width = 6;
        this.css = '';
        this.required = false;
        this.errorEmpty = 'Không để trống trường này!';
        this.placeholder = '';
        this.disabled = false;
        this.hidden = false;
        this.validations = [];
        this.controls = [];
        this.dataField = config.dataField;
        this.label = config.label || this.label;
        this.hiddenLabel = (config === null || config === void 0 ? void 0 : config.hiddenLabel) || false;
        this.width = config.width || this.width;
        this.css = `ord-dynamic-input gutter-row ord-form-control field-${this.dataField} ${config.css || ''} `;
        this.required = config.required || this.required;
        this.errorEmpty = config.errorEmpty || this.errorEmpty;
        this.placeholder = config.placeholder || this.placeholder;
        this.disabled = config.disabled || this.disabled;
        this.disabledAsync = config.disabledAsync || null;
        this.hidden = config.hidden || this.hidden;
        this.hiddenAsync = config.hiddenAsync || null;
        this.validations = config.validations || [];
        this.value = (config === null || config === void 0 ? void 0 : config.value) || null;
        this.bottomHtml = (config === null || config === void 0 ? void 0 : config.bottomHtml) || null;
    }
}

// cấu hình control trong template
class OfExtendControlModel {
    constructor(config) {
        this.disabled = false;
        this.errorEmpty = '';
        this.label = config.label || '';
        this.dataField = config.dataField;
        this.validations = config.validations || [];
        this.value = config.value;
        this.required = config.required;
        this.errorEmpty = config.errorEmpty || 'Không để trống trường này';
        this.disabled = config === null || config === void 0 ? void 0 : config.disabled;
    }
}

class OfSchemaModel {
    constructor(config) {
        this.layout = 'vertical';
        this.focusFisrtInit = true;
        this.errorNotValid = 'Vui lòng điền đầy đủ thông tin!';
        this.backUpDisables = {};
        this.render$ = new Subject();
        this.isSearchBox = false;
        this.searchBtnBusy = false;
        this.searchEvent$ = new Subject();
        this.rebuilder$ = new Subject();
        this.submitted = false;
        this.fields = config.fields;
        this.id = Number(new Date());
        this.focusFisrtInit = (config === null || config === void 0 ? void 0 : config.focusFisrtInit) || true;
        this.errorNotValid = (config === null || config === void 0 ? void 0 : config.errorNotValid) || 'Vui lòng điền đầy đủ thông tin!';
        this.isSearchBox = (config === null || config === void 0 ? void 0 : config.isSearchBox) || false;
    }
    get value() {
        var _a;
        return ((_a = this.form) === null || _a === void 0 ? void 0 : _a.getRawValue()) || null;
    }
    get valueValid() {
        var _a;
        if ((_a = this.form) === null || _a === void 0 ? void 0 : _a.valid) {
            return this.value;
        }
        return null;
    }
    getField(name) {
        var _a;
        return ((_a = this.fields) === null || _a === void 0 ? void 0 : _a.find(x => x.dataField === name)) || null;
    }
    getFormControl(name) {
        return this.form.get(name);
    }
    disableField(name, f = true) {
        setTimeout(() => {
            const ctr = this.getFormControl(name);
            if (ctr) {
                if (f) {
                    ctr.disable({ onlySelf: true });
                }
                else {
                    ctr.enable({ onlySelf: true });
                }
            }
            // tslint:disable-next-line:no-shadowed-variable
            const field = this.fields.find((f) => f.dataField === name);
            if (field) {
                field.disabled = f;
            }
        });
    }
    disableAll(f = true) {
        if (f) {
            this.backUpDisables = {};
            _.forEach(this.fields, field => {
                if (field.disabled) {
                    this.backUpDisables[field.dataField] = true;
                }
                field.disabled = true;
                const ctr = this.getFormControl(field.dataField);
                if (ctr) {
                    ctr.disable({ onlySelf: true });
                }
            });
            this.triggerRender();
            return;
        }
        _.forEach(this.fields, field => {
            const ctr = this.getFormControl(field.dataField);
            if (ctr) {
                const backUp = this.backUpDisables[field.dataField];
                if (backUp) {
                    ctr.disable({ onlySelf: true });
                    field.disabled = true;
                }
                else {
                    ctr.enable({ onlySelf: true });
                    field.disabled = false;
                }
            }
        });
        this.triggerRender();
    }
    hiddenFields(fields) {
        _.forEach(fields, field => {
            this.getField(field).hidden = true;
        });
    }
    showFields(fields) {
        _.forEach(fields, field => {
            this.getField(field).hidden = false;
        });
    }
    setHidden(fields, hiddens) {
        _.forEach(fields, (field, idx) => {
            this.getField(field).hidden = hiddens[idx];
        });
    }
    setShow(fields, shows) {
        _.forEach(fields, (field, idx) => {
            this.getField(field).hidden = !shows[idx];
        });
    }
    fieldValueChanges(name, time = 100) {
        var _a;
        return (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(name).valueChanges.pipe(debounceTime(time));
    }
    valueChanges(time = 100) {
        var _a;
        return (_a = this.form) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(debounceTime(time));
    }
    patchValue(value) {
        Object.keys(value).forEach(name => {
            const f = this.form.get(name);
            if (f) {
                f.patchValue(value[name]);
            }
        });
        this.triggerRender();
    }
    triggerRender() {
        setTimeout(() => {
            this.render$.next(Number(new Date()));
        }, 500);
    }
    subRender(cdr, destroy$) {
        this.render$.pipe(filter(s => s > 0)).pipe(debounceTime(111))
            .pipe(takeUntil(destroy$))
            .subscribe(d => {
            cdr.detectChanges();
        });
    }
    addControls(controls, indexBegin = null) {
        if (indexBegin === null) {
            this.fields = _.concat(this.fields, controls);
        }
        else {
            this.fields = _.flatMap(this.fields, (value, index) => {
                if (index === indexBegin) {
                    return [...controls, value];
                }
                return value;
            });
        }
        this.rebuilder();
    }
    rebuilder() {
        setTimeout(() => {
            this.rebuilder$.next(Number(new Date()));
        });
    }
    search() {
        if (this.searchEvent$) {
            this.searchEvent$.next(this.value);
        }
    }
}

class OfCheckBoxModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.checkBoxLabel = '';
        this.type = 'checkBox';
        this.checkBoxLabel = config.checkBoxLabel;
        this.value = this.value || false;
    }
}

class OfComponentRefModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'componentRef';
        this.componentRef = config.componentRef;
    }
}

class OfContentHtmlModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'contentHtml';
        this.content = config.content || '';
        if (config.isBlank) {
            this.content = '';
        }
    }
}

class OfCurrencyModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'currencyInput';
        this.prefix = config.prefix || ' ';
        this.suffix = config.suffix || ' VNĐ';
        this.precision = config.precision || 0;
    }
}

class OfDateModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'datePicker';
        this.minDateAsync = config.minDateAsync || null;
        this.maxDateAsync = config.maxDateAsync || null;
        this.dateNotGreaterThanCurrent = config.notGreaterThanCurrent || false;
        this.minDate = config.minDate;
        this.maxDate = config.maxDate;
        this.tuNgayDataField = config.tuNgayDataField;
        this.denNgayDataField = config.denNgayDataField;
    }
}

class OfNumberModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.step = 1;
        this.onlyKeyNumber = false;
        this.type = 'numberInput';
        this.min = config.min || null;
        this.max = config.max || null;
        this.step = config.step || 1;
        this.onlyKeyNumber = config.onlyKeyNumber || false;
        this.maxlength = config.maxlength || null;
    }
}

class OfPwdModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'passWordInput';
        this.placeholder = this.placeholder || 'Nhập mật khẩu';
    }
}

class OfRadioModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'radio';
        this.items = config.items;
    }
}

class AppUtilityService {
    constructor() {
    }
    static isNullOrEmpty(input) {
        return typeof input === 'undefined' || input === null || input === '';
        // return !(typeof input !== 'undefined' && input && input !== '' && input !== null);
    }
    static isNotNull(input) {
        return !AppUtilityService.isNullOrEmpty(input);
    }
    static getFullTextSearch(str) {
        if (AppUtilityService.isNullOrEmpty(str)) {
            return str;
        }
        str += '';
        str = AppUtilityService.removeDau(str);
        str = str.replace(/\s\s+/g, ' ');
        return str;
    }
    static removeDau(str) {
        if (AppUtilityService.isNullOrEmpty(str)) {
            return str;
        }
        str = str.toLowerCase();
        str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, 'a');
        str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, 'e');
        str = str.replace(/ì|í|ị|ỉ|ĩ/g, 'i');
        str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, 'o');
        str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, 'u');
        str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, 'y');
        str = str.replace(/đ/g, 'd');
        str = str.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'|\"|\&|\#|\[|\]|~|\$|_|`|-|{|}|\||\\/g, ' ');
        str = str.replace(/ + /g, ' ');
        str = str.trim();
        return str;
    }
    static isNotAnyItem(input) {
        return AppUtilityService.isNullOrEmpty(input) || input.length === 0;
    }
    static isWhitespace(value) {
        return (value || '').trim().length === 0;
    }
    static searchVietTat(str) {
        if (AppUtilityService.isNullOrEmpty(str)) {
            return str;
        }
        let ret = '';
        const spl = str.split(' ');
        if (AppUtilityService.isNotAnyItem(spl) === false) {
            spl.forEach((s) => {
                if (s.length > 0) {
                    ret = ret + s[0];
                }
            });
        }
        return AppUtilityService.getFullTextSearch(_.cloneDeep(ret));
    }
}
AppUtilityService.decorators = [
    { type: Injectable }
];
AppUtilityService.ctorParameters = () => [];

class OfSelectBaseModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.nzAllowClear = true;
        this.nzMode = 'default';
        this.options = [];
        this.itemSelected = null;
        this.nzMode = (config === null || config === void 0 ? void 0 : config.nzMode) || 'default';
        if (AppUtilityService.isNotNull(config.nzAllowClear)) {
            this.nzAllowClear = config.nzAllowClear;
        }
        if (this.nzMode === 'multiple') {
            this.nzMaxMultipleCount = (config === null || config === void 0 ? void 0 : config.nzMaxMultipleCount) || Number.MAX_VALUE;
        }
        this.nzMaxTagCount = (config === null || config === void 0 ? void 0 : config.nzMaxTagCount) || 3;
        this.placeholder = this.placeholder || '-Chọn-';
        this.renderOptionFunc = config.renderOptionFunc || null;
        this.renderSelectedFunc = config.renderSelectedFunc || null;
        if (this.value) {
            this.value = '' + this.value;
        }
    }
}

class OfSelectModel extends OfSelectBaseModel {
    constructor(config) {
        super(config);
        this.type = 'select';
        this.options = config.options;
    }
}

class OfSelectApiModel extends OfSelectBaseModel {
    constructor(config) {
        super(config);
        this.dataExtend = {};
        this.type = 'selectApi';
        this.functionService = config.functionService;
    }
}

class OfSelectAsyncModel extends OfSelectBaseModel {
    constructor(config) {
        super(config);
        this.keyCache = '';
        this.type = 'selectAsync';
        this.optionsAsync = config.optionsAsync;
        this.keyCache = config.keyCache;
    }
}

class OfSelectCascadeModel extends OfSelectBaseModel {
    constructor(config) {
        super(config);
        this.keyCache = '';
        this.cascadeField = '';
        this.type = 'selectApiCascade';
        this.functionService = config.functionService;
        this.keyCache = config.keyCache;
        this.cascadeField = config.cascadeField;
    }
}

class OfSelectSearchServerModel extends OfSelectBaseModel {
    constructor(config) {
        super(config);
        this.showPagination = false;
        this.type = 'selectSearchServer';
        this.showPagination = config.showPagination || false;
        this.functionService = config.functionService;
    }
}

class OfSwitchModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'switch';
        this.yesText = config.yesText || null;
        this.noText = config.noText || null;
    }
}

class OfTemplateRefModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'templateRef';
        this.controls = config.controls;
    }
}

class OfTextModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.type = 'text';
        this.maxLength = (config === null || config === void 0 ? void 0 : config.maxLength) || null;
        this.minLength = (config === null || config === void 0 ? void 0 : config.minLength) || null;
    }
}

class OfTextAreaModel extends OfControlModel {
    constructor(config) {
        super(config);
        this.maxLength = 2000;
        this.rows = 1;
        this.type = 'textArea';
        if ((config === null || config === void 0 ? void 0 : config.maxLength) > 0) {
            this.maxLength = config === null || config === void 0 ? void 0 : config.maxLength;
        }
        this.rows = config.rows || 1;
    }
}

/* tslint:disable */
const API_BASE_URL = 'http://ytcs-api-v2.orenda.vn';
class AbpServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = 'http://ytcs-api-v2.orenda.vn';
    }
    /**
     * @param includeTypes (optional)
     * @return Success
     */
    apiDefinition(includeTypes) {
        let url_ = this.baseUrl + '/api/abp/api-definition?';
        if (includeTypes === null)
            throw new Error('The parameter \'includeTypes\' cannot be null.');
        else if (includeTypes !== undefined)
            url_ += 'IncludeTypes=' + encodeURIComponent('' + includeTypes) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processApiDefinition(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiDefinition(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processApiDefinition(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApplicationApiDescriptionModel.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status === 403) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result403 = null;
                let resultData403 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result403 = RemoteServiceErrorResponse.fromJS(resultData403);
                return throwException('Forbidden', status, _responseText, _headers, result403);
            }));
        }
        else if (status === 401) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result401 = null;
                let resultData401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = RemoteServiceErrorResponse.fromJS(resultData401);
                return throwException('Unauthorized', status, _responseText, _headers, result401);
            }));
        }
        else if (status === 400) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result400 = null;
                let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = RemoteServiceErrorResponse.fromJS(resultData400);
                return throwException('Bad Request', status, _responseText, _headers, result400);
            }));
        }
        else if (status === 404) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result404 = null;
                let resultData404 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = RemoteServiceErrorResponse.fromJS(resultData404);
                return throwException('Not Found', status, _responseText, _headers, result404);
            }));
        }
        else if (status === 501) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result501 = null;
                let resultData501 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result501 = RemoteServiceErrorResponse.fromJS(resultData501);
                return throwException('Server Error', status, _responseText, _headers, result501);
            }));
        }
        else if (status === 500) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result500 = null;
                let resultData500 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = RemoteServiceErrorResponse.fromJS(resultData500);
                return throwException('Server Error', status, _responseText, _headers, result500);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    applicationConfiguration() {
        let url_ = this.baseUrl + '/api/abp/application-configuration';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processApplicationConfiguration(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApplicationConfiguration(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processApplicationConfiguration(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApplicationConfigurationDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status === 403) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result403 = null;
                let resultData403 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result403 = RemoteServiceErrorResponse.fromJS(resultData403);
                return throwException('Forbidden', status, _responseText, _headers, result403);
            }));
        }
        else if (status === 401) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result401 = null;
                let resultData401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = RemoteServiceErrorResponse.fromJS(resultData401);
                return throwException('Unauthorized', status, _responseText, _headers, result401);
            }));
        }
        else if (status === 400) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result400 = null;
                let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = RemoteServiceErrorResponse.fromJS(resultData400);
                return throwException('Bad Request', status, _responseText, _headers, result400);
            }));
        }
        else if (status === 404) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result404 = null;
                let resultData404 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = RemoteServiceErrorResponse.fromJS(resultData404);
                return throwException('Not Found', status, _responseText, _headers, result404);
            }));
        }
        else if (status === 501) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result501 = null;
                let resultData501 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result501 = RemoteServiceErrorResponse.fromJS(resultData501);
                return throwException('Server Error', status, _responseText, _headers, result501);
            }));
        }
        else if (status === 500) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result500 = null;
                let resultData500 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = RemoteServiceErrorResponse.fromJS(resultData500);
                return throwException('Server Error', status, _responseText, _headers, result500);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
AbpServiceProxy.decorators = [
    { type: Injectable }
];
AbpServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class TenantsServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    byName(name) {
        let url_ = this.baseUrl + '/api/abp/multi-tenancy/tenants/by-name/{name}';
        if (name === undefined || name === null)
            throw new Error('The parameter \'name\' must be defined.');
        url_ = url_.replace('{name}', encodeURIComponent('' + name));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processByName(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processByName(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processByName(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FindTenantResultDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status === 403) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result403 = null;
                let resultData403 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result403 = RemoteServiceErrorResponse.fromJS(resultData403);
                return throwException('Forbidden', status, _responseText, _headers, result403);
            }));
        }
        else if (status === 401) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result401 = null;
                let resultData401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = RemoteServiceErrorResponse.fromJS(resultData401);
                return throwException('Unauthorized', status, _responseText, _headers, result401);
            }));
        }
        else if (status === 400) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result400 = null;
                let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = RemoteServiceErrorResponse.fromJS(resultData400);
                return throwException('Bad Request', status, _responseText, _headers, result400);
            }));
        }
        else if (status === 404) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result404 = null;
                let resultData404 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = RemoteServiceErrorResponse.fromJS(resultData404);
                return throwException('Not Found', status, _responseText, _headers, result404);
            }));
        }
        else if (status === 501) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result501 = null;
                let resultData501 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result501 = RemoteServiceErrorResponse.fromJS(resultData501);
                return throwException('Server Error', status, _responseText, _headers, result501);
            }));
        }
        else if (status === 500) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result500 = null;
                let resultData500 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = RemoteServiceErrorResponse.fromJS(resultData500);
                return throwException('Server Error', status, _responseText, _headers, result500);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    byId(id) {
        let url_ = this.baseUrl + '/api/abp/multi-tenancy/tenants/by-id/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processById(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processById(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processById(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FindTenantResultDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status === 403) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result403 = null;
                let resultData403 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result403 = RemoteServiceErrorResponse.fromJS(resultData403);
                return throwException('Forbidden', status, _responseText, _headers, result403);
            }));
        }
        else if (status === 401) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result401 = null;
                let resultData401 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = RemoteServiceErrorResponse.fromJS(resultData401);
                return throwException('Unauthorized', status, _responseText, _headers, result401);
            }));
        }
        else if (status === 400) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result400 = null;
                let resultData400 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = RemoteServiceErrorResponse.fromJS(resultData400);
                return throwException('Bad Request', status, _responseText, _headers, result400);
            }));
        }
        else if (status === 404) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result404 = null;
                let resultData404 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = RemoteServiceErrorResponse.fromJS(resultData404);
                return throwException('Not Found', status, _responseText, _headers, result404);
            }));
        }
        else if (status === 501) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result501 = null;
                let resultData501 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result501 = RemoteServiceErrorResponse.fromJS(resultData501);
                return throwException('Server Error', status, _responseText, _headers, result501);
            }));
        }
        else if (status === 500) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result500 = null;
                let resultData500 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result500 = RemoteServiceErrorResponse.fromJS(resultData500);
                return throwException('Server Error', status, _responseText, _headers, result500);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
TenantsServiceProxy.decorators = [
    { type: Injectable }
];
TenantsServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class BenhvienServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfBenhVienDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    cosoyteautocompletedatasource(body) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/cosoyteautocompletedatasource';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCosoyteautocompletedatasource(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCosoyteautocompletedatasource(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCosoyteautocompletedatasource(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCoSoYTeAutoDataSourceDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    cosoytedacodailyautocompletedatasource(body) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/cosoytedacodailyautocompletedatasource';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCosoytedacodailyautocompletedatasource(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCosoytedacodailyautocompletedatasource(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCosoytedacodailyautocompletedatasource(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCoSoYTeAutoDataSourceDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param ma (optional)
     * @return Success
     */
    searchbenhvienidbyma(ma) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/searchbenhvienidbyma?';
        if (ma !== undefined)
            url_ += 'ma=' + encodeURIComponent('' + ma) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSearchbenhvienidbyma(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchbenhvienidbyma(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSearchbenhvienidbyma(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getdanhsachbenhvien() {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/getdanhsachbenhvien';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetdanhsachbenhvien(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetdanhsachbenhvien(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetdanhsachbenhvien(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(BenhVienDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param benhVienId (optional)
     * @return Success
     */
    comboboxbenhvienordichvu(benhVienId) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/comboboxbenhvienordichvu?';
        if (benhVienId !== undefined)
            url_ += 'BenhVienId=' + encodeURIComponent('' + benhVienId) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processComboboxbenhvienordichvu(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processComboboxbenhvienordichvu(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processComboboxbenhvienordichvu(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    loaibenhvienbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/{id}/loaibenhvienbyid';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processLoaibenhvienbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoaibenhvienbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processLoaibenhvienbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BenhVienDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BenhVienDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BenhVienDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/benhvien/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
BenhvienServiceProxy.decorators = [
    { type: Injectable }
];
BenhvienServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhdichvusokhamServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    createordelete(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhdichvusokham/createordelete';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreateordelete(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateordelete(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreateordelete(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhdichvusokham/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDichVuSoKhamOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhdichvusokham/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuSoKhamOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhdichvusokham/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuSoKhamOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhdichvusokham/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuSoKhamOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhdichvusokham/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhdichvusokhamServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhdichvusokhamServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhdoituongkhoduocServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param khoId (optional)
     * @return Success
     */
    getkhodoituong(khoId) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhdoituongkhoduoc/getkhodoituong?';
        if (khoId === null)
            throw new Error('The parameter \'khoId\' cannot be null.');
        else if (khoId !== undefined)
            url_ += 'khoId=' + encodeURIComponent('' + khoId) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetkhodoituong(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetkhodoituong(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetkhodoituong(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = KhoDoiTuongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    luucauhinh(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhdoituongkhoduoc/luucauhinh';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processLuucauhinh(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLuucauhinh(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processLuucauhinh(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhdoituongkhoduocServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhdoituongkhoduocServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhgiadichvuServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    gettreeview() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/gettreeview';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGettreeview(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGettreeview(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGettreeview(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    updateserviceprices(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/updateserviceprices';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdateserviceprices(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateserviceprices(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdateserviceprices(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    releaseserviceprices(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/releaseserviceprices';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processReleaseserviceprices(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReleaseserviceprices(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processReleaseserviceprices(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ItemExistsPagedResultDtoOfDichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    releaseservicepricestoall(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/releaseservicepricestoall';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processReleaseservicepricestoall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReleaseservicepricestoall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processReleaseservicepricestoall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ItemExistsPagedResultDtoOfDichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    pricelistexpires(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/pricelistexpires';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processPricelistexpires(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPricelistexpires(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processPricelistexpires(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    updateeffectivedate(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/updateeffectivedate';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdateeffectivedate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateeffectivedate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdateeffectivedate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    updateeffectivedatetoall(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/updateeffectivedatetoall';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdateeffectivedatetoall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateeffectivedatetoall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdateeffectivedatetoall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    importservice(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/importservice';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processImportservice(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportservice(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processImportservice(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    validateexistsimportservice(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/validateexistsimportservice';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processValidateexistsimportservice(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidateexistsimportservice(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processValidateexistsimportservice(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ImportDichVuResultDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    exportexceldichvudangsoanthao() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/exportexceldichvudangsoanthao';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processExportexceldichvudangsoanthao(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportexceldichvudangsoanthao(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processExportexceldichvudangsoanthao(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FileDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    exportexceldichvudangsoanthaosample() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/exportexceldichvudangsoanthaosample';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processExportexceldichvudangsoanthaosample(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportexceldichvudangsoanthaosample(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processExportexceldichvudangsoanthaosample(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FileDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhgiadichvu/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhgiadichvuServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhgiadichvuServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhmautinnhanServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    getall() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhmautinnhan/getall';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CauHinhHeThongDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    saveurl(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhmautinnhan/saveurl';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSaveurl(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveurl(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSaveurl(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhmautinnhan/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhmautinnhan/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhmautinnhan/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhmautinnhan/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhmautinnhan/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhmautinnhanServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhmautinnhanServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhphongbandichvuServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    createordelete(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhphongbandichvu/createordelete';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreateordelete(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateordelete(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreateordelete(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhphongbandichvu/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfPhongBanDichVuOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhphongbandichvu/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhongBanDichVuOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhphongbandichvu/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhongBanDichVuOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhphongbandichvu/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhongBanDichVuOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhphongbandichvu/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhphongbandichvuServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhphongbandichvuServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhquanlyhosobccsServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    getall() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhquanlyhosobccs/getall';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CauHinhHeThongDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    saveurl(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhquanlyhosobccs/saveurl';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSaveurl(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveurl(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSaveurl(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhquanlyhosobccs/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhquanlyhosobccs/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhquanlyhosobccs/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhquanlyhosobccs/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhquanlyhosobccs/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhquanlyhosobccsServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhquanlyhosobccsServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhtaikhoanbulksmsServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    getall() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanbulksms/getall';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CauHinhHeThongDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    saveurl(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanbulksms/saveurl';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSaveurl(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveurl(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSaveurl(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanbulksms/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanbulksms/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanbulksms/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanbulksms/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanbulksms/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhtaikhoanbulksmsServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhtaikhoanbulksmsServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhtaikhoandichvuthecaoServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    getall() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoandichvuthecao/getall';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CauHinhHeThongDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    saveurl(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoandichvuthecao/saveurl';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSaveurl(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveurl(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSaveurl(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoandichvuthecao/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoandichvuthecao/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoandichvuthecao/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoandichvuthecao/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoandichvuthecao/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhtaikhoandichvuthecaoServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhtaikhoandichvuthecaoServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhtaikhoanlienthongServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhTaiKhoanLienThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getall() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/getall';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CauHinhTaiKhoanLienThongDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyloaitaikhoan(loaiTaiKhoan) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/getbyloaitaikhoan/{loaiTaiKhoan}';
        if (loaiTaiKhoan === undefined || loaiTaiKhoan === null)
            throw new Error('The parameter \'loaiTaiKhoan\' must be defined.');
        url_ = url_.replace('{loaiTaiKhoan}', encodeURIComponent('' + loaiTaiKhoan));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyloaitaikhoan(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyloaitaikhoan(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyloaitaikhoan(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhTaiKhoanLienThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhTaiKhoanLienThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    test(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/test';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processTest(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processTest(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    saveurl(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/saveurl';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSaveurl(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveurl(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSaveurl(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCauHinhTaiKhoanLienThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhTaiKhoanLienThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanlienthong/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhtaikhoanlienthongServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhtaikhoanlienthongServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhtaikhoanviettelpayServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    getall() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanviettelpay/getall';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CauHinhHeThongDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    saveurl(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanviettelpay/saveurl';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSaveurl(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveurl(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSaveurl(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanviettelpay/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanviettelpay/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanviettelpay/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanviettelpay/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtaikhoanviettelpay/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhtaikhoanviettelpayServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhtaikhoanviettelpayServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CauhinhtinnhandichvuServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    getall() {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtinnhandichvu/getall';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetall(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetall(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetall(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CauHinhHeThongDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    saveurl(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtinnhandichvu/saveurl';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSaveurl(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveurl(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSaveurl(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtinnhandichvu/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfCauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtinnhandichvu/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtinnhandichvu/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtinnhandichvu/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CauHinhHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/cauhinhtinnhandichvu/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CauhinhtinnhandichvuServiceProxy.decorators = [
    { type: Injectable }
];
CauhinhtinnhandichvuServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class ChuongtrinhServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/chuongtrinh/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfChuongTrinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/chuongtrinh/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ChuongTrinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/chuongtrinh/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ChuongTrinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/chuongtrinh/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ChuongTrinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/chuongtrinh/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
ChuongtrinhServiceProxy.decorators = [
    { type: Injectable }
];
ChuongtrinhServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class CombodataServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getfromdatabase(body) {
        let url_ = this.baseUrl + '/api/danh-muc/combodata/getfromdatabase';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetfromdatabase(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetfromdatabase(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetfromdatabase(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getfromdatabasetreeview(body) {
        let url_ = this.baseUrl + '/api/danh-muc/combodata/getfromdatabasetreeview';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetfromdatabasetreeview(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetfromdatabasetreeview(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetfromdatabasetreeview(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param type (optional)
     * @return Success
     */
    appenum(type) {
        let url_ = this.baseUrl + '/api/danh-muc/combodata/appenum?';
        if (type !== undefined)
            url_ += 'type=' + encodeURIComponent('' + type) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processAppenum(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppenum(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processAppenum(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
CombodataServiceProxy.decorators = [
    { type: Injectable }
];
CombodataServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class DichvukhamchuabenhServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/dichvukhamchuabenh/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/dichvukhamchuabenh/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    gettreeview() {
        let url_ = this.baseUrl + '/api/danh-muc/dichvukhamchuabenh/gettreeview';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGettreeview(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGettreeview(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGettreeview(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/dichvukhamchuabenh/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    createbatch(ids) {
        let url_ = this.baseUrl + '/api/danh-muc/dichvukhamchuabenh/createbatch/{ids}';
        if (ids === undefined || ids === null)
            throw new Error('The parameter \'ids\' must be defined.');
        url_ = url_.replace('{ids}', encodeURIComponent('' + ids));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreatebatch(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatebatch(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreatebatch(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/dichvukhamchuabenh/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DichVuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    export(body) {
        let url_ = this.baseUrl + '/api/danh-muc/dichvukhamchuabenh/export';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processExport(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExport(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processExport(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FileDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/dichvukhamchuabenh/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
DichvukhamchuabenhServiceProxy.decorators = [
    { type: Injectable }
];
DichvukhamchuabenhServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class DoituongServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    treedatadoituong() {
        let url_ = this.baseUrl + '/api/danh-muc/doituong/treedatadoituong';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processTreedatadoituong(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTreedatadoituong(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processTreedatadoituong(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DoiTuongTreeDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituong/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituong/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituong/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDoiTuongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/doituong/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/doituong/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
DoituongServiceProxy.decorators = [
    { type: Injectable }
];
DoituongServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class DoituongkhoduocnoitruServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    gettreedatadoituongkhoduocnoitru(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongkhoduocnoitru/gettreedatadoituongkhoduocnoitru';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGettreedatadoituongkhoduocnoitru(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGettreedatadoituongkhoduocnoitru(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGettreedatadoituongkhoduocnoitru(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(KhoDuocTreeDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    createorupdatedoituongnoitru(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongkhoduocnoitru/createorupdatedoituongnoitru';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreateorupdatedoituongnoitru(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateorupdatedoituongnoitru(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreateorupdatedoituongnoitru(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongkhoduocnoitru/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDoiTuongKhoDuocNoiTruDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongkhoduocnoitru/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongKhoDuocNoiTruDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongkhoduocnoitru/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongKhoDuocNoiTruDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongkhoduocnoitru/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongKhoDuocNoiTruDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongkhoduocnoitru/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
DoituongkhoduocnoitruServiceProxy.decorators = [
    { type: Injectable }
];
DoituongkhoduocnoitruServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class DoituongloaigiaServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    gettreedatadoituongloaigia(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongloaigia/gettreedatadoituongloaigia';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGettreedatadoituongloaigia(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGettreedatadoituongloaigia(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGettreedatadoituongloaigia(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(LoaiGiaTreeDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    createorupdate(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongloaigia/createorupdate';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreateorupdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateorupdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreateorupdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongloaigia/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDoiTuongLoaiGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongloaigia/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongLoaiGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongloaigia/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongLoaiGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongloaigia/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DoiTuongLoaiGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/doituongloaigia/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
DoituongloaigiaServiceProxy.decorators = [
    { type: Injectable }
];
DoituongloaigiaServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class DonvihanhchinhServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/donvihanhchinh/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DonViHanhChinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/donvihanhchinh/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DonViHanhChinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/donvihanhchinh/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DonViHanhChinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/donvihanhchinh/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDonViHanhChinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/donvihanhchinh/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
DonvihanhchinhServiceProxy.decorators = [
    { type: Injectable }
];
DonvihanhchinhServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class DonvitinhduocphamServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/donvitinhduocpham/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDonViTinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/donvitinhduocpham/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DonViTinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/donvitinhduocpham/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DonViTinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/donvitinhduocpham/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DonViTinhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/donvitinhduocpham/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
DonvitinhduocphamServiceProxy.decorators = [
    { type: Injectable }
];
DonvitinhduocphamServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class DuocbenhvienServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    bulkthongtinthaubyduocid(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/bulkthongtinthaubyduocid';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processBulkthongtinthaubyduocid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBulkthongtinthaubyduocid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processBulkthongtinthaubyduocid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    thongtinthaubyduocid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/{id}/thongtinthaubyduocid';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processThongtinthaubyduocid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processThongtinthaubyduocid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processThongtinthaubyduocid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(DuocThongTinThauDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getpagedlistduocdungchung(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/getpagedlistduocdungchung';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetpagedlistduocdungchung(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetpagedlistduocdungchung(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetpagedlistduocdungchung(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDuocDungChungDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    themthuoctudanhmucchung(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/themthuoctudanhmucchung';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processThemthuoctudanhmucchung(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processThemthuoctudanhmucchung(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processThemthuoctudanhmucchung(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    exportexcelmaumacdinh(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/exportexcelmaumacdinh';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processExportexcelmaumacdinh(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportexcelmaumacdinh(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processExportexcelmaumacdinh(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FileDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    exportexcelmau917(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/exportexcelmau917';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processExportexcelmau917(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportexcelmau917(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processExportexcelmau917(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FileDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param idUpdate (optional)
     * @return Success
     */
    checktrungvacxin(vacxinId, idUpdate) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/checktrungvacxin/{VacxinId}?';
        if (vacxinId === undefined || vacxinId === null)
            throw new Error('The parameter \'vacxinId\' must be defined.');
        url_ = url_.replace('{VacxinId}', encodeURIComponent('' + vacxinId));
        if (idUpdate !== undefined)
            url_ += 'idUpdate=' + encodeURIComponent('' + idUpdate) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processChecktrungvacxin(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChecktrungvacxin(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processChecktrungvacxin(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/duocbenhvien/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
DuocbenhvienServiceProxy.decorators = [
    { type: Injectable }
];
DuocbenhvienServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class DuocthongtinthauServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocthongtinthau/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDuocThongTinThauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/duocthongtinthau/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DuocThongTinThauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocthongtinthau/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DuocThongTinThauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/duocthongtinthau/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DuocThongTinThauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/duocthongtinthau/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
DuocthongtinthauServiceProxy.decorators = [
    { type: Injectable }
];
DuocthongtinthauServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class FileServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    downloadtempfile(token) {
        let url_ = this.baseUrl + '/api/danh-muc/file/downloadtempfile/{token}';
        if (token === undefined || token === null)
            throw new Error('The parameter \'token\' must be defined.');
        url_ = url_.replace('{token}', encodeURIComponent('' + token));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processDownloadtempfile(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadtempfile(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processDownloadtempfile(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param contentType (optional)
     * @return Success
     */
    nhanvienimg(id, loai, contentType) {
        let url_ = this.baseUrl + '/api/danh-muc/file/nhanvienimg/{id}/{loai}?';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        if (loai === undefined || loai === null)
            throw new Error('The parameter \'loai\' must be defined.');
        url_ = url_.replace('{loai}', encodeURIComponent('' + loai));
        if (contentType !== undefined)
            url_ += 'contentType=' + encodeURIComponent('' + contentType) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processNhanvienimg(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNhanvienimg(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processNhanvienimg(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param width (optional)
     * @param height (optional)
     * @return Success
     */
    uploadanh(width, height) {
        let url_ = this.baseUrl + '/api/danh-muc/file/uploadanh?';
        if (width !== undefined)
            url_ += 'width=' + encodeURIComponent('' + width) + '&';
        if (height !== undefined)
            url_ += 'height=' + encodeURIComponent('' + height) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUploadanh(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadanh(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUploadanh(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FileDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    uploaexcel() {
        let url_ = this.baseUrl + '/api/danh-muc/file/uploaexcel';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUploaexcel(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploaexcel(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUploaexcel(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = FileDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
FileServiceProxy.decorators = [
    { type: Injectable }
];
FileServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class GetentitycommonServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getbyid(body) {
        let url_ = this.baseUrl + '/api/danh-muc/getentitycommon/getbyid';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GetEntityByIdOutDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
GetentitycommonServiceProxy.decorators = [
    { type: Injectable }
];
GetentitycommonServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class GiuongbenhServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/giuongbenh/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GiuongBenhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/giuongbenh/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GiuongBenhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/giuongbenh/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfGiuongBenhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/giuongbenh/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GiuongBenhDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/giuongbenh/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
GiuongbenhServiceProxy.decorators = [
    { type: Injectable }
];
GiuongbenhServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class HethongdanhmucServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmuc/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LstDictionaryDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmuc/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LstDictionaryDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getListDictionaryByListTypeCode(body) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmuc/get-list-dictionary-by-list-type-code';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetListDictionaryByListTypeCode(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListDictionaryByListTypeCode(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetListDictionaryByListTypeCode(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(LstDictionaryDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmuc/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfLstDictionaryDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmuc/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LstDictionaryDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmuc/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
HethongdanhmucServiceProxy.decorators = [
    { type: Injectable }
];
HethongdanhmucServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class HethongdanhmucdinhnghiaServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    gettreeview() {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmucdinhnghia/gettreeview';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGettreeview(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGettreeview(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGettreeview(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmucdinhnghia/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LstDictionaryTypeDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmucdinhnghia/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LstDictionaryTypeDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmucdinhnghia/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyids(id) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmucdinhnghia/removebyids/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyids(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyids(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyids(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmucdinhnghia/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfLstDictionaryTypeDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/hethongdanhmucdinhnghia/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LstDictionaryTypeDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
HethongdanhmucdinhnghiaServiceProxy.decorators = [
    { type: Injectable }
];
HethongdanhmucdinhnghiaServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class HoatchatServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/hoatchat/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfHoatChatDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/hoatchat/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = HoatChatDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/hoatchat/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = HoatChatDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/hoatchat/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = HoatChatDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/hoatchat/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
HoatchatServiceProxy.decorators = [
    { type: Injectable }
];
HoatchatServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class ImportduocphamServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    kiemtrathuoc(body) {
        let url_ = this.baseUrl + '/api/danh-muc/importduocpham/kiemtrathuoc';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processKiemtrathuoc(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processKiemtrathuoc(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processKiemtrathuoc(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = KiemTraExcelThuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    insertthuochople(body) {
        let url_ = this.baseUrl + '/api/danh-muc/importduocpham/insertthuochople';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processInsertthuochople(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertthuochople(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processInsertthuochople(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfInt32.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    updatethuochople(body) {
        let url_ = this.baseUrl + '/api/danh-muc/importduocpham/updatethuochople';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdatethuochople(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatethuochople(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdatethuochople(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfInt32.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
ImportduocphamServiceProxy.decorators = [
    { type: Injectable }
];
ImportduocphamServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class KhangnguyenServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/khangnguyen/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = KhangNguyenDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/khangnguyen/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = KhangNguyenDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    comboboxdata() {
        let url_ = this.baseUrl + '/api/danh-muc/khangnguyen/comboboxdata';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processComboboxdata(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processComboboxdata(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processComboboxdata(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    checktrungid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/khangnguyen/{id}/checktrungid';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processChecktrungid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChecktrungid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processChecktrungid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/khangnguyen/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    listkhangnguyencombo() {
        let url_ = this.baseUrl + '/api/danh-muc/khangnguyen/listkhangnguyencombo';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processListkhangnguyencombo(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListkhangnguyencombo(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processListkhangnguyencombo(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/khangnguyen/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = KhangNguyenDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/khangnguyen/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfKhangNguyenDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
KhangnguyenServiceProxy.decorators = [
    { type: Injectable }
];
KhangnguyenServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class KhoduocServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/khoduoc/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfKhoDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/khoduoc/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = KhoDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/khoduoc/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = KhoDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/khoduoc/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = KhoDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/khoduoc/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
KhoduocServiceProxy.decorators = [
    { type: Injectable }
];
KhoduocServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class LoaiduocServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaiduoc/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfLoaiDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/loaiduoc/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaiduoc/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaiduoc/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/loaiduoc/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
LoaiduocServiceProxy.decorators = [
    { type: Injectable }
];
LoaiduocServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class LoaigiaServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaigia/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaigia/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaigia/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfLoaiGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/loaigia/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/loaigia/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
LoaigiaServiceProxy.decorators = [
    { type: Injectable }
];
LoaigiaServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class LoaivattuServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaivattu/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfLoaiVatTuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/loaivattu/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiVatTuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaivattu/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiVatTuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/loaivattu/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = LoaiVatTuDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/loaivattu/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
LoaivattuServiceProxy.decorators = [
    { type: Injectable }
];
LoaivattuServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class NhacungcapServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhacungcap/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhaCungCapDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhacungcap/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhaCungCapDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhacungcap/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfNhaCungCapDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/nhacungcap/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhaCungCapDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/nhacungcap/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
NhacungcapServiceProxy.decorators = [
    { type: Injectable }
];
NhacungcapServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class NhanlucServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param fileToken (optional)
     * @return Success
     */
    uploadanh(nhanLucId, loai, fileToken) {
        let url_ = this.baseUrl + '/api/danh-muc/nhanluc/uploadanh/{nhanLucId}?';
        if (nhanLucId === undefined || nhanLucId === null)
            throw new Error('The parameter \'nhanLucId\' must be defined.');
        url_ = url_.replace('{nhanLucId}', encodeURIComponent('' + nhanLucId));
        if (loai === undefined || loai === null)
            throw new Error('The parameter \'loai\' must be defined and cannot be null.');
        else
            url_ += 'loai=' + encodeURIComponent('' + loai) + '&';
        if (fileToken !== undefined)
            url_ += 'fileToken=' + encodeURIComponent('' + fileToken) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUploadanh(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadanh(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUploadanh(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    nhanlucbybenhvienid(benhVienId) {
        let url_ = this.baseUrl + '/api/danh-muc/nhanluc/nhanlucbybenhvienid/{BenhVienId}';
        if (benhVienId === undefined || benhVienId === null)
            throw new Error('The parameter \'benhVienId\' must be defined.');
        url_ = url_.replace('{BenhVienId}', encodeURIComponent('' + benhVienId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processNhanlucbybenhvienid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processNhanlucbybenhvienid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processNhanlucbybenhvienid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhanluc/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfNhanLucDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/nhanluc/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhanLucDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhanluc/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhanLucDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhanluc/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhanLucDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/nhanluc/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
NhanlucServiceProxy.decorators = [
    { type: Injectable }
];
NhanlucServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class NhomduocServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomduoc/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfNhomDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomduoc/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhomDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomduoc/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhomDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomduoc/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhomDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomduoc/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
NhomduocServiceProxy.decorators = [
    { type: Injectable }
];
NhomduocServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class NhomdvktbhytServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomdvktbhyt/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfNhomDvktBhytDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomdvktbhyt/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhomDvktBhytDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomdvktbhyt/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhomDvktBhytDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomdvktbhyt/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = NhomDvktBhytDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/nhomdvktbhyt/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
NhomdvktbhytServiceProxy.decorators = [
    { type: Injectable }
];
NhomdvktbhytServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class PermissionmanagementServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getbyrole(body) {
        let url_ = this.baseUrl + '/api/danh-muc/permissionmanagement/getbyrole';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyrole(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyrole(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyrole(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GetPermissionListResultDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
PermissionmanagementServiceProxy.decorators = [
    { type: Injectable }
];
PermissionmanagementServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class PhacdodieutriServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/phacdodieutri/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfPhacDoDieuTriDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/phacdodieutri/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhacDoDieuTriDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/phacdodieutri/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhacDoDieuTriDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/phacdodieutri/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhacDoDieuTriDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/phacdodieutri/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
PhacdodieutriServiceProxy.decorators = [
    { type: Injectable }
];
PhacdodieutriServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class PhannhomduocServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/phannhomduoc/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfPhanNhomDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/phannhomduoc/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhanNhomDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/phannhomduoc/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhanNhomDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/phannhomduoc/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhanNhomDuocDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/phannhomduoc/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
PhannhomduocServiceProxy.decorators = [
    { type: Injectable }
];
PhannhomduocServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class PhongbanServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    treesource() {
        let url_ = this.baseUrl + '/api/danh-muc/phongban/treesource';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processTreesource(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTreesource(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processTreesource(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(PhongBanTreeDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/phongban/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfPhongBanDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/phongban/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhongBanDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/phongban/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhongBanDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/phongban/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PhongBanDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/phongban/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
PhongbanServiceProxy.decorators = [
    { type: Injectable }
];
PhongbanServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class SearchservercombodataServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    benhicdselect(body) {
        let url_ = this.baseUrl + '/api/danh-muc/searchservercombodata/benhicdselect';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processBenhicdselect(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBenhicdselect(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processBenhicdselect(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfComboBoxDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    benhicdtable(body) {
        let url_ = this.baseUrl + '/api/danh-muc/searchservercombodata/benhicdtable';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processBenhicdtable(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBenhicdtable(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processBenhicdtable(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfBenhIcdSearchDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
SearchservercombodataServiceProxy.decorators = [
    { type: Injectable }
];
SearchservercombodataServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class SelectoptionServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = 'http://ytcs-api-v2.orenda.vn';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getoptions(body) {
        let url_ = this.baseUrl + '/api/danh-muc/selectoption/getoptions';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain',
                'Authorization': `Bearer ` + localStorage.getItem('access_token')
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetoptions(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetoptions(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetoptions(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
SelectoptionServiceProxy.decorators = [
    { type: Injectable }
];
SelectoptionServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class SelectsearchserverServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = 'http://ytcs-api-v2.orenda.vn';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getoptions(body) {
        let url_ = this.baseUrl + '/api/danh-muc/selectsearchserver/getoptions';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain',
                'Authorization': `Bearer ` + localStorage.getItem('access_token')
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetoptions(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetoptions(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetoptions(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfComboBoxDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
SelectsearchserverServiceProxy.decorators = [
    { type: Injectable }
];
SelectsearchserverServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class SokhamServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/sokham/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfSoKhamDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/sokham/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SoKhamDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/sokham/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SoKhamDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/sokham/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SoKhamDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/sokham/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
SokhamServiceProxy.decorators = [
    { type: Injectable }
];
SokhamServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class StaticroleServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/staticrole/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfStaticRolePagedOutputDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param id (optional)
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/staticrole/getbyid?';
        if (id === null)
            throw new Error('The parameter \'id\' cannot be null.');
        else if (id !== undefined)
            url_ += 'id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SysRoleDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    upsert(body) {
        let url_ = this.baseUrl + '/api/danh-muc/staticrole/upsert';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpsert(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsert(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpsert(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfSysRoleDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    setpermissionableforadminrole(body) {
        let url_ = this.baseUrl + '/api/danh-muc/staticrole/setpermissionableforadminrole';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSetpermissionableforadminrole(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetpermissionableforadminrole(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSetpermissionableforadminrole(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param id (optional)
     * @return Success
     */
    getpermissionableforadminrole(id) {
        let url_ = this.baseUrl + '/api/danh-muc/staticrole/getpermissionableforadminrole?';
        if (id === null)
            throw new Error('The parameter \'id\' cannot be null.');
        else if (id !== undefined)
            url_ += 'id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetpermissionableforadminrole(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetpermissionableforadminrole(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetpermissionableforadminrole(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(SysPermissionAdminDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param loaiBenhVien (optional)
     * @return Success
     */
    permissionloaibenhvien(loaiBenhVien) {
        let url_ = this.baseUrl + '/api/danh-muc/staticrole/permissionloaibenhvien?';
        if (loaiBenhVien === null)
            throw new Error('The parameter \'loaiBenhVien\' cannot be null.');
        else if (loaiBenhVien !== undefined)
            url_ += 'loaiBenhVien=' + encodeURIComponent('' + loaiBenhVien) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processPermissionloaibenhvien(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPermissionloaibenhvien(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processPermissionloaibenhvien(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(SysPermissionLoaiBenhVienEntity.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    setpermissionloaibenhvien(body) {
        let url_ = this.baseUrl + '/api/danh-muc/staticrole/setpermissionloaibenhvien';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSetpermissionloaibenhvien(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetpermissionloaibenhvien(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSetpermissionloaibenhvien(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
StaticroleServiceProxy.decorators = [
    { type: Injectable }
];
StaticroleServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class SysroleServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    setpermissionforsysrole(body) {
        let url_ = this.baseUrl + '/api/danh-muc/sysrole/setpermissionforsysrole';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSetpermissionforsysrole(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetpermissionforsysrole(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSetpermissionforsysrole(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param sysRoleId (optional)
     * @return Success
     */
    getpermissiongranted(sysRoleId) {
        let url_ = this.baseUrl + '/api/danh-muc/sysrole/getpermissiongranted?';
        if (sysRoleId === null)
            throw new Error('The parameter \'sysRoleId\' cannot be null.');
        else if (sysRoleId !== undefined)
            url_ += 'sysRoleId=' + encodeURIComponent('' + sysRoleId) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetpermissiongranted(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetpermissiongranted(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetpermissiongranted(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SysRolePermissionDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlistrolecoso(body) {
        let url_ = this.baseUrl + '/api/danh-muc/sysrole/getlistrolecoso';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlistrolecoso(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlistrolecoso(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlistrolecoso(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfSysRoleDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    upsertrolecoso(body) {
        let url_ = this.baseUrl + '/api/danh-muc/sysrole/upsertrolecoso';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpsertrolecoso(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsertrolecoso(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpsertrolecoso(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfSysRoleDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param id (optional)
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/sysrole/getbyid?';
        if (id === null)
            throw new Error('The parameter \'id\' cannot be null.');
        else if (id !== undefined)
            url_ += 'id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SysRoleDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    xoarolecoso(sysRoleId) {
        let url_ = this.baseUrl + '/api/danh-muc/sysrole/xoarolecoso/{sysRoleId}';
        if (sysRoleId === undefined || sysRoleId === null)
            throw new Error('The parameter \'sysRoleId\' must be defined.');
        url_ = url_.replace('{sysRoleId}', encodeURIComponent('' + sysRoleId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processXoarolecoso(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processXoarolecoso(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processXoarolecoso(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfInt64.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
SysroleServiceProxy.decorators = [
    { type: Injectable }
];
SysroleServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class TaikhoanadminServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoanadmin/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfSysUserDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getsysroleadmincoso() {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoanadmin/getsysroleadmincoso';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetsysroleadmincoso(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetsysroleadmincoso(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetsysroleadmincoso(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(SysRoleDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    taotaikhoanadmincoso(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoanadmin/taotaikhoanadmincoso';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processTaotaikhoanadmincoso(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTaotaikhoanadmincoso(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processTaotaikhoanadmincoso(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfSysUserDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    capnhapthongtin(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoanadmin/capnhapthongtin';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCapnhapthongtin(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCapnhapthongtin(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCapnhapthongtin(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfSysUserDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    doimatkhau(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoanadmin/doimatkhau';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processDoimatkhau(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDoimatkhau(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processDoimatkhau(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    xoataikhoan(userId) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoanadmin/xoataikhoan/{userId}';
        if (userId === undefined || userId === null)
            throw new Error('The parameter \'userId\' must be defined.');
        url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processXoataikhoan(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processXoataikhoan(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processXoataikhoan(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfGuid.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    lock(userId) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoanadmin/lock/{userId}';
        if (userId === undefined || userId === null)
            throw new Error('The parameter \'userId\' must be defined.');
        url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processLock(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLock(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processLock(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    unlock(userId) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoanadmin/unlock/{userId}';
        if (userId === undefined || userId === null)
            throw new Error('The parameter \'userId\' must be defined.');
        url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUnlock(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnlock(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUnlock(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
TaikhoanadminServiceProxy.decorators = [
    { type: Injectable }
];
TaikhoanadminServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class TaikhoancosoServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfSysUserDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    taotaikhoancoso(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/taotaikhoancoso';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processTaotaikhoancoso(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTaotaikhoancoso(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processTaotaikhoancoso(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfSysUserDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    capnhapthongtin(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/capnhapthongtin';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCapnhapthongtin(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCapnhapthongtin(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCapnhapthongtin(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfSysUserDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param id (optional)
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/getbyid?';
        if (id === null)
            throw new Error('The parameter \'id\' cannot be null.');
        else if (id !== undefined)
            url_ += 'id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SysUserDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getdanhsachrole() {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/getdanhsachrole';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetdanhsachrole(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetdanhsachrole(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetdanhsachrole(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(RoleAbleDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    setroleforuser(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/setroleforuser';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSetroleforuser(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetroleforuser(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSetroleforuser(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param userId (optional)
     * @return Success
     */
    getuserrole(userId) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/getuserrole?';
        if (userId === null)
            throw new Error('The parameter \'userId\' cannot be null.');
        else if (userId !== undefined)
            url_ += 'userId=' + encodeURIComponent('' + userId) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetuserrole(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetuserrole(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetuserrole(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(SysUserRoleEntity.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    doimatkhau(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/doimatkhau';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processDoimatkhau(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDoimatkhau(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processDoimatkhau(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getlistcauhinhsysappprivate() {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/getlistcauhinhsysappprivate';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlistcauhinhsysappprivate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlistcauhinhsysappprivate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlistcauhinhsysappprivate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DanhSachCauHinhSysAppPrivateRoleDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param id (optional)
     * @return Success
     */
    getlistdacauhinhsysapp(id) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/getlistdacauhinhsysapp?';
        if (id === null)
            throw new Error('The parameter \'id\' cannot be null.');
        else if (id !== undefined)
            url_ += 'id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlistdacauhinhsysapp(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlistdacauhinhsysapp(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlistdacauhinhsysapp(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(SysAppPrivateRoleDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    luusysappprivateroleuser(body) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/luusysappprivateroleuser';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processLuusysappprivateroleuser(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLuusysappprivateroleuser(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processLuusysappprivateroleuser(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    xoataikhoan(userId) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/xoataikhoan/{userId}';
        if (userId === undefined || userId === null)
            throw new Error('The parameter \'userId\' must be defined.');
        url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processXoataikhoan(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processXoataikhoan(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processXoataikhoan(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CommonResultDtoOfGuid.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    lock(userId) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/lock/{userId}';
        if (userId === undefined || userId === null)
            throw new Error('The parameter \'userId\' must be defined.');
        url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processLock(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLock(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processLock(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    unlock(userId) {
        let url_ = this.baseUrl + '/api/danh-muc/taikhoancoso/unlock/{userId}';
        if (userId === undefined || userId === null)
            throw new Error('The parameter \'userId\' must be defined.');
        url_ = url_.replace('{userId}', encodeURIComponent('' + userId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUnlock(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnlock(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUnlock(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
TaikhoancosoServiceProxy.decorators = [
    { type: Injectable }
];
TaikhoancosoServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class ThamsobenhvienServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    updatevalue(body) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/updatevalue';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdatevalue(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatevalue(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdatevalue(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    updatechanged(body) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/updatechanged';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdatechanged(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatechanged(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdatechanged(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    dongbothamsohethong() {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/dongbothamsohethong';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processDongbothamsohethong(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDongbothamsohethong(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processDongbothamsohethong(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param id (optional)
     * @return Success
     */
    cauhinhthamsohethong(id) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/cauhinhthamsohethong?';
        if (id === null)
            throw new Error('The parameter \'id\' cannot be null.');
        else if (id !== undefined)
            url_ += 'Id=' + encodeURIComponent('' + id) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCauhinhthamsohethong(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCauhinhthamsohethong(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCauhinhthamsohethong(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfSysAppSettingsDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SysAppSettingsDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SysAppSettingsDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SysAppSettingsDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsobenhvien/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
ThamsobenhvienServiceProxy.decorators = [
    { type: Injectable }
];
ThamsobenhvienServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class ThamsohethongServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsohethong/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfThamSoHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsohethong/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ThamSoHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsohethong/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ThamSoHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsohethong/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ThamSoHeThongDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/thamsohethong/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
ThamsohethongServiceProxy.decorators = [
    { type: Injectable }
];
ThamsohethongServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class ThietbiServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/thietbi/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfThietBiDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/thietbi/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ThietBiDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/thietbi/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ThietBiDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/thietbi/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ThietBiDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/thietbi/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
ThietbiServiceProxy.decorators = [
    { type: Injectable }
];
ThietbiServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class TienteServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/tiente/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TienTeDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/tiente/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TienTeDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/tiente/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfTienTeDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/tiente/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TienTeDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/tiente/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
TienteServiceProxy.decorators = [
    { type: Injectable }
];
TienteServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class TientetygiaServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/tientetygia/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfTienTeTyGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/tientetygia/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TienTeTyGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/tientetygia/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TienTeTyGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/tientetygia/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TienTeTyGiaDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/tientetygia/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
TientetygiaServiceProxy.decorators = [
    { type: Injectable }
];
TientetygiaServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class ToathuocmauServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmau/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfDSToaThuocMauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmau/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DSToaThuocMauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmau/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DSToaThuocMauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmau/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = DSToaThuocMauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmau/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
ToathuocmauServiceProxy.decorators = [
    { type: Injectable }
];
ToathuocmauServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class ToathuocmauchitietServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    removebycode(ma) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmauchitiet/removebycode/{ma}';
        if (ma === undefined || ma === null)
            throw new Error('The parameter \'ma\' must be defined.');
        url_ = url_.replace('{ma}', encodeURIComponent('' + ma));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebycode(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebycode(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebycode(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    checkcode(ma) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmauchitiet/checkcode/{ma}';
        if (ma === undefined || ma === null)
            throw new Error('The parameter \'ma\' must be defined.');
        url_ = url_.replace('{ma}', encodeURIComponent('' + ma));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCheckcode(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckcode(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCheckcode(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    savetoathuocmauchitiet(body) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmauchitiet/savetoathuocmauchitiet';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSavetoathuocmauchitiet(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSavetoathuocmauchitiet(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSavetoathuocmauchitiet(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmauchitiet/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfToaThuocMauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmauchitiet/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ToaThuocMauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmauchitiet/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ToaThuocMauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmauchitiet/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ToaThuocMauDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/toathuocmauchitiet/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
ToathuocmauchitietServiceProxy.decorators = [
    { type: Injectable }
];
ToathuocmauchitietServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class UserextensionServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @return Success
     */
    usersession() {
        let url_ = this.baseUrl + '/api/danh-muc/userextension/usersession';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processUsersession(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersession(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUsersession(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UserSessionDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    clearusersessioncache() {
        let url_ = this.baseUrl + '/api/danh-muc/userextension/clearusersessioncache';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processClearusersessioncache(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearusersessioncache(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processClearusersessioncache(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    switchbenhvienid(benhVienId) {
        let url_ = this.baseUrl + '/api/danh-muc/userextension/switchbenhvienid/{benhVienId}';
        if (benhVienId === undefined || benhVienId === null)
            throw new Error('The parameter \'benhVienId\' must be defined.');
        url_ = url_.replace('{benhVienId}', encodeURIComponent('' + benhVienId));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processSwitchbenhvienid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSwitchbenhvienid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processSwitchbenhvienid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
UserextensionServiceProxy.decorators = [
    { type: Injectable }
];
UserextensionServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class VacxinServiceProxy {
    constructor(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : '';
    }
    /**
     * @param body (optional)
     * @return Success
     */
    getlist(body) {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/getlist';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetlist(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetlist(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetlist(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = PagedResultDtoOfVacXinDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    getbyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/getbyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processGetbyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processGetbyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = VacXinDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    create(body) {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/create';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processCreate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = VacXinDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    update(id, body) {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/update/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json',
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processUpdate(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = VacXinDto.fromJS(resultData200);
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param body (optional)
     * @return Success
     */
    editvacxinkhangnguyen(body) {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/editvacxinkhangnguyen';
        url_ = url_.replace(/[?&]$/, '');
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Content-Type': 'application/json-patch+json'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processEditvacxinkhangnguyen(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditvacxinkhangnguyen(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processEditvacxinkhangnguyen(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    checktrungid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/{id}/checktrungid';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processChecktrungid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChecktrungid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processChecktrungid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    removebyid(id) {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/removebyid/{id}';
        if (id === undefined || id === null)
            throw new Error('The parameter \'id\' must be defined.');
        url_ = url_.replace('{id}', encodeURIComponent('' + id));
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({})
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processRemovebyid(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovebyid(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processRemovebyid(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    comboboxdata() {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/comboboxdata';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('get', url_, options_).pipe(mergeMap((response_) => {
            return this.processComboboxdata(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processComboboxdata(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processComboboxdata(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @return Success
     */
    vacxinextend() {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/vacxinextend';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processVacxinextend(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVacxinextend(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processVacxinextend(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
    /**
     * @param tcmr (optional)
     * @return Success
     */
    vacxinlapkehoach(tcmr) {
        let url_ = this.baseUrl + '/api/danh-muc/vacxin/vacxinlapkehoach?';
        if (tcmr === null)
            throw new Error('The parameter \'tcmr\' cannot be null.');
        else if (tcmr !== undefined)
            url_ += 'tcmr=' + encodeURIComponent('' + tcmr) + '&';
        url_ = url_.replace(/[?&]$/, '');
        let options_ = {
            observe: 'response',
            responseType: 'blob',
            headers: new HttpHeaders({
                'Accept': 'text/plain'
            })
        };
        return this.http.request('post', url_, options_).pipe(mergeMap((response_) => {
            return this.processVacxinlapkehoach(response_);
        })).pipe(catchError((response_) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVacxinlapkehoach(response_);
                }
                catch (e) {
                    return throwError(e);
                }
            }
            else
                return throwError(response_);
        }));
    }
    processVacxinlapkehoach(response) {
        const status = response.status;
        const responseBlob = response instanceof HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        let _headers = {};
        if (response.headers) {
            for (let key of response.headers.keys()) {
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                let result200 = null;
                let resultData200 = _responseText === '' ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ComboBoxDto.fromJS(item));
                }
                return of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
                return throwException('An unexpected server error occurred.', status, _responseText, _headers);
            }));
        }
        return of(null);
    }
}
VacxinServiceProxy.decorators = [
    { type: Injectable }
];
VacxinServiceProxy.ctorParameters = () => [
    { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [API_BASE_URL,] }] }
];
class ControllerInterfaceApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.type = data['type'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ControllerInterfaceApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['type'] = this.type;
        return data;
    }
}
class MethodParameterApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.typeAsString = data['typeAsString'];
            this.type = data['type'];
            this.typeSimple = data['typeSimple'];
            this.isOptional = data['isOptional'];
            this.defaultValue = data['defaultValue'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MethodParameterApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['typeAsString'] = this.typeAsString;
        data['type'] = this.type;
        data['typeSimple'] = this.typeSimple;
        data['isOptional'] = this.isOptional;
        data['defaultValue'] = this.defaultValue;
        return data;
    }
}
class ParameterApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nameOnMethod = data['nameOnMethod'];
            this.name = data['name'];
            this.type = data['type'];
            this.typeSimple = data['typeSimple'];
            this.isOptional = data['isOptional'];
            this.defaultValue = data['defaultValue'];
            if (Array.isArray(data['constraintTypes'])) {
                this.constraintTypes = [];
                for (let item of data['constraintTypes'])
                    this.constraintTypes.push(item);
            }
            this.bindingSourceId = data['bindingSourceId'];
            this.descriptorName = data['descriptorName'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nameOnMethod'] = this.nameOnMethod;
        data['name'] = this.name;
        data['type'] = this.type;
        data['typeSimple'] = this.typeSimple;
        data['isOptional'] = this.isOptional;
        data['defaultValue'] = this.defaultValue;
        if (Array.isArray(this.constraintTypes)) {
            data['constraintTypes'] = [];
            for (let item of this.constraintTypes)
                data['constraintTypes'].push(item);
        }
        data['bindingSourceId'] = this.bindingSourceId;
        data['descriptorName'] = this.descriptorName;
        return data;
    }
}
class ReturnValueApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.type = data['type'];
            this.typeSimple = data['typeSimple'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReturnValueApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['type'] = this.type;
        data['typeSimple'] = this.typeSimple;
        return data;
    }
}
class ActionApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.uniqueName = data['uniqueName'];
            this.name = data['name'];
            this.httpMethod = data['httpMethod'];
            this.url = data['url'];
            if (Array.isArray(data['supportedVersions'])) {
                this.supportedVersions = [];
                for (let item of data['supportedVersions'])
                    this.supportedVersions.push(item);
            }
            if (Array.isArray(data['parametersOnMethod'])) {
                this.parametersOnMethod = [];
                for (let item of data['parametersOnMethod'])
                    this.parametersOnMethod.push(MethodParameterApiDescriptionModel.fromJS(item));
            }
            if (Array.isArray(data['parameters'])) {
                this.parameters = [];
                for (let item of data['parameters'])
                    this.parameters.push(ParameterApiDescriptionModel.fromJS(item));
            }
            this.returnValue = data['returnValue'] ? ReturnValueApiDescriptionModel.fromJS(data['returnValue']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ActionApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['uniqueName'] = this.uniqueName;
        data['name'] = this.name;
        data['httpMethod'] = this.httpMethod;
        data['url'] = this.url;
        if (Array.isArray(this.supportedVersions)) {
            data['supportedVersions'] = [];
            for (let item of this.supportedVersions)
                data['supportedVersions'].push(item);
        }
        if (Array.isArray(this.parametersOnMethod)) {
            data['parametersOnMethod'] = [];
            for (let item of this.parametersOnMethod)
                data['parametersOnMethod'].push(item.toJSON());
        }
        if (Array.isArray(this.parameters)) {
            data['parameters'] = [];
            for (let item of this.parameters)
                data['parameters'].push(item.toJSON());
        }
        data['returnValue'] = this.returnValue ? this.returnValue.toJSON() : undefined;
        return data;
    }
}
class ControllerApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.controllerName = data['controllerName'];
            this.type = data['type'];
            if (Array.isArray(data['interfaces'])) {
                this.interfaces = [];
                for (let item of data['interfaces'])
                    this.interfaces.push(ControllerInterfaceApiDescriptionModel.fromJS(item));
            }
            if (data['actions']) {
                this.actions = {};
                for (let key in data['actions']) {
                    if (data['actions'].hasOwnProperty(key))
                        this.actions[key] = data['actions'][key] ? ActionApiDescriptionModel.fromJS(data['actions'][key]) : new ActionApiDescriptionModel();
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ControllerApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['controllerName'] = this.controllerName;
        data['type'] = this.type;
        if (Array.isArray(this.interfaces)) {
            data['interfaces'] = [];
            for (let item of this.interfaces)
                data['interfaces'].push(item.toJSON());
        }
        if (this.actions) {
            data['actions'] = {};
            for (let key in this.actions) {
                if (this.actions.hasOwnProperty(key))
                    data['actions'][key] = this.actions[key] ? this.actions[key].toJSON() : undefined;
            }
        }
        return data;
    }
}
class ModuleApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.rootPath = data['rootPath'];
            this.remoteServiceName = data['remoteServiceName'];
            if (data['controllers']) {
                this.controllers = {};
                for (let key in data['controllers']) {
                    if (data['controllers'].hasOwnProperty(key))
                        this.controllers[key] = data['controllers'][key] ? ControllerApiDescriptionModel.fromJS(data['controllers'][key]) : new ControllerApiDescriptionModel();
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['rootPath'] = this.rootPath;
        data['remoteServiceName'] = this.remoteServiceName;
        if (this.controllers) {
            data['controllers'] = {};
            for (let key in this.controllers) {
                if (this.controllers.hasOwnProperty(key))
                    data['controllers'][key] = this.controllers[key] ? this.controllers[key].toJSON() : undefined;
            }
        }
        return data;
    }
}
class PropertyApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.type = data['type'];
            this.typeSimple = data['typeSimple'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PropertyApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['type'] = this.type;
        data['typeSimple'] = this.typeSimple;
        return data;
    }
}
class TypeApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.baseType = data['baseType'];
            this.isEnum = data['isEnum'];
            if (Array.isArray(data['enumNames'])) {
                this.enumNames = [];
                for (let item of data['enumNames'])
                    this.enumNames.push(item);
            }
            if (Array.isArray(data['enumValues'])) {
                this.enumValues = [];
                for (let item of data['enumValues'])
                    this.enumValues.push(item);
            }
            if (Array.isArray(data['genericArguments'])) {
                this.genericArguments = [];
                for (let item of data['genericArguments'])
                    this.genericArguments.push(item);
            }
            if (Array.isArray(data['properties'])) {
                this.properties = [];
                for (let item of data['properties'])
                    this.properties.push(PropertyApiDescriptionModel.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TypeApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['baseType'] = this.baseType;
        data['isEnum'] = this.isEnum;
        if (Array.isArray(this.enumNames)) {
            data['enumNames'] = [];
            for (let item of this.enumNames)
                data['enumNames'].push(item);
        }
        if (Array.isArray(this.enumValues)) {
            data['enumValues'] = [];
            for (let item of this.enumValues)
                data['enumValues'].push(item);
        }
        if (Array.isArray(this.genericArguments)) {
            data['genericArguments'] = [];
            for (let item of this.genericArguments)
                data['genericArguments'].push(item);
        }
        if (Array.isArray(this.properties)) {
            data['properties'] = [];
            for (let item of this.properties)
                data['properties'].push(item.toJSON());
        }
        return data;
    }
}
class ApplicationApiDescriptionModel {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (data['modules']) {
                this.modules = {};
                for (let key in data['modules']) {
                    if (data['modules'].hasOwnProperty(key))
                        this.modules[key] = data['modules'][key] ? ModuleApiDescriptionModel.fromJS(data['modules'][key]) : new ModuleApiDescriptionModel();
                }
            }
            if (data['types']) {
                this.types = {};
                for (let key in data['types']) {
                    if (data['types'].hasOwnProperty(key))
                        this.types[key] = data['types'][key] ? TypeApiDescriptionModel.fromJS(data['types'][key]) : new TypeApiDescriptionModel();
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationApiDescriptionModel();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.modules) {
            data['modules'] = {};
            for (let key in this.modules) {
                if (this.modules.hasOwnProperty(key))
                    data['modules'][key] = this.modules[key] ? this.modules[key].toJSON() : undefined;
            }
        }
        if (this.types) {
            data['types'] = {};
            for (let key in this.types) {
                if (this.types.hasOwnProperty(key))
                    data['types'][key] = this.types[key] ? this.types[key].toJSON() : undefined;
            }
        }
        return data;
    }
}
class RemoteServiceValidationErrorInfo {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.message = data['message'];
            if (Array.isArray(data['members'])) {
                this.members = [];
                for (let item of data['members'])
                    this.members.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RemoteServiceValidationErrorInfo();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['message'] = this.message;
        if (Array.isArray(this.members)) {
            data['members'] = [];
            for (let item of this.members)
                data['members'].push(item);
        }
        return data;
    }
}
class RemoteServiceErrorInfo {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.code = data['code'];
            this.message = data['message'];
            this.details = data['details'];
            if (data['data']) {
                this.data = {};
                for (let key in data['data']) {
                    if (data['data'].hasOwnProperty(key))
                        this.data[key] = data['data'][key];
                }
            }
            if (Array.isArray(data['validationErrors'])) {
                this.validationErrors = [];
                for (let item of data['validationErrors'])
                    this.validationErrors.push(RemoteServiceValidationErrorInfo.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RemoteServiceErrorInfo();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['code'] = this.code;
        data['message'] = this.message;
        data['details'] = this.details;
        if (this.data) {
            data['data'] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    data['data'][key] = this.data[key];
            }
        }
        if (Array.isArray(this.validationErrors)) {
            data['validationErrors'] = [];
            for (let item of this.validationErrors)
                data['validationErrors'].push(item.toJSON());
        }
        return data;
    }
}
class RemoteServiceErrorResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.error = data['error'] ? RemoteServiceErrorInfo.fromJS(data['error']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RemoteServiceErrorResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['error'] = this.error ? this.error.toJSON() : undefined;
        return data;
    }
}
class LanguageInfo {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.cultureName = data['cultureName'];
            this.uiCultureName = data['uiCultureName'];
            this.displayName = data['displayName'];
            this.flagIcon = data['flagIcon'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageInfo();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['cultureName'] = this.cultureName;
        data['uiCultureName'] = this.uiCultureName;
        data['displayName'] = this.displayName;
        data['flagIcon'] = this.flagIcon;
        return data;
    }
}
class DateTimeFormatDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.calendarAlgorithmType = data['calendarAlgorithmType'];
            this.dateTimeFormatLong = data['dateTimeFormatLong'];
            this.shortDatePattern = data['shortDatePattern'];
            this.fullDateTimePattern = data['fullDateTimePattern'];
            this.dateSeparator = data['dateSeparator'];
            this.shortTimePattern = data['shortTimePattern'];
            this.longTimePattern = data['longTimePattern'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimeFormatDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['calendarAlgorithmType'] = this.calendarAlgorithmType;
        data['dateTimeFormatLong'] = this.dateTimeFormatLong;
        data['shortDatePattern'] = this.shortDatePattern;
        data['fullDateTimePattern'] = this.fullDateTimePattern;
        data['dateSeparator'] = this.dateSeparator;
        data['shortTimePattern'] = this.shortTimePattern;
        data['longTimePattern'] = this.longTimePattern;
        return data;
    }
}
class CurrentCultureDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.displayName = data['displayName'];
            this.englishName = data['englishName'];
            this.threeLetterIsoLanguageName = data['threeLetterIsoLanguageName'];
            this.twoLetterIsoLanguageName = data['twoLetterIsoLanguageName'];
            this.isRightToLeft = data['isRightToLeft'];
            this.cultureName = data['cultureName'];
            this.name = data['name'];
            this.nativeName = data['nativeName'];
            this.dateTimeFormat = data['dateTimeFormat'] ? DateTimeFormatDto.fromJS(data['dateTimeFormat']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentCultureDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['displayName'] = this.displayName;
        data['englishName'] = this.englishName;
        data['threeLetterIsoLanguageName'] = this.threeLetterIsoLanguageName;
        data['twoLetterIsoLanguageName'] = this.twoLetterIsoLanguageName;
        data['isRightToLeft'] = this.isRightToLeft;
        data['cultureName'] = this.cultureName;
        data['name'] = this.name;
        data['nativeName'] = this.nativeName;
        data['dateTimeFormat'] = this.dateTimeFormat ? this.dateTimeFormat.toJSON() : undefined;
        return data;
    }
}
class NameValue {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.value = data['value'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NameValue();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['value'] = this.value;
        return data;
    }
}
class ApplicationLocalizationConfigurationDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (data['values']) {
                this.values = {};
                for (let key in data['values']) {
                    if (data['values'].hasOwnProperty(key))
                        this.values[key] = data['values'][key] !== undefined ? data['values'][key] : {};
                }
            }
            if (Array.isArray(data['languages'])) {
                this.languages = [];
                for (let item of data['languages'])
                    this.languages.push(LanguageInfo.fromJS(item));
            }
            this.currentCulture = data['currentCulture'] ? CurrentCultureDto.fromJS(data['currentCulture']) : undefined;
            this.defaultResourceName = data['defaultResourceName'];
            if (data['languagesMap']) {
                this.languagesMap = {};
                for (let key in data['languagesMap']) {
                    if (data['languagesMap'].hasOwnProperty(key))
                        this.languagesMap[key] = data['languagesMap'][key] ? data['languagesMap'][key].map((i) => NameValue.fromJS(i)) : [];
                }
            }
            if (data['languageFilesMap']) {
                this.languageFilesMap = {};
                for (let key in data['languageFilesMap']) {
                    if (data['languageFilesMap'].hasOwnProperty(key))
                        this.languageFilesMap[key] = data['languageFilesMap'][key] ? data['languageFilesMap'][key].map((i) => NameValue.fromJS(i)) : [];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationLocalizationConfigurationDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.values) {
            data['values'] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    data['values'][key] = this.values[key];
            }
        }
        if (Array.isArray(this.languages)) {
            data['languages'] = [];
            for (let item of this.languages)
                data['languages'].push(item.toJSON());
        }
        data['currentCulture'] = this.currentCulture ? this.currentCulture.toJSON() : undefined;
        data['defaultResourceName'] = this.defaultResourceName;
        if (this.languagesMap) {
            data['languagesMap'] = {};
            for (let key in this.languagesMap) {
                if (this.languagesMap.hasOwnProperty(key))
                    data['languagesMap'][key] = this.languagesMap[key];
            }
        }
        if (this.languageFilesMap) {
            data['languageFilesMap'] = {};
            for (let key in this.languageFilesMap) {
                if (this.languageFilesMap.hasOwnProperty(key))
                    data['languageFilesMap'][key] = this.languageFilesMap[key];
            }
        }
        return data;
    }
}
class ApplicationAuthConfigurationDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (data['policies']) {
                this.policies = {};
                for (let key in data['policies']) {
                    if (data['policies'].hasOwnProperty(key))
                        this.policies[key] = data['policies'][key];
                }
            }
            if (data['grantedPolicies']) {
                this.grantedPolicies = {};
                for (let key in data['grantedPolicies']) {
                    if (data['grantedPolicies'].hasOwnProperty(key))
                        this.grantedPolicies[key] = data['grantedPolicies'][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationAuthConfigurationDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.policies) {
            data['policies'] = {};
            for (let key in this.policies) {
                if (this.policies.hasOwnProperty(key))
                    data['policies'][key] = this.policies[key];
            }
        }
        if (this.grantedPolicies) {
            data['grantedPolicies'] = {};
            for (let key in this.grantedPolicies) {
                if (this.grantedPolicies.hasOwnProperty(key))
                    data['grantedPolicies'][key] = this.grantedPolicies[key];
            }
        }
        return data;
    }
}
class ApplicationSettingConfigurationDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (data['values']) {
                this.values = {};
                for (let key in data['values']) {
                    if (data['values'].hasOwnProperty(key))
                        this.values[key] = data['values'][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationSettingConfigurationDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.values) {
            data['values'] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    data['values'][key] = this.values[key];
            }
        }
        return data;
    }
}
class CurrentUserDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isAuthenticated = data['isAuthenticated'];
            this.id = data['id'];
            this.tenantId = data['tenantId'];
            this.userName = data['userName'];
            this.name = data['name'];
            this.surName = data['surName'];
            this.email = data['email'];
            this.emailVerified = data['emailVerified'];
            this.phoneNumber = data['phoneNumber'];
            this.phoneNumberVerified = data['phoneNumberVerified'];
            if (Array.isArray(data['roles'])) {
                this.roles = [];
                for (let item of data['roles'])
                    this.roles.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentUserDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isAuthenticated'] = this.isAuthenticated;
        data['id'] = this.id;
        data['tenantId'] = this.tenantId;
        data['userName'] = this.userName;
        data['name'] = this.name;
        data['surName'] = this.surName;
        data['email'] = this.email;
        data['emailVerified'] = this.emailVerified;
        data['phoneNumber'] = this.phoneNumber;
        data['phoneNumberVerified'] = this.phoneNumberVerified;
        if (Array.isArray(this.roles)) {
            data['roles'] = [];
            for (let item of this.roles)
                data['roles'].push(item);
        }
        return data;
    }
}
class ApplicationFeatureConfigurationDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (data['values']) {
                this.values = {};
                for (let key in data['values']) {
                    if (data['values'].hasOwnProperty(key))
                        this.values[key] = data['values'][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationFeatureConfigurationDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.values) {
            data['values'] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    data['values'][key] = this.values[key];
            }
        }
        return data;
    }
}
class MultiTenancyInfoDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isEnabled = data['isEnabled'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MultiTenancyInfoDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isEnabled'] = this.isEnabled;
        return data;
    }
}
class CurrentTenantDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.name = data['name'];
            this.isAvailable = data['isAvailable'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentTenantDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['name'] = this.name;
        data['isAvailable'] = this.isAvailable;
        return data;
    }
}
class IanaTimeZone {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.timeZoneName = data['timeZoneName'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new IanaTimeZone();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['timeZoneName'] = this.timeZoneName;
        return data;
    }
}
class WindowsTimeZone {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.timeZoneId = data['timeZoneId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new WindowsTimeZone();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['timeZoneId'] = this.timeZoneId;
        return data;
    }
}
class TimeZone {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.iana = data['iana'] ? IanaTimeZone.fromJS(data['iana']) : undefined;
            this.windows = data['windows'] ? WindowsTimeZone.fromJS(data['windows']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TimeZone();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['iana'] = this.iana ? this.iana.toJSON() : undefined;
        data['windows'] = this.windows ? this.windows.toJSON() : undefined;
        return data;
    }
}
class TimingDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.timeZone = data['timeZone'] ? TimeZone.fromJS(data['timeZone']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TimingDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['timeZone'] = this.timeZone ? this.timeZone.toJSON() : undefined;
        return data;
    }
}
class ClockDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.kind = data['kind'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ClockDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['kind'] = this.kind;
        return data;
    }
}
class LocalizableStringDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.resource = data['resource'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizableStringDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['resource'] = this.resource;
        return data;
    }
}
class ExtensionPropertyApiGetDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isAvailable = data['isAvailable'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyApiGetDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isAvailable'] = this.isAvailable;
        return data;
    }
}
class ExtensionPropertyApiCreateDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isAvailable = data['isAvailable'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyApiCreateDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isAvailable'] = this.isAvailable;
        return data;
    }
}
class ExtensionPropertyApiUpdateDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isAvailable = data['isAvailable'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyApiUpdateDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isAvailable'] = this.isAvailable;
        return data;
    }
}
class ExtensionPropertyApiDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.onGet = data['onGet'] ? ExtensionPropertyApiGetDto.fromJS(data['onGet']) : undefined;
            this.onCreate = data['onCreate'] ? ExtensionPropertyApiCreateDto.fromJS(data['onCreate']) : undefined;
            this.onUpdate = data['onUpdate'] ? ExtensionPropertyApiUpdateDto.fromJS(data['onUpdate']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyApiDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['onGet'] = this.onGet ? this.onGet.toJSON() : undefined;
        data['onCreate'] = this.onCreate ? this.onCreate.toJSON() : undefined;
        data['onUpdate'] = this.onUpdate ? this.onUpdate.toJSON() : undefined;
        return data;
    }
}
class ExtensionPropertyUiTableDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isVisible = data['isVisible'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyUiTableDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isVisible'] = this.isVisible;
        return data;
    }
}
class ExtensionPropertyUiFormDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isVisible = data['isVisible'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyUiFormDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isVisible'] = this.isVisible;
        return data;
    }
}
class ExtensionPropertyUiDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.onTable = data['onTable'] ? ExtensionPropertyUiTableDto.fromJS(data['onTable']) : undefined;
            this.onCreateForm = data['onCreateForm'] ? ExtensionPropertyUiFormDto.fromJS(data['onCreateForm']) : undefined;
            this.onEditForm = data['onEditForm'] ? ExtensionPropertyUiFormDto.fromJS(data['onEditForm']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyUiDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['onTable'] = this.onTable ? this.onTable.toJSON() : undefined;
        data['onCreateForm'] = this.onCreateForm ? this.onCreateForm.toJSON() : undefined;
        data['onEditForm'] = this.onEditForm ? this.onEditForm.toJSON() : undefined;
        return data;
    }
}
class ExtensionPropertyAttributeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.typeSimple = data['typeSimple'];
            if (data['config']) {
                this.config = {};
                for (let key in data['config']) {
                    if (data['config'].hasOwnProperty(key))
                        this.config[key] = data['config'][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyAttributeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['typeSimple'] = this.typeSimple;
        if (this.config) {
            data['config'] = {};
            for (let key in this.config) {
                if (this.config.hasOwnProperty(key))
                    data['config'][key] = this.config[key];
            }
        }
        return data;
    }
}
class ExtensionPropertyDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.type = data['type'];
            this.typeSimple = data['typeSimple'];
            this.displayName = data['displayName'] ? LocalizableStringDto.fromJS(data['displayName']) : undefined;
            this.api = data['api'] ? ExtensionPropertyApiDto.fromJS(data['api']) : undefined;
            this.ui = data['ui'] ? ExtensionPropertyUiDto.fromJS(data['ui']) : undefined;
            if (Array.isArray(data['attributes'])) {
                this.attributes = [];
                for (let item of data['attributes'])
                    this.attributes.push(ExtensionPropertyAttributeDto.fromJS(item));
            }
            if (data['configuration']) {
                this.configuration = {};
                for (let key in data['configuration']) {
                    if (data['configuration'].hasOwnProperty(key))
                        this.configuration[key] = data['configuration'][key];
                }
            }
            this.defaultValue = data['defaultValue'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionPropertyDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['type'] = this.type;
        data['typeSimple'] = this.typeSimple;
        data['displayName'] = this.displayName ? this.displayName.toJSON() : undefined;
        data['api'] = this.api ? this.api.toJSON() : undefined;
        data['ui'] = this.ui ? this.ui.toJSON() : undefined;
        if (Array.isArray(this.attributes)) {
            data['attributes'] = [];
            for (let item of this.attributes)
                data['attributes'].push(item.toJSON());
        }
        if (this.configuration) {
            data['configuration'] = {};
            for (let key in this.configuration) {
                if (this.configuration.hasOwnProperty(key))
                    data['configuration'][key] = this.configuration[key];
            }
        }
        data['defaultValue'] = this.defaultValue;
        return data;
    }
}
class EntityExtensionDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (data['properties']) {
                this.properties = {};
                for (let key in data['properties']) {
                    if (data['properties'].hasOwnProperty(key))
                        this.properties[key] = data['properties'][key] ? ExtensionPropertyDto.fromJS(data['properties'][key]) : new ExtensionPropertyDto();
                }
            }
            if (data['configuration']) {
                this.configuration = {};
                for (let key in data['configuration']) {
                    if (data['configuration'].hasOwnProperty(key))
                        this.configuration[key] = data['configuration'][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new EntityExtensionDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.properties) {
            data['properties'] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data['properties'][key] = this.properties[key] ? this.properties[key].toJSON() : undefined;
            }
        }
        if (this.configuration) {
            data['configuration'] = {};
            for (let key in this.configuration) {
                if (this.configuration.hasOwnProperty(key))
                    data['configuration'][key] = this.configuration[key];
            }
        }
        return data;
    }
}
class ModuleExtensionDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (data['entities']) {
                this.entities = {};
                for (let key in data['entities']) {
                    if (data['entities'].hasOwnProperty(key))
                        this.entities[key] = data['entities'][key] ? EntityExtensionDto.fromJS(data['entities'][key]) : new EntityExtensionDto();
                }
            }
            if (data['configuration']) {
                this.configuration = {};
                for (let key in data['configuration']) {
                    if (data['configuration'].hasOwnProperty(key))
                        this.configuration[key] = data['configuration'][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleExtensionDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.entities) {
            data['entities'] = {};
            for (let key in this.entities) {
                if (this.entities.hasOwnProperty(key))
                    data['entities'][key] = this.entities[key] ? this.entities[key].toJSON() : undefined;
            }
        }
        if (this.configuration) {
            data['configuration'] = {};
            for (let key in this.configuration) {
                if (this.configuration.hasOwnProperty(key))
                    data['configuration'][key] = this.configuration[key];
            }
        }
        return data;
    }
}
class ExtensionEnumFieldDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.value = data['value'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionEnumFieldDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['value'] = this.value;
        return data;
    }
}
class ExtensionEnumDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (Array.isArray(data['fields'])) {
                this.fields = [];
                for (let item of data['fields'])
                    this.fields.push(ExtensionEnumFieldDto.fromJS(item));
            }
            this.localizationResource = data['localizationResource'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ExtensionEnumDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fields)) {
            data['fields'] = [];
            for (let item of this.fields)
                data['fields'].push(item.toJSON());
        }
        data['localizationResource'] = this.localizationResource;
        return data;
    }
}
class ObjectExtensionsDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (data['modules']) {
                this.modules = {};
                for (let key in data['modules']) {
                    if (data['modules'].hasOwnProperty(key))
                        this.modules[key] = data['modules'][key] ? ModuleExtensionDto.fromJS(data['modules'][key]) : new ModuleExtensionDto();
                }
            }
            if (data['enums']) {
                this.enums = {};
                for (let key in data['enums']) {
                    if (data['enums'].hasOwnProperty(key))
                        this.enums[key] = data['enums'][key] ? ExtensionEnumDto.fromJS(data['enums'][key]) : new ExtensionEnumDto();
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectExtensionsDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (this.modules) {
            data['modules'] = {};
            for (let key in this.modules) {
                if (this.modules.hasOwnProperty(key))
                    data['modules'][key] = this.modules[key] ? this.modules[key].toJSON() : undefined;
            }
        }
        if (this.enums) {
            data['enums'] = {};
            for (let key in this.enums) {
                if (this.enums.hasOwnProperty(key))
                    data['enums'][key] = this.enums[key] ? this.enums[key].toJSON() : undefined;
            }
        }
        return data;
    }
}
class ApplicationConfigurationDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.localization = data['localization'] ? ApplicationLocalizationConfigurationDto.fromJS(data['localization']) : undefined;
            this.auth = data['auth'] ? ApplicationAuthConfigurationDto.fromJS(data['auth']) : undefined;
            this.setting = data['setting'] ? ApplicationSettingConfigurationDto.fromJS(data['setting']) : undefined;
            this.currentUser = data['currentUser'] ? CurrentUserDto.fromJS(data['currentUser']) : undefined;
            this.features = data['features'] ? ApplicationFeatureConfigurationDto.fromJS(data['features']) : undefined;
            this.multiTenancy = data['multiTenancy'] ? MultiTenancyInfoDto.fromJS(data['multiTenancy']) : undefined;
            this.currentTenant = data['currentTenant'] ? CurrentTenantDto.fromJS(data['currentTenant']) : undefined;
            this.timing = data['timing'] ? TimingDto.fromJS(data['timing']) : undefined;
            this.clock = data['clock'] ? ClockDto.fromJS(data['clock']) : undefined;
            this.objectExtensions = data['objectExtensions'] ? ObjectExtensionsDto.fromJS(data['objectExtensions']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationConfigurationDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['localization'] = this.localization ? this.localization.toJSON() : undefined;
        data['auth'] = this.auth ? this.auth.toJSON() : undefined;
        data['setting'] = this.setting ? this.setting.toJSON() : undefined;
        data['currentUser'] = this.currentUser ? this.currentUser.toJSON() : undefined;
        data['features'] = this.features ? this.features.toJSON() : undefined;
        data['multiTenancy'] = this.multiTenancy ? this.multiTenancy.toJSON() : undefined;
        data['currentTenant'] = this.currentTenant ? this.currentTenant.toJSON() : undefined;
        data['timing'] = this.timing ? this.timing.toJSON() : undefined;
        data['clock'] = this.clock ? this.clock.toJSON() : undefined;
        data['objectExtensions'] = this.objectExtensions ? this.objectExtensions.toJSON() : undefined;
        return data;
    }
}
class FindTenantResultDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.success = data['success'];
            this.tenantId = data['tenantId'];
            this.name = data['name'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FindTenantResultDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['success'] = this.success;
        data['tenantId'] = this.tenantId;
        data['name'] = this.name;
        return data;
    }
}
var ExportModel;
(function (ExportModel) {
    ExportModel[ExportModel["Default"] = 0] = "Default";
    ExportModel[ExportModel["TrangHienTai"] = 1] = "TrangHienTai";
    ExportModel[ExportModel["ToanBo"] = 2] = "ToanBo";
})(ExportModel || (ExportModel = {}));
var OutputFileExtension;
(function (OutputFileExtension) {
    OutputFileExtension[OutputFileExtension["Excel"] = 1] = "Excel";
    OutputFileExtension[OutputFileExtension["Pdf"] = 2] = "Pdf";
    OutputFileExtension[OutputFileExtension["Word"] = 3] = "Word";
    OutputFileExtension[OutputFileExtension["Excel2003"] = 4] = "Excel2003";
    OutputFileExtension[OutputFileExtension["PdfAllSheet"] = 5] = "PdfAllSheet";
})(OutputFileExtension || (OutputFileExtension = {}));
class BenhVienPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiBenhVien = data['loaiBenhVien'];
            this.tuyenBenhVien = data['tuyenBenhVien'];
            this.hangBenhVien = data['hangBenhVien'];
            this.tinhId = data['tinhId'];
            this.huyenId = data['huyenId'];
            this.xaId = data['xaId'];
            this.benhVienChaId = data['benhVienChaId'];
            this.coQuanChuQuanId = data['coQuanChuQuanId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BenhVienPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiBenhVien'] = this.loaiBenhVien;
        data['tuyenBenhVien'] = this.tuyenBenhVien;
        data['hangBenhVien'] = this.hangBenhVien;
        data['tinhId'] = this.tinhId;
        data['huyenId'] = this.huyenId;
        data['xaId'] = this.xaId;
        data['benhVienChaId'] = this.benhVienChaId;
        data['coQuanChuQuanId'] = this.coQuanChuQuanId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class BenhVienDtoMinify {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.diaChi = data['diaChi'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BenhVienDtoMinify();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['diaChi'] = this.diaChi;
        data['id'] = this.id;
        return data;
    }
}
class BenhVienDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.loaiBenhVien = data['loaiBenhVien'];
            this.tinhId = data['tinhId'];
            this.huyenId = data['huyenId'];
            this.xaId = data['xaId'];
            this.diaChi = data['diaChi'];
            this.benhVienChaId = data['benhVienChaId'];
            this.tuyenBenhVien = data['tuyenBenhVien'];
            this.hangBenhVien = data['hangBenhVien'];
            this.soDienThoai = data['soDienThoai'];
            this.email = data['email'];
            this.fax = data['fax'];
            this.coQuanChuQuanId = data['coQuanChuQuanId'];
            this.isActive = data['isActive'];
            this.tenTinh = data['tenTinh'];
            this.tenHuyen = data['tenHuyen'];
            this.tenXa = data['tenXa'];
            this.benhVienChaDto = data['benhVienChaDto'] ? BenhVienDtoMinify.fromJS(data['benhVienChaDto']) : undefined;
            this.coQuanChuQuanDto = data['coQuanChuQuanDto'] ? BenhVienDtoMinify.fromJS(data['coQuanChuQuanDto']) : undefined;
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BenhVienDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['loaiBenhVien'] = this.loaiBenhVien;
        data['tinhId'] = this.tinhId;
        data['huyenId'] = this.huyenId;
        data['xaId'] = this.xaId;
        data['diaChi'] = this.diaChi;
        data['benhVienChaId'] = this.benhVienChaId;
        data['tuyenBenhVien'] = this.tuyenBenhVien;
        data['hangBenhVien'] = this.hangBenhVien;
        data['soDienThoai'] = this.soDienThoai;
        data['email'] = this.email;
        data['fax'] = this.fax;
        data['coQuanChuQuanId'] = this.coQuanChuQuanId;
        data['isActive'] = this.isActive;
        data['tenTinh'] = this.tenTinh;
        data['tenHuyen'] = this.tenHuyen;
        data['tenXa'] = this.tenXa;
        data['benhVienChaDto'] = this.benhVienChaDto ? this.benhVienChaDto.toJSON() : undefined;
        data['coQuanChuQuanDto'] = this.coQuanChuQuanDto ? this.coQuanChuQuanDto.toJSON() : undefined;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfBenhVienDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(BenhVienDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfBenhVienDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class CoSoYTeAutoDataSourceRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CoSoYTeAutoDataSourceRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class CoSoYTeAutoDataSourceDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.diaChi = data['diaChi'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CoSoYTeAutoDataSourceDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['diaChi'] = this.diaChi;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfCoSoYTeAutoDataSourceDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(CoSoYTeAutoDataSourceDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCoSoYTeAutoDataSourceDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class CoSoYTeDaCoDaiLyAutoDataSourceRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CoSoYTeDaCoDaiLyAutoDataSourceRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class ComboBoxDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.isActive = true;
        }
    }
    init(data) {
        if (data) {
            this.value = data['value'];
            this.displayText = data['displayText'];
            this.data = data['data'];
            this.isActive = data['isActive'] !== undefined ? data['isActive'] : true;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ComboBoxDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['value'] = this.value;
        data['displayText'] = this.displayText;
        data['data'] = this.data;
        data['isActive'] = this.isActive;
        return data;
    }
}
class DichVuSoKhamOutputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.dichVuId = data['dichVuId'];
            this.tenDichVu = data['tenDichVu'];
            this.maDichVu = data['maDichVu'];
            this.isChecked = data['isChecked'];
            this.soKhamId = data['soKhamId'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DichVuSoKhamOutputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['dichVuId'] = this.dichVuId;
        data['tenDichVu'] = this.tenDichVu;
        data['maDichVu'] = this.maDichVu;
        data['isChecked'] = this.isChecked;
        data['soKhamId'] = this.soKhamId;
        data['id'] = this.id;
        return data;
    }
}
class PagedRequestDichVuSoKhamDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nhomDichVuId = data['nhomDichVuId'];
            this.soKhamId = data['soKhamId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedRequestDichVuSoKhamDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nhomDichVuId'] = this.nhomDichVuId;
        data['soKhamId'] = this.soKhamId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfDichVuSoKhamOutputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DichVuSoKhamOutputDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDichVuSoKhamOutputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class DichVuSoKhamDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.dichVuId = data['dichVuId'];
            this.soKhamBenhId = data['soKhamBenhId'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DichVuSoKhamDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['dichVuId'] = this.dichVuId;
        data['soKhamBenhId'] = this.soKhamBenhId;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class KhoDoiTuongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.khoId = data['khoId'];
            if (Array.isArray(data['listDoiTuongId'])) {
                this.listDoiTuongId = [];
                for (let item of data['listDoiTuongId'])
                    this.listDoiTuongId.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KhoDoiTuongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['khoId'] = this.khoId;
        if (Array.isArray(this.listDoiTuongId)) {
            data['listDoiTuongId'] = [];
            for (let item of this.listDoiTuongId)
                data['listDoiTuongId'].push(item);
        }
        return data;
    }
}
class DichVuPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isExportDefault = data['isExportDefault'];
            this.lv = data['lv'];
            this.type = data['type'];
            this.loaiNhomId = data['loaiNhomId'];
            this.isDichVuDungChung = data['isDichVuDungChung'];
            this.hieuLucTuNgay = data['hieuLucTuNgay'];
            this.hieuLucToiNgay = data['hieuLucToiNgay'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DichVuPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isExportDefault'] = this.isExportDefault;
        data['lv'] = this.lv;
        data['type'] = this.type;
        data['loaiNhomId'] = this.loaiNhomId;
        data['isDichVuDungChung'] = this.isDichVuDungChung;
        data['hieuLucTuNgay'] = this.hieuLucTuNgay;
        data['hieuLucToiNgay'] = this.hieuLucToiNgay;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class DichVuDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.stt = data['stt'];
            this.nhomDichVuId = data['nhomDichVuId'];
            this.loaiDichVuId = data['loaiDichVuId'];
            this.dichVuDonGiaId = data['dichVuDonGiaId'];
            this.ma = data['ma'];
            this.maDvkt = data['maDvkt'];
            this.ten = data['ten'];
            this.tenDvkt = data['tenDvkt'];
            this.tenEn = data['tenEn'];
            this.tenKhongDau = data['tenKhongDau'];
            this.cap = data['cap'];
            this.parentId = data['parentId'];
            this.donViTinh = data['donViTinh'];
            this.sttDmByt = data['sttDmByt'];
            this.sttPheDuyet = data['sttPheDuyet'];
            this.maTT37 = data['maTT37'];
            this.maDmdc = data['maDmdc'];
            this.dmdcDichVuId = data['dmdcDichVuId'];
            this.tyLeThanhToanBHYT = data['tyLeThanhToanBHYT'];
            this.goi = data['goi'];
            this.coGiaDichVu = data['coGiaDichVu'];
            this.coGiaTriChuan = data['coGiaTriChuan'];
            this.tenNhomDichVu = data['tenNhomDichVu'];
            this.tenLoaiDichVu = data['tenLoaiDichVu'];
            this.benhVienId = data['benhVienId'];
            this.counter = data['counter'];
            this.donGiaBHYT = data['donGiaBHYT'];
            this.donGiaQuanNhan = data['donGiaQuanNhan'];
            this.maGia = data['maGia'];
            this.donGiaBenhVien = data['donGiaBenhVien'];
            this.quyetDinh = data['quyetDinh'];
            this.congBo = data['congBo'];
            this.maCoSoKCB = data['maCoSoKCB'];
            this.isActive = data['isActive'];
            this.tamNgung = data['tamNgung'];
            this.isExists = data['isExists'];
            this.isDeleted = data['isDeleted'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DichVuDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['stt'] = this.stt;
        data['nhomDichVuId'] = this.nhomDichVuId;
        data['loaiDichVuId'] = this.loaiDichVuId;
        data['dichVuDonGiaId'] = this.dichVuDonGiaId;
        data['ma'] = this.ma;
        data['maDvkt'] = this.maDvkt;
        data['ten'] = this.ten;
        data['tenDvkt'] = this.tenDvkt;
        data['tenEn'] = this.tenEn;
        data['tenKhongDau'] = this.tenKhongDau;
        data['cap'] = this.cap;
        data['parentId'] = this.parentId;
        data['donViTinh'] = this.donViTinh;
        data['sttDmByt'] = this.sttDmByt;
        data['sttPheDuyet'] = this.sttPheDuyet;
        data['maTT37'] = this.maTT37;
        data['maDmdc'] = this.maDmdc;
        data['dmdcDichVuId'] = this.dmdcDichVuId;
        data['tyLeThanhToanBHYT'] = this.tyLeThanhToanBHYT;
        data['goi'] = this.goi;
        data['coGiaDichVu'] = this.coGiaDichVu;
        data['coGiaTriChuan'] = this.coGiaTriChuan;
        data['tenNhomDichVu'] = this.tenNhomDichVu;
        data['tenLoaiDichVu'] = this.tenLoaiDichVu;
        data['benhVienId'] = this.benhVienId;
        data['counter'] = this.counter;
        data['donGiaBHYT'] = this.donGiaBHYT;
        data['donGiaQuanNhan'] = this.donGiaQuanNhan;
        data['maGia'] = this.maGia;
        data['donGiaBenhVien'] = this.donGiaBenhVien;
        data['quyetDinh'] = this.quyetDinh;
        data['congBo'] = this.congBo;
        data['maCoSoKCB'] = this.maCoSoKCB;
        data['isActive'] = this.isActive;
        data['tamNgung'] = this.tamNgung;
        data['isExists'] = this.isExists;
        data['isDeleted'] = this.isDeleted;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfDichVuDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DichVuDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDichVuDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class DichVuDonGiaRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.benhVienId = data['benhVienId'];
            this.donGiaBHYT = data['donGiaBHYT'];
            this.donGiaQuanNhan = data['donGiaQuanNhan'];
            this.donGiaBenhVien = data['donGiaBenhVien'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DichVuDonGiaRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['benhVienId'] = this.benhVienId;
        data['donGiaBHYT'] = this.donGiaBHYT;
        data['donGiaQuanNhan'] = this.donGiaQuanNhan;
        data['donGiaBenhVien'] = this.donGiaBenhVien;
        return data;
    }
}
class ListDichVuDonGiaRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (Array.isArray(data['input'])) {
                this.input = [];
                for (let item of data['input'])
                    this.input.push(DichVuDonGiaRequestDto.fromJS(item));
            }
            this.isExportDefault = data['isExportDefault'];
            this.lv = data['lv'];
            this.type = data['type'];
            this.loaiNhomId = data['loaiNhomId'];
            this.isDichVuDungChung = data['isDichVuDungChung'];
            this.hieuLucTuNgay = data['hieuLucTuNgay'];
            this.hieuLucToiNgay = data['hieuLucToiNgay'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ListDichVuDonGiaRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.input)) {
            data['input'] = [];
            for (let item of this.input)
                data['input'].push(item.toJSON());
        }
        data['isExportDefault'] = this.isExportDefault;
        data['lv'] = this.lv;
        data['type'] = this.type;
        data['loaiNhomId'] = this.loaiNhomId;
        data['isDichVuDungChung'] = this.isDichVuDungChung;
        data['hieuLucTuNgay'] = this.hieuLucTuNgay;
        data['hieuLucToiNgay'] = this.hieuLucToiNgay;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class ItemExistsPagedResultDtoOfDichVuDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isExists = data['isExists'];
            this.isSuccess = data['isSuccess'];
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DichVuDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ItemExistsPagedResultDtoOfDichVuDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isExists'] = this.isExists;
        data['isSuccess'] = this.isSuccess;
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class UpdateEffectiveDateRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.hieuLucTuNgay = data['hieuLucTuNgay'];
            this.hieuLucToiNgay = data['hieuLucToiNgay'];
            this.hieuLucTuNgayOld = data['hieuLucTuNgayOld'];
            this.hieuLucToiNgayOld = data['hieuLucToiNgayOld'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEffectiveDateRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['hieuLucTuNgay'] = this.hieuLucTuNgay;
        data['hieuLucToiNgay'] = this.hieuLucToiNgay;
        data['hieuLucTuNgayOld'] = this.hieuLucTuNgayOld;
        data['hieuLucToiNgayOld'] = this.hieuLucToiNgayOld;
        return data;
    }
}
class DichVuRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ten = data['ten'];
            this.ma = data['ma'];
            this.donGiaBenhVien = data['donGiaBenhVien'];
            this.donGiaBHYT = data['donGiaBHYT'];
            this.donGiaQuanNhan = data['donGiaQuanNhan'];
            this.phuThu = data['phuThu'];
            this.trangThai = data['trangThai'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DichVuRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ten'] = this.ten;
        data['ma'] = this.ma;
        data['donGiaBenhVien'] = this.donGiaBenhVien;
        data['donGiaBHYT'] = this.donGiaBHYT;
        data['donGiaQuanNhan'] = this.donGiaQuanNhan;
        data['phuThu'] = this.phuThu;
        data['trangThai'] = this.trangThai;
        data['id'] = this.id;
        return data;
    }
}
class ImportDichVuRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DichVuRequestDto.fromJS(item));
            }
            this.loaiDichVuId = data['loaiDichVuId'];
            this.nhomDichVuId = data['nhomDichVuId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ImportDichVuRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        data['loaiDichVuId'] = this.loaiDichVuId;
        data['nhomDichVuId'] = this.nhomDichVuId;
        return data;
    }
}
class ImportDichVuResultDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ImportDichVuResultDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        return data;
    }
}
class FileDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.fileName = data['fileName'];
            this.fileType = data['fileType'];
            this.fileToken = data['fileToken'];
            this.fileBytes = data['fileBytes'];
            this.fileBase64 = data['fileBase64'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FileDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['fileName'] = this.fileName;
        data['fileType'] = this.fileType;
        data['fileToken'] = this.fileToken;
        data['fileBytes'] = this.fileBytes;
        data['fileBase64'] = this.fileBase64;
        return data;
    }
}
class CauHinhHeThongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiTaiKhoan = data['loaiTaiKhoan'];
            this.strLoaiTaiKhoan = data['strLoaiTaiKhoan'];
            this.settingId = data['settingId'];
            this.url = data['url'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CauHinhHeThongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiTaiKhoan'] = this.loaiTaiKhoan;
        data['strLoaiTaiKhoan'] = this.strLoaiTaiKhoan;
        data['settingId'] = this.settingId;
        data['url'] = this.url;
        data['id'] = this.id;
        return data;
    }
}
class PagedFullRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedFullRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfCauHinhHeThongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(CauHinhHeThongDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCauHinhHeThongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class PhongBanDichVuOutputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.dichVuId = data['dichVuId'];
            this.phongBanId = data['phongBanId'];
            this.benhVienId = data['benhVienId'];
            this.tenDichVu = data['tenDichVu'];
            this.maDichVu = data['maDichVu'];
            this.isChecked = data['isChecked'];
            this.pbdvId = data['pbdvId'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PhongBanDichVuOutputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['dichVuId'] = this.dichVuId;
        data['phongBanId'] = this.phongBanId;
        data['benhVienId'] = this.benhVienId;
        data['tenDichVu'] = this.tenDichVu;
        data['maDichVu'] = this.maDichVu;
        data['isChecked'] = this.isChecked;
        data['pbdvId'] = this.pbdvId;
        data['id'] = this.id;
        return data;
    }
}
class PagedRequestPhongBanDichVuDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nhomDichVuId = data['nhomDichVuId'];
            this.phongBanId = data['phongBanId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedRequestPhongBanDichVuDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nhomDichVuId'] = this.nhomDichVuId;
        data['phongBanId'] = this.phongBanId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfPhongBanDichVuOutputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(PhongBanDichVuOutputDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPhongBanDichVuOutputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class PhongBanDichVuDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.dichVuId = data['dichVuId'];
            this.phongBanId = data['phongBanId'];
            this.benhVienId = data['benhVienId'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PhongBanDichVuDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['dichVuId'] = this.dichVuId;
        data['phongBanId'] = this.phongBanId;
        data['benhVienId'] = this.benhVienId;
        data['id'] = this.id;
        return data;
    }
}
class CauHinhTaiKhoanLienThongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiTaiKhoan = data['loaiTaiKhoan'];
            this.tenDangNhap = data['tenDangNhap'];
            this.matKhauMaHoa = data['matKhauMaHoa'];
            this.benhVienId = data['benhVienId'];
            this.settingId = data['settingId'];
            this.url = data['url'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CauHinhTaiKhoanLienThongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiTaiKhoan'] = this.loaiTaiKhoan;
        data['tenDangNhap'] = this.tenDangNhap;
        data['matKhauMaHoa'] = this.matKhauMaHoa;
        data['benhVienId'] = this.benhVienId;
        data['settingId'] = this.settingId;
        data['url'] = this.url;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfCauHinhTaiKhoanLienThongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(CauHinhTaiKhoanLienThongDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCauHinhTaiKhoanLienThongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class ChuongTrinhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ChuongTrinhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfChuongTrinhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(ChuongTrinhDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfChuongTrinhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class GetComboDataFromDataBaseInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.tableName = data['tableName'];
            this.cascaderId = data['cascaderId'];
            this.cascaderMa = data['cascaderMa'];
            this.benhVienId = data['benhVienId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetComboDataFromDataBaseInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['tableName'] = this.tableName;
        data['cascaderId'] = this.cascaderId;
        data['cascaderMa'] = this.cascaderMa;
        data['benhVienId'] = this.benhVienId;
        return data;
    }
}
class ChildrenDataDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.ma = data['ma'];
            this.title = data['title'];
            this.isLeaf = data['isLeaf'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ChildrenDataDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['ma'] = this.ma;
        data['title'] = this.title;
        data['isLeaf'] = this.isLeaf;
        return data;
    }
}
class DoiTuongTreeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nhomDoiTuongId = data['nhomDoiTuongId'];
            this.title = data['title'];
            this.isExpanded = data['isExpanded'];
            if (Array.isArray(data['children'])) {
                this.children = [];
                for (let item of data['children'])
                    this.children.push(ChildrenDataDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongTreeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nhomDoiTuongId'] = this.nhomDoiTuongId;
        data['title'] = this.title;
        data['isExpanded'] = this.isExpanded;
        if (Array.isArray(this.children)) {
            data['children'] = [];
            for (let item of this.children)
                data['children'].push(item.toJSON());
        }
        return data;
    }
}
class DoiTuongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nhomDoiTuongId = data['nhomDoiTuongId'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenEn = data['tenEn'];
            this.tenKhongDau = data['tenKhongDau'];
            this.ngayHieuLuc = data['ngayHieuLuc'] ? moment(data['ngayHieuLuc'].toString()) : undefined;
            this.ngayHetHieuLuc = data['ngayHetHieuLuc'] ? moment(data['ngayHetHieuLuc'].toString()) : undefined;
            this.tyLeGiam = data['tyLeGiam'];
            this.gioiHan1 = data['gioiHan1'];
            this.tyLe1 = data['tyLe1'];
            this.gioiHan2 = data['gioiHan2'];
            this.tyLe2 = data['tyLe2'];
            this.gioiHan3 = data['gioiHan3'];
            this.tyLe3 = data['tyLe3'];
            this.gioiHan4 = data['gioiHan4'];
            this.tyLe4 = data['tyLe4'];
            this.gioiHan5 = data['gioiHan5'];
            this.tyLe5 = data['tyLe5'];
            this.ghiChu = data['ghiChu'];
            this.hangBenhVien = data['hangBenhVien'];
            this.maQuyenLoiBHYT = data['maQuyenLoiBHYT'];
            this.gioiHan1Cu = data['gioiHan1Cu'];
            this.gioiHan2Cu = data['gioiHan2Cu'];
            this.isExists = data['isExists'];
            this.tenNhomDoiTuong = data['tenNhomDoiTuong'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nhomDoiTuongId'] = this.nhomDoiTuongId;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenEn'] = this.tenEn;
        data['tenKhongDau'] = this.tenKhongDau;
        data['ngayHieuLuc'] = this.ngayHieuLuc ? this.ngayHieuLuc.toISOString() : undefined;
        data['ngayHetHieuLuc'] = this.ngayHetHieuLuc ? this.ngayHetHieuLuc.toISOString() : undefined;
        data['tyLeGiam'] = this.tyLeGiam;
        data['gioiHan1'] = this.gioiHan1;
        data['tyLe1'] = this.tyLe1;
        data['gioiHan2'] = this.gioiHan2;
        data['tyLe2'] = this.tyLe2;
        data['gioiHan3'] = this.gioiHan3;
        data['tyLe3'] = this.tyLe3;
        data['gioiHan4'] = this.gioiHan4;
        data['tyLe4'] = this.tyLe4;
        data['gioiHan5'] = this.gioiHan5;
        data['tyLe5'] = this.tyLe5;
        data['ghiChu'] = this.ghiChu;
        data['hangBenhVien'] = this.hangBenhVien;
        data['maQuyenLoiBHYT'] = this.maQuyenLoiBHYT;
        data['gioiHan1Cu'] = this.gioiHan1Cu;
        data['gioiHan2Cu'] = this.gioiHan2Cu;
        data['isExists'] = this.isExists;
        data['tenNhomDoiTuong'] = this.tenNhomDoiTuong;
        data['id'] = this.id;
        return data;
    }
}
class DoiTuongPagedRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nhomDoiTuongId = data['nhomDoiTuongId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongPagedRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nhomDoiTuongId'] = this.nhomDoiTuongId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfDoiTuongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DoiTuongDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDoiTuongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class DoiTuongNoiTruInput {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doiTuongId = data['doiTuongId'];
            this.filter = data['filter'];
            this.loaiKhoId = data['loaiKhoId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongNoiTruInput();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doiTuongId'] = this.doiTuongId;
        data['filter'] = this.filter;
        data['loaiKhoId'] = this.loaiKhoId;
        return data;
    }
}
class KhoDuocDataTree {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.expand = data['expand'];
            this.key = data['key'];
            this.name = data['name'];
            this.checked = data['checked'];
            this.ma = data['ma'];
            this.ngayTao = data['ngayTao'] ? moment(data['ngayTao'].toString()) : undefined;
            this.isActive = data['isActive'];
            this.doiTuongKhoDuocNoiTruId = data['doiTuongKhoDuocNoiTruId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KhoDuocDataTree();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['expand'] = this.expand;
        data['key'] = this.key;
        data['name'] = this.name;
        data['checked'] = this.checked;
        data['ma'] = this.ma;
        data['ngayTao'] = this.ngayTao ? this.ngayTao.toISOString() : undefined;
        data['isActive'] = this.isActive;
        data['doiTuongKhoDuocNoiTruId'] = this.doiTuongKhoDuocNoiTruId;
        return data;
    }
}
class KhoDuocTreeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.key = data['key'];
            this.expand = data['expand'];
            this.allChecked = data['allChecked'];
            if (Array.isArray(data['children'])) {
                this.children = [];
                for (let item of data['children'])
                    this.children.push(KhoDuocDataTree.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KhoDuocTreeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['key'] = this.key;
        data['expand'] = this.expand;
        data['allChecked'] = this.allChecked;
        if (Array.isArray(this.children)) {
            data['children'] = [];
            for (let item of this.children)
                data['children'].push(item.toJSON());
        }
        return data;
    }
}
class ListLoaiGiaIdDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.khoDuocId = data['khoDuocId'];
            this.checked = data['checked'];
            this.doiTuongKhoDuocNoiTruId = data['doiTuongKhoDuocNoiTruId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ListLoaiGiaIdDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['khoDuocId'] = this.khoDuocId;
        data['checked'] = this.checked;
        data['doiTuongKhoDuocNoiTruId'] = this.doiTuongKhoDuocNoiTruId;
        return data;
    }
}
class ParamsCreateOrUpdateDoiTuongNoiTruDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doiTuongId = data['doiTuongId'];
            if (Array.isArray(data['lstData'])) {
                this.lstData = [];
                for (let item of data['lstData'])
                    this.lstData.push(ListLoaiGiaIdDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ParamsCreateOrUpdateDoiTuongNoiTruDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doiTuongId'] = this.doiTuongId;
        if (Array.isArray(this.lstData)) {
            data['lstData'] = [];
            for (let item of this.lstData)
                data['lstData'].push(item.toJSON());
        }
        return data;
    }
}
class DoiTuongKhoDuocNoiTruPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doiTuongId = data['doiTuongId'];
            this.loaiGiaId = data['loaiGiaId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongKhoDuocNoiTruPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doiTuongId'] = this.doiTuongId;
        data['loaiGiaId'] = this.loaiGiaId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class DoiTuongKhoDuocNoiTruDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doiTuongId = data['doiTuongId'];
            this.khoDuocId = data['khoDuocId'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongKhoDuocNoiTruDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doiTuongId'] = this.doiTuongId;
        data['khoDuocId'] = this.khoDuocId;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfDoiTuongKhoDuocNoiTruDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DoiTuongKhoDuocNoiTruDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDoiTuongKhoDuocNoiTruDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class Params {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doiTuongId = data['doiTuongId'];
            this.filter = data['filter'];
            this.nhomGiaId = data['nhomGiaId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Params();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doiTuongId'] = this.doiTuongId;
        data['filter'] = this.filter;
        data['nhomGiaId'] = this.nhomGiaId;
        return data;
    }
}
class DataTree {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.expand = data['expand'];
            this.key = data['key'];
            this.name = data['name'];
            this.doUuTien = data['doUuTien'];
            this.giaHoTro = data['giaHoTro'];
            this.checked = data['checked'];
            this.doiTuongLoaiGiaId = data['doiTuongLoaiGiaId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DataTree();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['expand'] = this.expand;
        data['key'] = this.key;
        data['name'] = this.name;
        data['doUuTien'] = this.doUuTien;
        data['giaHoTro'] = this.giaHoTro;
        data['checked'] = this.checked;
        data['doiTuongLoaiGiaId'] = this.doiTuongLoaiGiaId;
        return data;
    }
}
class LoaiGiaTreeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.key = data['key'];
            this.expand = data['expand'];
            this.allChecked = data['allChecked'];
            if (Array.isArray(data['children'])) {
                this.children = [];
                for (let item of data['children'])
                    this.children.push(DataTree.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoaiGiaTreeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['key'] = this.key;
        data['expand'] = this.expand;
        data['allChecked'] = this.allChecked;
        if (Array.isArray(this.children)) {
            data['children'] = [];
            for (let item of this.children)
                data['children'].push(item.toJSON());
        }
        return data;
    }
}
class Dto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doUuTien = data['doUuTien'];
            this.loaiGiaId = data['loaiGiaId'];
            this.checked = data['checked'];
            this.doiTuongLoaiGiaId = data['doiTuongLoaiGiaId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Dto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doUuTien'] = this.doUuTien;
        data['loaiGiaId'] = this.loaiGiaId;
        data['checked'] = this.checked;
        data['doiTuongLoaiGiaId'] = this.doiTuongLoaiGiaId;
        return data;
    }
}
class ParamUpdateOrCreateDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doiTuongId = data['doiTuongId'];
            if (Array.isArray(data['lstData'])) {
                this.lstData = [];
                for (let item of data['lstData'])
                    this.lstData.push(Dto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ParamUpdateOrCreateDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doiTuongId'] = this.doiTuongId;
        if (Array.isArray(this.lstData)) {
            data['lstData'] = [];
            for (let item of this.lstData)
                data['lstData'].push(item.toJSON());
        }
        return data;
    }
}
class DoiTuongLoaiGiaPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doiTuongId = data['doiTuongId'];
            this.loaiGiaId = data['loaiGiaId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongLoaiGiaPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doiTuongId'] = this.doiTuongId;
        data['loaiGiaId'] = this.loaiGiaId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class DoiTuongLoaiGiaDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.doiTuongId = data['doiTuongId'];
            this.loaiGiaId = data['loaiGiaId'];
            this.doUuTien = data['doUuTien'];
            this.isActive = data['isActive'];
            this.benhVienId = data['benhVienId'];
            this.tenDoiTuong = data['tenDoiTuong'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongLoaiGiaDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['doiTuongId'] = this.doiTuongId;
        data['loaiGiaId'] = this.loaiGiaId;
        data['doUuTien'] = this.doUuTien;
        data['isActive'] = this.isActive;
        data['benhVienId'] = this.benhVienId;
        data['tenDoiTuong'] = this.tenDoiTuong;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfDoiTuongLoaiGiaDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DoiTuongLoaiGiaDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDoiTuongLoaiGiaDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class DonViHanhChinhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.parentId = data['parentId'];
            this.ten = data['ten'];
            this.tenVietTat = data['tenVietTat'];
            this.tenDayDu = data['tenDayDu'];
            this.tenDayDuKhongDau = data['tenDayDuKhongDau'];
            this.capDo = data['capDo'];
            this.isActive = data['isActive'];
            this.isExists = data['isExists'];
            this.capDoStr = data['capDoStr'];
            this.parentStr = data['parentStr'];
            this.tinhId = data['tinhId'];
            this.huyenId = data['huyenId'];
            this.xaId = data['xaId'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DonViHanhChinhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['parentId'] = this.parentId;
        data['ten'] = this.ten;
        data['tenVietTat'] = this.tenVietTat;
        data['tenDayDu'] = this.tenDayDu;
        data['tenDayDuKhongDau'] = this.tenDayDuKhongDau;
        data['capDo'] = this.capDo;
        data['isActive'] = this.isActive;
        data['isExists'] = this.isExists;
        data['capDoStr'] = this.capDoStr;
        data['parentStr'] = this.parentStr;
        data['tinhId'] = this.tinhId;
        data['huyenId'] = this.huyenId;
        data['xaId'] = this.xaId;
        data['id'] = this.id;
        return data;
    }
}
class PagedRequestDonViHanhChinhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.capDo = data['capDo'];
            this.tinhId = data['tinhId'];
            this.huyenId = data['huyenId'];
            this.xaId = data['xaId'];
            this.thonId = data['thonId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedRequestDonViHanhChinhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['capDo'] = this.capDo;
        data['tinhId'] = this.tinhId;
        data['huyenId'] = this.huyenId;
        data['xaId'] = this.xaId;
        data['thonId'] = this.thonId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfDonViHanhChinhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DonViHanhChinhDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDonViHanhChinhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class DonViTinhPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiVatTuId = data['loaiVatTuId'];
            this.isDonViCoBan = data['isDonViCoBan'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DonViTinhPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiVatTuId'] = this.loaiVatTuId;
        data['isDonViCoBan'] = this.isDonViCoBan;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class DonViTinhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.donViCoBan = false;
        }
    }
    init(data) {
        if (data) {
            this.loaiVatTuId = data['loaiVatTuId'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenKhongDau = data['tenKhongDau'];
            this.donViCoBanId = data['donViCoBanId'];
            this.donViCoBan = data['donViCoBan'] !== undefined ? data['donViCoBan'] : false;
            this.giaTriQuyDoi = data['giaTriQuyDoi'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DonViTinhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiVatTuId'] = this.loaiVatTuId;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenKhongDau'] = this.tenKhongDau;
        data['donViCoBanId'] = this.donViCoBanId;
        data['donViCoBan'] = this.donViCoBan;
        data['giaTriQuyDoi'] = this.giaTriQuyDoi;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfDonViTinhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DonViTinhDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDonViTinhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class DuocThongTinThauDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.duocId = data['duocId'];
            this.tenBhyt = data['tenBhyt'];
            this.maHoatChat = data['maHoatChat'];
            this.sttPheDuyet = data['sttPheDuyet'];
            this.nuocSanXuat = data['nuocSanXuat'];
            this.hangSanXuat = data['hangSanXuat'];
            this.nhaThau = data['nhaThau'];
            this.soDK = data['soDK'];
            this.donGiaThau = data['donGiaThau'];
            this.goiThau = data['goiThau'];
            this.nhomThau = data['nhomThau'];
            this.soQDThau = data['soQDThau'];
            this.ngayTrungThau = data['ngayTrungThau'] ? moment(data['ngayTrungThau'].toString()) : undefined;
            this.uuTien = data['uuTien'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DuocThongTinThauDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['duocId'] = this.duocId;
        data['tenBhyt'] = this.tenBhyt;
        data['maHoatChat'] = this.maHoatChat;
        data['sttPheDuyet'] = this.sttPheDuyet;
        data['nuocSanXuat'] = this.nuocSanXuat;
        data['hangSanXuat'] = this.hangSanXuat;
        data['nhaThau'] = this.nhaThau;
        data['soDK'] = this.soDK;
        data['donGiaThau'] = this.donGiaThau;
        data['goiThau'] = this.goiThau;
        data['nhomThau'] = this.nhomThau;
        data['soQDThau'] = this.soQDThau;
        data['ngayTrungThau'] = this.ngayTrungThau ? this.ngayTrungThau.toISOString() : undefined;
        data['uuTien'] = this.uuTien;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class InsertBulkThongTinThauByDuocIdRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (Array.isArray(data['listOfThongTinThau'])) {
                this.listOfThongTinThau = [];
                for (let item of data['listOfThongTinThau'])
                    this.listOfThongTinThau.push(DuocThongTinThauDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new InsertBulkThongTinThauByDuocIdRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listOfThongTinThau)) {
            data['listOfThongTinThau'] = [];
            for (let item of this.listOfThongTinThau)
                data['listOfThongTinThau'].push(item.toJSON());
        }
        return data;
    }
}
var DuocDungChungTimTheoEnum;
(function (DuocDungChungTimTheoEnum) {
    DuocDungChungTimTheoEnum[DuocDungChungTimTheoEnum["MaThuoc"] = 1] = "MaThuoc";
    DuocDungChungTimTheoEnum[DuocDungChungTimTheoEnum["TenThuoc"] = 2] = "TenThuoc";
    DuocDungChungTimTheoEnum[DuocDungChungTimTheoEnum["HoatChat"] = 3] = "HoatChat";
    DuocDungChungTimTheoEnum[DuocDungChungTimTheoEnum["SoDangKy"] = 4] = "SoDangKy";
})(DuocDungChungTimTheoEnum || (DuocDungChungTimTheoEnum = {}));
class DuocDungChungPagedListInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.timTheo = data['timTheo'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DuocDungChungPagedListInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['timTheo'] = this.timTheo;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class DuocDungChungDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.hamLuong = data['hamLuong'];
            this.duongDung = data['duongDung'];
            this.hoatChat = data['hoatChat'];
            this.soDK = data['soDK'];
            this.loaiThuoc = data['loaiThuoc'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DuocDungChungDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['hamLuong'] = this.hamLuong;
        data['duongDung'] = this.duongDung;
        data['hoatChat'] = this.hoatChat;
        data['soDK'] = this.soDK;
        data['loaiThuoc'] = this.loaiThuoc;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfDuocDungChungDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DuocDungChungDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDuocDungChungDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class ThemThuocTuDanhMucChungDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.maDuoc = data['maDuoc'];
            this.donViTinh = data['donViTinh'];
            this.duongDung = data['duongDung'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ThemThuocTuDanhMucChungDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['maDuoc'] = this.maDuoc;
        data['donViTinh'] = this.donViTinh;
        data['duongDung'] = this.duongDung;
        return data;
    }
}
class ThemThuocTuDanhMucDungChungRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (Array.isArray(data['listOfThuocCanThem'])) {
                this.listOfThuocCanThem = [];
                for (let item of data['listOfThuocCanThem'])
                    this.listOfThuocCanThem.push(ThemThuocTuDanhMucChungDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ThemThuocTuDanhMucDungChungRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listOfThuocCanThem)) {
            data['listOfThuocCanThem'] = [];
            for (let item of this.listOfThuocCanThem)
                data['listOfThuocCanThem'].push(item.toJSON());
        }
        return data;
    }
}
class DuocBenhVienPageListInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiVatTuId = data['loaiVatTuId'];
            this.chuongTrinhId = data['chuongTrinhId'];
            this.soDangKy = data['soDangKy'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DuocBenhVienPageListInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiVatTuId'] = this.loaiVatTuId;
        data['chuongTrinhId'] = this.chuongTrinhId;
        data['soDangKy'] = this.soDangKy;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
var LOAI_THUOC;
(function (LOAI_THUOC) {
    LOAI_THUOC[LOAI_THUOC["TayY"] = 1] = "TayY";
    LOAI_THUOC[LOAI_THUOC["ChePhamYHocCoTruyen"] = 2] = "ChePhamYHocCoTruyen";
    LOAI_THUOC[LOAI_THUOC["ViThuocYHocCoTruyen"] = 3] = "ViThuocYHocCoTruyen";
})(LOAI_THUOC || (LOAI_THUOC = {}));
var LOAI_VAT_TU_Y_TE;
(function (LOAI_VAT_TU_Y_TE) {
    LOAI_VAT_TU_Y_TE[LOAI_VAT_TU_Y_TE["Thuoc"] = 0] = "Thuoc";
    LOAI_VAT_TU_Y_TE[LOAI_VAT_TU_Y_TE["VatTu"] = 1] = "VatTu";
    LOAI_VAT_TU_Y_TE[LOAI_VAT_TU_Y_TE["HoaChat"] = 4] = "HoaChat";
})(LOAI_VAT_TU_Y_TE || (LOAI_VAT_TU_Y_TE = {}));
class DuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiVatTuId = data['loaiVatTuId'];
            this.loaiThuoc = data['loaiThuoc'];
            this.loaiDuocId = data['loaiDuocId'];
            this.nhomDuocId = data['nhomDuocId'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenDayDu = data['tenDayDu'];
            this.donViTinhId = data['donViTinhId'];
            this.donViTinh = data['donViTinh'];
            this.quyCach = data['quyCach'];
            this.hoatChat = data['hoatChat'];
            this.duongDungId = data['duongDungId'];
            this.duongDung = data['duongDung'];
            this.congDung = data['congDung'];
            this.hamLuong = data['hamLuong'];
            this.vtyt = data['vtyt'];
            this.soDangKy = data['soDangKy'];
            this.tamNgungSuDung = data['tamNgungSuDung'];
            this.bhyt = data['bhyt'];
            this.quanNhan = data['quanNhan'];
            this.loaiDieuTri = data['loaiDieuTri'];
            this.nhomDvktBhytId = data['nhomDvktBhytId'];
            this.bhytTyLeThanhToanDungTuyen = data['bhytTyLeThanhToanDungTuyen'];
            this.mienPhi = data['mienPhi'];
            this.tamNgungDuTru = data['tamNgungDuTru'];
            this.phamVi = data['phamVi'];
            this.quanTamDacDiet = data['quanTamDacDiet'];
            this.duocDcId = data['duocDcId'];
            this.maDuocChung = data['maDuocChung'];
            this.phanNhomDuocId = data['phanNhomDuocId'];
            this.phanLoaiDuocId = data['phanLoaiDuocId'];
            this.daChat = data['daChat'];
            this.maDmdc = data['maDmdc'];
            this.donViTinhToaThuocId = data['donViTinhToaThuocId'];
            this.donViTinhToaThuoc = data['donViTinhToaThuoc'];
            this.chuongTrinhId = data['chuongTrinhId'];
            this.nuocSanXuat = data['nuocSanXuat'];
            this.vacxinId = data['vacxinId'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiVatTuId'] = this.loaiVatTuId;
        data['loaiThuoc'] = this.loaiThuoc;
        data['loaiDuocId'] = this.loaiDuocId;
        data['nhomDuocId'] = this.nhomDuocId;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenDayDu'] = this.tenDayDu;
        data['donViTinhId'] = this.donViTinhId;
        data['donViTinh'] = this.donViTinh;
        data['quyCach'] = this.quyCach;
        data['hoatChat'] = this.hoatChat;
        data['duongDungId'] = this.duongDungId;
        data['duongDung'] = this.duongDung;
        data['congDung'] = this.congDung;
        data['hamLuong'] = this.hamLuong;
        data['vtyt'] = this.vtyt;
        data['soDangKy'] = this.soDangKy;
        data['tamNgungSuDung'] = this.tamNgungSuDung;
        data['bhyt'] = this.bhyt;
        data['quanNhan'] = this.quanNhan;
        data['loaiDieuTri'] = this.loaiDieuTri;
        data['nhomDvktBhytId'] = this.nhomDvktBhytId;
        data['bhytTyLeThanhToanDungTuyen'] = this.bhytTyLeThanhToanDungTuyen;
        data['mienPhi'] = this.mienPhi;
        data['tamNgungDuTru'] = this.tamNgungDuTru;
        data['phamVi'] = this.phamVi;
        data['quanTamDacDiet'] = this.quanTamDacDiet;
        data['duocDcId'] = this.duocDcId;
        data['maDuocChung'] = this.maDuocChung;
        data['phanNhomDuocId'] = this.phanNhomDuocId;
        data['phanLoaiDuocId'] = this.phanLoaiDuocId;
        data['daChat'] = this.daChat;
        data['maDmdc'] = this.maDmdc;
        data['donViTinhToaThuocId'] = this.donViTinhToaThuocId;
        data['donViTinhToaThuoc'] = this.donViTinhToaThuoc;
        data['chuongTrinhId'] = this.chuongTrinhId;
        data['nuocSanXuat'] = this.nuocSanXuat;
        data['vacxinId'] = this.vacxinId;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DuocDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class PagedResultDtoOfDuocThongTinThauDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DuocThongTinThauDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDuocThongTinThauDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
var GetEntityByIdMap;
(function (GetEntityByIdMap) {
    GetEntityByIdMap[GetEntityByIdMap["BenhNhan"] = 1] = "BenhNhan";
    GetEntityByIdMap[GetEntityByIdMap["TiepNhan"] = 2] = "TiepNhan";
    GetEntityByIdMap[GetEntityByIdMap["NgoaiTruKhamBenh"] = 3] = "NgoaiTruKhamBenh";
    GetEntityByIdMap[GetEntityByIdMap["TiepNhanBenhNhanBHYT"] = 4] = "TiepNhanBenhNhanBHYT";
    GetEntityByIdMap[GetEntityByIdMap["DMDoiTuong"] = 5] = "DMDoiTuong";
    GetEntityByIdMap[GetEntityByIdMap["BenhNhanDiaChi"] = 6] = "BenhNhanDiaChi";
    GetEntityByIdMap[GetEntityByIdMap["BenhVien"] = 7] = "BenhVien";
})(GetEntityByIdMap || (GetEntityByIdMap = {}));
class GetEntityByIdInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.map = data['map'];
            if (Array.isArray(data['propertyOfDto'])) {
                this.propertyOfDto = [];
                for (let item of data['propertyOfDto'])
                    this.propertyOfDto.push(item);
            }
            this.propertyId = data['propertyId'];
            this.id = data['id'];
            this.isGetOne = data['isGetOne'];
            this.isSoftDelete = data['isSoftDelete'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetEntityByIdInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['map'] = this.map;
        if (Array.isArray(this.propertyOfDto)) {
            data['propertyOfDto'] = [];
            for (let item of this.propertyOfDto)
                data['propertyOfDto'].push(item);
        }
        data['propertyId'] = this.propertyId;
        data['id'] = this.id;
        data['isGetOne'] = this.isGetOne;
        data['isSoftDelete'] = this.isSoftDelete;
        return data;
    }
}
class GetEntityByIdOutDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.dto = data['dto'];
            this.isSuccessful = data['isSuccessful'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetEntityByIdOutDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['dto'] = this.dto;
        data['isSuccessful'] = this.isSuccessful;
        return data;
    }
}
class GiuongBenhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.benhVienId = data['benhVienId'];
            this.ma = data['ma'];
            this.moTa = data['moTa'];
            this.khoaDieuTriId = data['khoaDieuTriId'];
            this.phongBenhId = data['phongBenhId'];
            this.tang = data['tang'];
            this.vatDungKemTheo = data['vatDungKemTheo'];
            this.isActive = data['isActive'];
            this.isExists = data['isExists'];
            this.tenKhoaDieuTri = data['tenKhoaDieuTri'];
            this.tenPhongBenh = data['tenPhongBenh'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GiuongBenhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['benhVienId'] = this.benhVienId;
        data['ma'] = this.ma;
        data['moTa'] = this.moTa;
        data['khoaDieuTriId'] = this.khoaDieuTriId;
        data['phongBenhId'] = this.phongBenhId;
        data['tang'] = this.tang;
        data['vatDungKemTheo'] = this.vatDungKemTheo;
        data['isActive'] = this.isActive;
        data['isExists'] = this.isExists;
        data['tenKhoaDieuTri'] = this.tenKhoaDieuTri;
        data['tenPhongBenh'] = this.tenPhongBenh;
        data['id'] = this.id;
        return data;
    }
}
class GiuongBenhPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.khoaDieuTriId = data['khoaDieuTriId'];
            this.phongBenhId = data['phongBenhId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GiuongBenhPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['khoaDieuTriId'] = this.khoaDieuTriId;
        data['phongBenhId'] = this.phongBenhId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfGiuongBenhDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(GiuongBenhDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGiuongBenhDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class LstDictionaryDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.lstDictionaryTypeId = data['lstDictionaryTypeId'];
            this.lstDictionaryTypeCode = data['lstDictionaryTypeCode'];
            this.code = data['code'];
            this.name = data['name'];
            this.nameEn = data['nameEn'];
            this.parentId = data['parentId'];
            this.isActive = data['isActive'];
            this.isExists = data['isExists'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LstDictionaryDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['lstDictionaryTypeId'] = this.lstDictionaryTypeId;
        data['lstDictionaryTypeCode'] = this.lstDictionaryTypeCode;
        data['code'] = this.code;
        data['name'] = this.name;
        data['nameEn'] = this.nameEn;
        data['parentId'] = this.parentId;
        data['isActive'] = this.isActive;
        data['isExists'] = this.isExists;
        data['id'] = this.id;
        return data;
    }
}
class LstDictionaryGetByListCodePagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (Array.isArray(data['lstDictionaryTypeCodes'])) {
                this.lstDictionaryTypeCodes = [];
                for (let item of data['lstDictionaryTypeCodes'])
                    this.lstDictionaryTypeCodes.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LstDictionaryGetByListCodePagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lstDictionaryTypeCodes)) {
            data['lstDictionaryTypeCodes'] = [];
            for (let item of this.lstDictionaryTypeCodes)
                data['lstDictionaryTypeCodes'].push(item);
        }
        return data;
    }
}
class LstDictionaryPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.lstDictionaryTypeId = data['lstDictionaryTypeId'];
            this.parentId = data['parentId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LstDictionaryPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['lstDictionaryTypeId'] = this.lstDictionaryTypeId;
        data['parentId'] = this.parentId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfLstDictionaryDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(LstDictionaryDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLstDictionaryDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class LstDictionaryTypeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.code = data['code'];
            this.name = data['name'];
            this.nameEn = data['nameEn'];
            this.level = data['level'];
            this.parentId = data['parentId'];
            this.isActive = data['isActive'];
            this.isExists = data['isExists'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LstDictionaryTypeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['code'] = this.code;
        data['name'] = this.name;
        data['nameEn'] = this.nameEn;
        data['level'] = this.level;
        data['parentId'] = this.parentId;
        data['isActive'] = this.isActive;
        data['isExists'] = this.isExists;
        data['id'] = this.id;
        return data;
    }
}
class LstDictionaryTypePagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.parentId = data['parentId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LstDictionaryTypePagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['parentId'] = this.parentId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfLstDictionaryTypeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(LstDictionaryTypeDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLstDictionaryTypeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class HoatChatPagedListInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new HoatChatPagedListInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class HoatChatDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.cap = data['cap'];
            this.parentId = data['parentId'];
            this.stt = data['stt'];
            this.sttThuoc = data['sttThuoc'];
            this.duongDung = data['duongDung'];
            this.maDuongDung = data['maDuongDung'];
            this.ma1282 = data['ma1282'];
            this.tuyen = data['tuyen'];
            this.loaiDuocId = data['loaiDuocId'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new HoatChatDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['cap'] = this.cap;
        data['parentId'] = this.parentId;
        data['stt'] = this.stt;
        data['sttThuoc'] = this.sttThuoc;
        data['duongDung'] = this.duongDung;
        data['maDuongDung'] = this.maDuongDung;
        data['ma1282'] = this.ma1282;
        data['tuyen'] = this.tuyen;
        data['loaiDuocId'] = this.loaiDuocId;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfHoatChatDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(HoatChatDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfHoatChatDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class KiemTraExcelThuocRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.fileDto = data['fileDto'] ? FileDto.fromJS(data['fileDto']) : undefined;
            this.hamLuongVaoTenDayDu = data['hamLuongVaoTenDayDu'];
            this.isUpdate = data['isUpdate'];
            this.isThuoc = data['isThuoc'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KiemTraExcelThuocRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['fileDto'] = this.fileDto ? this.fileDto.toJSON() : undefined;
        data['hamLuongVaoTenDayDu'] = this.hamLuongVaoTenDayDu;
        data['isUpdate'] = this.isUpdate;
        data['isThuoc'] = this.isThuoc;
        return data;
    }
}
class ReadExcelThuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.stt = data['stt'];
            this.maduoc = data['maduoc'];
            this.mA_DMDC = data['mA_DMDC'];
            this.tenduoc = data['tenduoc'];
            this.hoatchat = data['hoatchat'];
            this.donvitinh = data['donvitinh'];
            this.hamluong = data['hamluong'];
            this.quycach = data['quycach'];
            this.duongdung = data['duongdung'];
            this.stT_DMBYT = data['stT_DMBYT'];
            this.stT_PHEDUYET = data['stT_PHEDUYET'];
            this.nuocsanxuat = data['nuocsanxuat'];
            this.hangsanxuat = data['hangsanxuat'];
            this.sodk = data['sodk'];
            this.loaithuoc = data['loaithuoc'];
            this.dachat = data['dachat'];
            this.dongiathau = data['dongiathau'];
            this.soqdthau = data['soqdthau'];
            this.nhomthau = data['nhomthau'];
            this.goithau = data['goithau'];
            this.ngaytrungthau = data['ngaytrungthau'];
            this.donViTinhId = data['donViTinhId'];
            this.duongDungId = data['duongDungId'];
            this.nhomDuocId = data['nhomDuocId'];
            this.phanNhomDuocId = data['phanNhomDuocId'];
            this.loaiThuoc = data['loaiThuoc'];
            this.bDaChat = data['bDaChat'];
            this.ngayTrungThau = data['ngayTrungThau'] ? moment(data['ngayTrungThau'].toString()) : undefined;
            this.donGiaThau = data['donGiaThau'];
            this.tenThuocSdkSttPheDuyet = data['tenThuocSdkSttPheDuyet'];
            this.tenSttPheDuyet = data['tenSttPheDuyet'];
            this.duocId = data['duocId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReadExcelThuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['stt'] = this.stt;
        data['maduoc'] = this.maduoc;
        data['mA_DMDC'] = this.mA_DMDC;
        data['tenduoc'] = this.tenduoc;
        data['hoatchat'] = this.hoatchat;
        data['donvitinh'] = this.donvitinh;
        data['hamluong'] = this.hamluong;
        data['quycach'] = this.quycach;
        data['duongdung'] = this.duongdung;
        data['stT_DMBYT'] = this.stT_DMBYT;
        data['stT_PHEDUYET'] = this.stT_PHEDUYET;
        data['nuocsanxuat'] = this.nuocsanxuat;
        data['hangsanxuat'] = this.hangsanxuat;
        data['sodk'] = this.sodk;
        data['loaithuoc'] = this.loaithuoc;
        data['dachat'] = this.dachat;
        data['dongiathau'] = this.dongiathau;
        data['soqdthau'] = this.soqdthau;
        data['nhomthau'] = this.nhomthau;
        data['goithau'] = this.goithau;
        data['ngaytrungthau'] = this.ngaytrungthau;
        data['donViTinhId'] = this.donViTinhId;
        data['duongDungId'] = this.duongDungId;
        data['nhomDuocId'] = this.nhomDuocId;
        data['phanNhomDuocId'] = this.phanNhomDuocId;
        data['loaiThuoc'] = this.loaiThuoc;
        data['bDaChat'] = this.bDaChat;
        data['ngayTrungThau'] = this.ngayTrungThau ? this.ngayTrungThau.toISOString() : undefined;
        data['donGiaThau'] = this.donGiaThau;
        data['tenThuocSdkSttPheDuyet'] = this.tenThuocSdkSttPheDuyet;
        data['tenSttPheDuyet'] = this.tenSttPheDuyet;
        data['duocId'] = this.duocId;
        return data;
    }
}
class KiemTraThuocOutputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.excelDto = data['excelDto'] ? ReadExcelThuocDto.fromJS(data['excelDto']) : undefined;
            if (Array.isArray(data['messageError'])) {
                this.messageError = [];
                for (let item of data['messageError'])
                    this.messageError.push(item);
            }
            this.isSuccessful = data['isSuccessful'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KiemTraThuocOutputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['excelDto'] = this.excelDto ? this.excelDto.toJSON() : undefined;
        if (Array.isArray(this.messageError)) {
            data['messageError'] = [];
            for (let item of this.messageError)
                data['messageError'].push(item);
        }
        data['isSuccessful'] = this.isSuccessful;
        return data;
    }
}
class KiemTraExcelThuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (Array.isArray(data['danhSachHopLe'])) {
                this.danhSachHopLe = [];
                for (let item of data['danhSachHopLe'])
                    this.danhSachHopLe.push(KiemTraThuocOutputDto.fromJS(item));
            }
            if (Array.isArray(data['danhSachLoi'])) {
                this.danhSachLoi = [];
                for (let item of data['danhSachLoi'])
                    this.danhSachLoi.push(KiemTraThuocOutputDto.fromJS(item));
            }
            this.isSuccessful = data['isSuccessful'];
            this.messageError = data['messageError'];
            this.tokenListSuccess = data['tokenListSuccess'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KiemTraExcelThuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.danhSachHopLe)) {
            data['danhSachHopLe'] = [];
            for (let item of this.danhSachHopLe)
                data['danhSachHopLe'].push(item.toJSON());
        }
        if (Array.isArray(this.danhSachLoi)) {
            data['danhSachLoi'] = [];
            for (let item of this.danhSachLoi)
                data['danhSachLoi'].push(item.toJSON());
        }
        data['isSuccessful'] = this.isSuccessful;
        data['messageError'] = this.messageError;
        data['tokenListSuccess'] = this.tokenListSuccess;
        return data;
    }
}
class InsertThuocHopLeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.token = data['token'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new InsertThuocHopLeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['token'] = this.token;
        return data;
    }
}
class CommonResultDtoOfInt32 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isSuccessful = data['isSuccessful'];
            this.errorCode = data['errorCode'];
            this.errorMessage = data['errorMessage'];
            this.dataResult = data['dataResult'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CommonResultDtoOfInt32();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isSuccessful'] = this.isSuccessful;
        data['errorCode'] = this.errorCode;
        data['errorMessage'] = this.errorMessage;
        data['dataResult'] = this.dataResult;
        return data;
    }
}
class UpdateThuocHopLeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.token = data['token'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateThuocHopLeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['token'] = this.token;
        return data;
    }
}
class KhangNguyenDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ten = data['ten'];
            this.moTa = data['moTa'];
            if (Array.isArray(data['listVacXin'])) {
                this.listVacXin = [];
                for (let item of data['listVacXin'])
                    this.listVacXin.push(ComboBoxDto.fromJS(item));
            }
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KhangNguyenDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ten'] = this.ten;
        data['moTa'] = this.moTa;
        if (Array.isArray(this.listVacXin)) {
            data['listVacXin'] = [];
            for (let item of this.listVacXin)
                data['listVacXin'].push(item.toJSON());
        }
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfKhangNguyenDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(KhangNguyenDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfKhangNguyenDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class KhoDuocPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiKhoId = data['loaiKhoId'];
            this.phongBanId = data['phongBanId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KhoDuocPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiKhoId'] = this.loaiKhoId;
        data['phongBanId'] = this.phongBanId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class KhoDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenKhongDau = data['tenKhongDau'];
            this.phongBanName = data['phongBanName'];
            this.loaiKhoName = data['loaiKhoName'];
            this.phongBanId = data['phongBanId'];
            this.loaiKhoId = data['loaiKhoId'];
            this.khoDuoc = data['khoDuoc'];
            this.benhVienId = data['benhVienId'];
            this.creationTime = data['creationTime'] ? moment(data['creationTime'].toString()) : undefined;
            this.totalCount = data['totalCount'];
            this.isActive = data['isActive'];
            this.isExists = data['isExists'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new KhoDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenKhongDau'] = this.tenKhongDau;
        data['phongBanName'] = this.phongBanName;
        data['loaiKhoName'] = this.loaiKhoName;
        data['phongBanId'] = this.phongBanId;
        data['loaiKhoId'] = this.loaiKhoId;
        data['khoDuoc'] = this.khoDuoc;
        data['benhVienId'] = this.benhVienId;
        data['creationTime'] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data['totalCount'] = this.totalCount;
        data['isActive'] = this.isActive;
        data['isExists'] = this.isExists;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfKhoDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(KhoDuocDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfKhoDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class LoaiDuocPagedListInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiVatTuId = data['loaiVatTuId'];
            this.nhomLoaiDuocId = data['nhomLoaiDuocId'];
            this.parentId = data['parentId'];
            this.cap = data['cap'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoaiDuocPagedListInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiVatTuId'] = this.loaiVatTuId;
        data['nhomLoaiDuocId'] = this.nhomLoaiDuocId;
        data['parentId'] = this.parentId;
        data['cap'] = this.cap;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class LoaiDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenEn = data['tenEn'];
            this.tenKhongDau = data['tenKhongDau'];
            this.loaiVatTuId = data['loaiVatTuId'];
            this.nhomLoaiDuocId = data['nhomLoaiDuocId'];
            this.parentId = data['parentId'];
            this.cap = data['cap'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoaiDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenEn'] = this.tenEn;
        data['tenKhongDau'] = this.tenKhongDau;
        data['loaiVatTuId'] = this.loaiVatTuId;
        data['nhomLoaiDuocId'] = this.nhomLoaiDuocId;
        data['parentId'] = this.parentId;
        data['cap'] = this.cap;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfLoaiDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(LoaiDuocDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLoaiDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class LoaiGiaDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nhomGiaId = data['nhomGiaId'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.ghiChu = data['ghiChu'];
            this.giaHoTro = data['giaHoTro'];
            this.fieldName = data['fieldName'];
            this.loaiIdRef = data['loaiIdRef'];
            this.tienTeId = data['tienTeId'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.isExists = data['isExists'];
            this.tenTienTe = data['tenTienTe'];
            this.tenNhomGia = data['tenNhomGia'];
            this.loaiIdRefShow = data['loaiIdRefShow'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoaiGiaDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nhomGiaId'] = this.nhomGiaId;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['ghiChu'] = this.ghiChu;
        data['giaHoTro'] = this.giaHoTro;
        data['fieldName'] = this.fieldName;
        data['loaiIdRef'] = this.loaiIdRef;
        data['tienTeId'] = this.tienTeId;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['isExists'] = this.isExists;
        data['tenTienTe'] = this.tenTienTe;
        data['tenNhomGia'] = this.tenNhomGia;
        data['loaiIdRefShow'] = this.loaiIdRefShow;
        data['id'] = this.id;
        return data;
    }
}
class LoaiGiaPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.tienTeId = data['tienTeId'];
            this.nhomGiaId = data['nhomGiaId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoaiGiaPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['tienTeId'] = this.tienTeId;
        data['nhomGiaId'] = this.nhomGiaId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfLoaiGiaDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(LoaiGiaDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLoaiGiaDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class LoaiVatTuDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ten = data['ten'];
            this.tenEn = data['tenEn'];
            this.tenKhongDau = data['tenKhongDau'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LoaiVatTuDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ten'] = this.ten;
        data['tenEn'] = this.tenEn;
        data['tenKhongDau'] = this.tenKhongDau;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfLoaiVatTuDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(LoaiVatTuDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLoaiVatTuDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class NhaCungCapDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenEn = data['tenEn'];
            this.tenKhongDau = data['tenKhongDau'];
            this.diaChi = data['diaChi'];
            this.dienThoai = data['dienThoai'];
            this.fax = data['fax'];
            this.email = data['email'];
            this.maSoThue = data['maSoThue'];
            this.giamDoc = data['giamDoc'];
            this.nguoiLienHe = data['nguoiLienHe'];
            this.loaiHinhCty = data['loaiHinhCty'];
            this.isActive = data['isActive'];
            this.benhVienId = data['benhVienId'];
            this.isExists = data['isExists'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhaCungCapDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenEn'] = this.tenEn;
        data['tenKhongDau'] = this.tenKhongDau;
        data['diaChi'] = this.diaChi;
        data['dienThoai'] = this.dienThoai;
        data['fax'] = this.fax;
        data['email'] = this.email;
        data['maSoThue'] = this.maSoThue;
        data['giamDoc'] = this.giamDoc;
        data['nguoiLienHe'] = this.nguoiLienHe;
        data['loaiHinhCty'] = this.loaiHinhCty;
        data['isActive'] = this.isActive;
        data['benhVienId'] = this.benhVienId;
        data['isExists'] = this.isExists;
        data['id'] = this.id;
        return data;
    }
}
class NhaCungCapPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhaCungCapPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfNhaCungCapDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(NhaCungCapDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfNhaCungCapDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
var NHAN_LUC_LOAI_HINH_ANH;
(function (NHAN_LUC_LOAI_HINH_ANH) {
    NHAN_LUC_LOAI_HINH_ANH[NHAN_LUC_LOAI_HINH_ANH["AnhDaiDien"] = 1] = "AnhDaiDien";
    NHAN_LUC_LOAI_HINH_ANH[NHAN_LUC_LOAI_HINH_ANH["ChuKy"] = 2] = "ChuKy";
})(NHAN_LUC_LOAI_HINH_ANH || (NHAN_LUC_LOAI_HINH_ANH = {}));
class NhanLucPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.benhVienId = data['benhVienId'];
            this.phongBanId = data['phongBanId'];
            this.tinhTrang = data['tinhTrang'];
            this.chucVuId = data['chucVuId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhanLucPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['benhVienId'] = this.benhVienId;
        data['phongBanId'] = this.phongBanId;
        data['tinhTrang'] = this.tinhTrang;
        data['chucVuId'] = this.chucVuId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class NhanLucDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenKhongDau = data['tenKhongDau'];
            this.ngaySinh = data['ngaySinh'] ? moment(data['ngaySinh'].toString()) : undefined;
            this.gioiTinh = data['gioiTinh'];
            this.dienThoai = data['dienThoai'];
            this.cmnd = data['cmnd'];
            this.ngayCap = data['ngayCap'] ? moment(data['ngayCap'].toString()) : undefined;
            this.noiCapCmnd = data['noiCapCmnd'];
            this.phongBanId = data['phongBanId'];
            this.quocTichId = data['quocTichId'];
            this.tinhId = data['tinhId'];
            this.huyenId = data['huyenId'];
            this.xaId = data['xaId'];
            this.diaChi = data['diaChi'];
            this.danTocId = data['danTocId'];
            this.tinhTrang = data['tinhTrang'];
            this.chucVuId = data['chucVuId'];
            this.chucDanhId = data['chucDanhId'];
            this.loaiNhanLucId = data['loaiNhanLucId'];
            this.trinhDoChuyenMonId = data['trinhDoChuyenMonId'];
            this.chuyenNganhChinhId = data['chuyenNganhChinhId'];
            this.chuyenNganhPhuId = data['chuyenNganhPhuId'];
            this.soChungChiHanhNghe = data['soChungChiHanhNghe'];
            this.ngayCapChinhChiHanhNghe = data['ngayCapChinhChiHanhNghe'] ? moment(data['ngayCapChinhChiHanhNghe'].toString()) : undefined;
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhanLucDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenKhongDau'] = this.tenKhongDau;
        data['ngaySinh'] = this.ngaySinh ? this.ngaySinh.toISOString() : undefined;
        data['gioiTinh'] = this.gioiTinh;
        data['dienThoai'] = this.dienThoai;
        data['cmnd'] = this.cmnd;
        data['ngayCap'] = this.ngayCap ? this.ngayCap.toISOString() : undefined;
        data['noiCapCmnd'] = this.noiCapCmnd;
        data['phongBanId'] = this.phongBanId;
        data['quocTichId'] = this.quocTichId;
        data['tinhId'] = this.tinhId;
        data['huyenId'] = this.huyenId;
        data['xaId'] = this.xaId;
        data['diaChi'] = this.diaChi;
        data['danTocId'] = this.danTocId;
        data['tinhTrang'] = this.tinhTrang;
        data['chucVuId'] = this.chucVuId;
        data['chucDanhId'] = this.chucDanhId;
        data['loaiNhanLucId'] = this.loaiNhanLucId;
        data['trinhDoChuyenMonId'] = this.trinhDoChuyenMonId;
        data['chuyenNganhChinhId'] = this.chuyenNganhChinhId;
        data['chuyenNganhPhuId'] = this.chuyenNganhPhuId;
        data['soChungChiHanhNghe'] = this.soChungChiHanhNghe;
        data['ngayCapChinhChiHanhNghe'] = this.ngayCapChinhChiHanhNghe ? this.ngayCapChinhChiHanhNghe.toISOString() : undefined;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfNhanLucDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(NhanLucDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfNhanLucDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class NhomDuocPagedListInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.phanNhomDuocId = data['phanNhomDuocId'];
            this.loaiThuoc = data['loaiThuoc'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhomDuocPagedListInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['phanNhomDuocId'] = this.phanNhomDuocId;
        data['loaiThuoc'] = this.loaiThuoc;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class NhomDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenEn = data['tenEn'];
            this.tenKhongDau = data['tenKhongDau'];
            this.phanNhomDuocId = data['phanNhomDuocId'];
            this.loaiThuoc = data['loaiThuoc'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhomDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenEn'] = this.tenEn;
        data['tenKhongDau'] = this.tenKhongDau;
        data['phanNhomDuocId'] = this.phanNhomDuocId;
        data['loaiThuoc'] = this.loaiThuoc;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfNhomDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(NhomDuocDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfNhomDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
var NhomDvktBhyt_ThuocVtyt;
(function (NhomDvktBhyt_ThuocVtyt) {
    NhomDvktBhyt_ThuocVtyt[NhomDvktBhyt_ThuocVtyt["DichVuKyThuat"] = 0] = "DichVuKyThuat";
    NhomDvktBhyt_ThuocVtyt[NhomDvktBhyt_ThuocVtyt["Thuoc"] = 1] = "Thuoc";
    NhomDvktBhyt_ThuocVtyt[NhomDvktBhyt_ThuocVtyt["VatTuYTe"] = 2] = "VatTuYTe";
})(NhomDvktBhyt_ThuocVtyt || (NhomDvktBhyt_ThuocVtyt = {}));
class NhomDvktBhytPagedListInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.thuocVtyt = data['thuocVtyt'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhomDvktBhytPagedListInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['thuocVtyt'] = this.thuocVtyt;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class NhomDvktBhytDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.thuocVtyt = data['thuocVtyt'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhomDvktBhytDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['thuocVtyt'] = this.thuocVtyt;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfNhomDvktBhytDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(NhomDvktBhytDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfNhomDvktBhytDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class GetPermissionInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.benhVienId = data['benhVienId'];
            this.isRoleStatic = data['isRoleStatic'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetPermissionInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['benhVienId'] = this.benhVienId;
        data['isRoleStatic'] = this.isRoleStatic;
        return data;
    }
}
class ProviderInfoDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.providerName = data['providerName'];
            this.providerKey = data['providerKey'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProviderInfoDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['providerName'] = this.providerName;
        data['providerKey'] = this.providerKey;
        return data;
    }
}
class PermissionGrantInfoDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.displayName = data['displayName'];
            this.parentName = data['parentName'];
            this.isGranted = data['isGranted'];
            if (Array.isArray(data['allowedProviders'])) {
                this.allowedProviders = [];
                for (let item of data['allowedProviders'])
                    this.allowedProviders.push(item);
            }
            if (Array.isArray(data['grantedProviders'])) {
                this.grantedProviders = [];
                for (let item of data['grantedProviders'])
                    this.grantedProviders.push(ProviderInfoDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionGrantInfoDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['displayName'] = this.displayName;
        data['parentName'] = this.parentName;
        data['isGranted'] = this.isGranted;
        if (Array.isArray(this.allowedProviders)) {
            data['allowedProviders'] = [];
            for (let item of this.allowedProviders)
                data['allowedProviders'].push(item);
        }
        if (Array.isArray(this.grantedProviders)) {
            data['grantedProviders'] = [];
            for (let item of this.grantedProviders)
                data['grantedProviders'].push(item.toJSON());
        }
        return data;
    }
}
class PermissionGroupDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.name = data['name'];
            this.displayName = data['displayName'];
            if (Array.isArray(data['permissions'])) {
                this.permissions = [];
                for (let item of data['permissions'])
                    this.permissions.push(PermissionGrantInfoDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionGroupDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['name'] = this.name;
        data['displayName'] = this.displayName;
        if (Array.isArray(this.permissions)) {
            data['permissions'] = [];
            for (let item of this.permissions)
                data['permissions'].push(item.toJSON());
        }
        return data;
    }
}
class GetPermissionListResultDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.entityDisplayName = data['entityDisplayName'];
            if (Array.isArray(data['groups'])) {
                this.groups = [];
                for (let item of data['groups'])
                    this.groups.push(PermissionGroupDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetPermissionListResultDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['entityDisplayName'] = this.entityDisplayName;
        if (Array.isArray(this.groups)) {
            data['groups'] = [];
            for (let item of this.groups)
                data['groups'].push(item.toJSON());
        }
        return data;
    }
}
var LOAI_PHAC_DO;
(function (LOAI_PHAC_DO) {
    LOAI_PHAC_DO[LOAI_PHAC_DO["PhacDoBac1"] = 1] = "PhacDoBac1";
    LOAI_PHAC_DO[LOAI_PHAC_DO["PhacDoBac2"] = 2] = "PhacDoBac2";
})(LOAI_PHAC_DO || (LOAI_PHAC_DO = {}));
class PhacDoDieuTriPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiPhacDo = data['loaiPhacDo'];
            this.isActive = data['isActive'];
            this.filter = data['filter'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PhacDoDieuTriPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiPhacDo'] = this.loaiPhacDo;
        data['isActive'] = this.isActive;
        data['filter'] = this.filter;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PhacDoDieuTriDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.loaiPhacDo = data['loaiPhacDo'];
            this.isActive = data['isActive'];
            this.trangThaiShow = data['trangThaiShow'];
            this.loaiPhacDoShow = data['loaiPhacDoShow'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PhacDoDieuTriDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['loaiPhacDo'] = this.loaiPhacDo;
        data['isActive'] = this.isActive;
        data['trangThaiShow'] = this.trangThaiShow;
        data['loaiPhacDoShow'] = this.loaiPhacDoShow;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfPhacDoDieuTriDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(PhacDoDieuTriDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPhacDoDieuTriDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class PhanNhomDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenKhongDau = data['tenKhongDau'];
            this.isActive = data['isActive'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PhanNhomDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenKhongDau'] = this.tenKhongDau;
        data['isActive'] = this.isActive;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfPhanNhomDuocDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(PhanNhomDuocDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPhanNhomDuocDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class PhongBanTreeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.parentId = data['parentId'];
            this.benhVienId = data['benhVienId'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PhongBanTreeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['parentId'] = this.parentId;
        data['benhVienId'] = this.benhVienId;
        data['id'] = this.id;
        return data;
    }
}
class PagedRequestPhongBanDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedRequestPhongBanDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PhongBanDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenEn = data['tenEn'];
            this.loaiPhongBanId = data['loaiPhongBanId'];
            this.cap = data['cap'];
            this.parentId = data['parentId'];
            this.loaiPhongBenhId = data['loaiPhongBenhId'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.loaiPhongBan = data['loaiPhongBan'];
            this.parentName = data['parentName'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PhongBanDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenEn'] = this.tenEn;
        data['loaiPhongBanId'] = this.loaiPhongBanId;
        data['cap'] = this.cap;
        data['parentId'] = this.parentId;
        data['loaiPhongBenhId'] = this.loaiPhongBenhId;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['loaiPhongBan'] = this.loaiPhongBan;
        data['parentName'] = this.parentName;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfPhongBanDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(PhongBanDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPhongBanDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class FetchBenhIcdSearchRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.chuongId = data['chuongId'];
            this.nhomId = data['nhomId'];
            this.isSelect = data['isSelect'];
            this.maBenh = data['maBenh'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FetchBenhIcdSearchRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['chuongId'] = this.chuongId;
        data['nhomId'] = this.nhomId;
        data['isSelect'] = this.isSelect;
        data['maBenh'] = this.maBenh;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfComboBoxDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(ComboBoxDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfComboBoxDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class BenhIcdSearchDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenNhom = data['tenNhom'];
            this.tenChuong = data['tenChuong'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BenhIcdSearchDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenNhom'] = this.tenNhom;
        data['tenChuong'] = this.tenChuong;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfBenhIcdSearchDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(BenhIcdSearchDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfBenhIcdSearchDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
var SelectOptionType;
(function (SelectOptionType) {
    SelectOptionType[SelectOptionType["GioiTinh"] = 0] = "GioiTinh";
    SelectOptionType[SelectOptionType["GioiTinhCon"] = 1] = "GioiTinhCon";
    SelectOptionType[SelectOptionType["CapDoDonViHanhChinh"] = 2] = "CapDoDonViHanhChinh";
    SelectOptionType[SelectOptionType["LoaiBenhVien"] = 3] = "LoaiBenhVien";
    SelectOptionType[SelectOptionType["NhanLucTinhTrang"] = 4] = "NhanLucTinhTrang";
    SelectOptionType[SelectOptionType["LoaiThuoc"] = 5] = "LoaiThuoc";
    SelectOptionType[SelectOptionType["DonViThoiGianSuDung"] = 6] = "DonViThoiGianSuDung";
    SelectOptionType[SelectOptionType["ToaThuocMauLoai"] = 7] = "ToaThuocMauLoai";
    SelectOptionType[SelectOptionType["NhomDvktBhytThuocVtyt"] = 8] = "NhomDvktBhytThuocVtyt";
    SelectOptionType[SelectOptionType["BenhNhanLoaiDiaChi"] = 9] = "BenhNhanLoaiDiaChi";
    SelectOptionType[SelectOptionType["NoiTuVong"] = 10] = "NoiTuVong";
    SelectOptionType[SelectOptionType["CapCoSo"] = 11] = "CapCoSo";
    SelectOptionType[SelectOptionType["LoaiPhacDo"] = 12] = "LoaiPhacDo";
    SelectOptionType[SelectOptionType["MucDoDapUng"] = 13] = "MucDoDapUng";
    SelectOptionType[SelectOptionType["LoaiPhieu"] = 14] = "LoaiPhieu";
    SelectOptionType[SelectOptionType["BHYTTuyen"] = 15] = "BHYTTuyen";
    SelectOptionType[SelectOptionType["KyBaoCao3081"] = 16] = "KyBaoCao3081";
    SelectOptionType[SelectOptionType["TrangThaiBaoCao3081"] = 17] = "TrangThaiBaoCao3081";
    SelectOptionType[SelectOptionType["KhamBenhNgoaiTruKetQuaKham"] = 18] = "KhamBenhNgoaiTruKetQuaKham";
    SelectOptionType[SelectOptionType["BenhTruyenNhiemPhanLoaiChanDoan"] = 19] = "BenhTruyenNhiemPhanLoaiChanDoan";
    SelectOptionType[SelectOptionType["BenhTruyenNhiemTiemChung"] = 20] = "BenhTruyenNhiemTiemChung";
    SelectOptionType[SelectOptionType["BenhTruyenNhiemTinhTrangTruongHopBenh"] = 21] = "BenhTruyenNhiemTinhTrangTruongHopBenh";
    SelectOptionType[SelectOptionType["BenhTruyenNhiemLoaiXetNghiem"] = 22] = "BenhTruyenNhiemLoaiXetNghiem";
    SelectOptionType[SelectOptionType["BenhTruyenNhiemLoaiCoSoDieuTri"] = 23] = "BenhTruyenNhiemLoaiCoSoDieuTri";
    SelectOptionType[SelectOptionType["BenhTruyenNhiemKetQuaXetNghiem"] = 24] = "BenhTruyenNhiemKetQuaXetNghiem";
    SelectOptionType[SelectOptionType["DoiTuongXetNghiem"] = 25] = "DoiTuongXetNghiem";
    SelectOptionType[SelectOptionType["TrangThaiXetNghiem"] = 26] = "TrangThaiXetNghiem";
    SelectOptionType[SelectOptionType["Tinh"] = 27] = "Tinh";
    SelectOptionType[SelectOptionType["TinhSession"] = 28] = "TinhSession";
    SelectOptionType[SelectOptionType["Huyen"] = 29] = "Huyen";
    SelectOptionType[SelectOptionType["HuyenSesion"] = 30] = "HuyenSesion";
    SelectOptionType[SelectOptionType["Xa"] = 31] = "Xa";
    SelectOptionType[SelectOptionType["Thon"] = 32] = "Thon";
    SelectOptionType[SelectOptionType["XaHuyenTinh"] = 33] = "XaHuyenTinh";
    SelectOptionType[SelectOptionType["HoatChat"] = 34] = "HoatChat";
    SelectOptionType[SelectOptionType["LoaiVatTu"] = 35] = "LoaiVatTu";
    SelectOptionType[SelectOptionType["NhomDuoc"] = 36] = "NhomDuoc";
    SelectOptionType[SelectOptionType["DonViTinh"] = 37] = "DonViTinh";
    SelectOptionType[SelectOptionType["DonViTinhCoBan"] = 38] = "DonViTinhCoBan";
    SelectOptionType[SelectOptionType["LoaiDuoc"] = 39] = "LoaiDuoc";
    SelectOptionType[SelectOptionType["PhanNhomDuoc"] = 40] = "PhanNhomDuoc";
    SelectOptionType[SelectOptionType["ChuongTrinh"] = 41] = "ChuongTrinh";
    SelectOptionType[SelectOptionType["NhomDichVuKyThuatBaoHiem"] = 42] = "NhomDichVuKyThuatBaoHiem";
    SelectOptionType[SelectOptionType["NhomDvktBhytThuoc"] = 43] = "NhomDvktBhytThuoc";
    SelectOptionType[SelectOptionType["PhongBan"] = 44] = "PhongBan";
    SelectOptionType[SelectOptionType["PhongBanByDichVu"] = 45] = "PhongBanByDichVu";
    SelectOptionType[SelectOptionType["NhomThamSoHeThong"] = 46] = "NhomThamSoHeThong";
    SelectOptionType[SelectOptionType["BenhVienHienTaiVaCapCon"] = 47] = "BenhVienHienTaiVaCapCon";
    SelectOptionType[SelectOptionType["TienTe"] = 48] = "TienTe";
    SelectOptionType[SelectOptionType["BacSiToaThuocMau"] = 49] = "BacSiToaThuocMau";
    SelectOptionType[SelectOptionType["LoaiGia"] = 50] = "LoaiGia";
    SelectOptionType[SelectOptionType["NhomGia"] = 51] = "NhomGia";
    SelectOptionType[SelectOptionType["DuocToaThuocMau"] = 52] = "DuocToaThuocMau";
    SelectOptionType[SelectOptionType["ICD"] = 53] = "ICD";
    SelectOptionType[SelectOptionType["ICDMAVN"] = 54] = "ICDMAVN";
    SelectOptionType[SelectOptionType["ChuongICD"] = 55] = "ChuongICD";
    SelectOptionType[SelectOptionType["NhomICD"] = 56] = "NhomICD";
    SelectOptionType[SelectOptionType["NhomDichVu"] = 57] = "NhomDichVu";
    SelectOptionType[SelectOptionType["DichVu"] = 58] = "DichVu";
    SelectOptionType[SelectOptionType["DichVuDaCauHinhPhongBan"] = 59] = "DichVuDaCauHinhPhongBan";
    SelectOptionType[SelectOptionType["DichVuTiepDon"] = 60] = "DichVuTiepDon";
    SelectOptionType[SelectOptionType["NhomDichVuXetNghiem"] = 61] = "NhomDichVuXetNghiem";
    SelectOptionType[SelectOptionType["NhomDichVuCDHA"] = 62] = "NhomDichVuCDHA";
    SelectOptionType[SelectOptionType["NhanLuc"] = 63] = "NhanLuc";
    SelectOptionType[SelectOptionType["LoaiKhuyetTat"] = 64] = "LoaiKhuyetTat";
    SelectOptionType[SelectOptionType["BienPhapPhaThai"] = 65] = "BienPhapPhaThai";
    SelectOptionType[SelectOptionType["BenhNhan"] = 66] = "BenhNhan";
    SelectOptionType[SelectOptionType["KhoDuoc"] = 67] = "KhoDuoc";
    SelectOptionType[SelectOptionType["HoGiaDinh"] = 68] = "HoGiaDinh";
    SelectOptionType[SelectOptionType["BenhTruyenNhiem"] = 69] = "BenhTruyenNhiem";
    SelectOptionType[SelectOptionType["BenhTruyenNhiemBaoCaoThang"] = 70] = "BenhTruyenNhiemBaoCaoThang";
    SelectOptionType[SelectOptionType["AttpCoSoSXKDThucPham"] = 71] = "AttpCoSoSXKDThucPham";
    SelectOptionType[SelectOptionType["DoiTuongBaoHiemYTe"] = 72] = "DoiTuongBaoHiemYTe";
    SelectOptionType[SelectOptionType["NhaCungCap"] = 73] = "NhaCungCap";
    SelectOptionType[SelectOptionType["DichVuKyThuat"] = 74] = "DichVuKyThuat";
    SelectOptionType[SelectOptionType["DichVuTheoNhomDichVu"] = 75] = "DichVuTheoNhomDichVu";
    SelectOptionType[SelectOptionType["MaDichVuKyThuat"] = 76] = "MaDichVuKyThuat";
    SelectOptionType[SelectOptionType["ChungTuSoLoNhap"] = 77] = "ChungTuSoLoNhap";
    SelectOptionType[SelectOptionType["LoaiGiaByDoiTuong"] = 78] = "LoaiGiaByDoiTuong";
    SelectOptionType[SelectOptionType["ChungTuSoLoNhapView"] = 79] = "ChungTuSoLoNhapView";
    SelectOptionType[SelectOptionType["ThietBi"] = 80] = "ThietBi";
    SelectOptionType[SelectOptionType["MauKetQuaChanDoanHinhAnh"] = 81] = "MauKetQuaChanDoanHinhAnh";
    SelectOptionType[SelectOptionType["KhoaNoiTru"] = 82] = "KhoaNoiTru";
    SelectOptionType[SelectOptionType["KhangNguyen"] = 83] = "KhangNguyen";
    SelectOptionType[SelectOptionType["VacXin"] = 84] = "VacXin";
    SelectOptionType[SelectOptionType["PhongBenhTrucThuocKhoa"] = 85] = "PhongBenhTrucThuocKhoa";
    SelectOptionType[SelectOptionType["GiuongBenhTrongPhongBenh"] = 86] = "GiuongBenhTrongPhongBenh";
    SelectOptionType[SelectOptionType["BenhVienCon"] = 87] = "BenhVienCon";
    SelectOptionType[SelectOptionType["GoiCuoc"] = 88] = "GoiCuoc";
    SelectOptionType[SelectOptionType["GoiCuocCascader"] = 89] = "GoiCuocCascader";
    SelectOptionType[SelectOptionType["KhuVucLuuTru"] = 90] = "KhuVucLuuTru";
    SelectOptionType[SelectOptionType["NhomDoiTuong"] = 91] = "NhomDoiTuong";
    SelectOptionType[SelectOptionType["LoaiPhongBan"] = 92] = "LoaiPhongBan";
    SelectOptionType[SelectOptionType["NhomTSHeThong"] = 93] = "NhomTSHeThong";
    SelectOptionType[SelectOptionType["LoaiDichVu"] = 94] = "LoaiDichVu";
    SelectOptionType[SelectOptionType["DanToc"] = 95] = "DanToc";
    SelectOptionType[SelectOptionType["ChucVu"] = 96] = "ChucVu";
    SelectOptionType[SelectOptionType["ChucDanh"] = 97] = "ChucDanh";
    SelectOptionType[SelectOptionType["LoaiNhanLuc"] = 98] = "LoaiNhanLuc";
    SelectOptionType[SelectOptionType["TrinhDoChuyenMon"] = 99] = "TrinhDoChuyenMon";
    SelectOptionType[SelectOptionType["LoaiChuyenNganh"] = 100] = "LoaiChuyenNganh";
    SelectOptionType[SelectOptionType["QuocGia"] = 101] = "QuocGia";
    SelectOptionType[SelectOptionType["LoaiPhongBenh"] = 102] = "LoaiPhongBenh";
    SelectOptionType[SelectOptionType["GD_HINHTHUC"] = 103] = "GD_HINHTHUC";
    SelectOptionType[SelectOptionType["GD_PHUONGTIEN"] = 104] = "GD_PHUONGTIEN";
    SelectOptionType[SelectOptionType["LoaiBenhAnNgoaiTru"] = 105] = "LoaiBenhAnNgoaiTru";
    SelectOptionType[SelectOptionType["KhoaDieuTri"] = 106] = "KhoaDieuTri";
    SelectOptionType[SelectOptionType["DuocPhamNguonNhapHang"] = 107] = "DuocPhamNguonNhapHang";
    SelectOptionType[SelectOptionType["DuocPhamNguonNhapHangDuTruThuoc"] = 108] = "DuocPhamNguonNhapHangDuTruThuoc";
    SelectOptionType[SelectOptionType["PhongBenh"] = 109] = "PhongBenh";
    SelectOptionType[SelectOptionType["NoiCapCanCuoc"] = 110] = "NoiCapCanCuoc";
    SelectOptionType[SelectOptionType["DonViTaiSan"] = 111] = "DonViTaiSan";
    SelectOptionType[SelectOptionType["LoaiTaiSan"] = 112] = "LoaiTaiSan";
    SelectOptionType[SelectOptionType["TrangThaiTaiSan"] = 113] = "TrangThaiTaiSan";
    SelectOptionType[SelectOptionType["LyDoGiamTaiSan"] = 114] = "LyDoGiamTaiSan";
    SelectOptionType[SelectOptionType["DuongDung"] = 115] = "DuongDung";
    SelectOptionType[SelectOptionType["KieuHo"] = 116] = "KieuHo";
    SelectOptionType[SelectOptionType["XetNghiemLamQueThu"] = 117] = "XetNghiemLamQueThu";
    SelectOptionType[SelectOptionType["KetQuaDieuTri"] = 118] = "KetQuaDieuTri";
    SelectOptionType[SelectOptionType["PhamLoaiBenhNhan"] = 119] = "PhamLoaiBenhNhan";
    SelectOptionType[SelectOptionType["TonGiao"] = 120] = "TonGiao";
    SelectOptionType[SelectOptionType["NgheNghiep"] = 121] = "NgheNghiep";
    SelectOptionType[SelectOptionType["QuanHeChuHo"] = 122] = "QuanHeChuHo";
    SelectOptionType[SelectOptionType["QuanHeChuHoVaChuHo"] = 123] = "QuanHeChuHoVaChuHo";
    SelectOptionType[SelectOptionType["TinhTrangHonNhan"] = 124] = "TinhTrangHonNhan";
    SelectOptionType[SelectOptionType["TinhTrangLamViec"] = 125] = "TinhTrangLamViec";
    SelectOptionType[SelectOptionType["TrinhDoHocVan"] = 126] = "TrinhDoHocVan";
    SelectOptionType[SelectOptionType["BienPhapTranhThai"] = 127] = "BienPhapTranhThai";
    SelectOptionType[SelectOptionType["LoaiBenh"] = 128] = "LoaiBenh";
    SelectOptionType[SelectOptionType["LoaiKhoDuoc"] = 129] = "LoaiKhoDuoc";
    SelectOptionType[SelectOptionType["TinhTrangHienTai"] = 130] = "TinhTrangHienTai";
    SelectOptionType[SelectOptionType["LoaiNha"] = 131] = "LoaiNha";
    SelectOptionType[SelectOptionType["NguonNuoc"] = 132] = "NguonNuoc";
    SelectOptionType[SelectOptionType["LoaiNhaVeSinh"] = 133] = "LoaiNhaVeSinh";
    SelectOptionType[SelectOptionType["XuLyRac"] = 134] = "XuLyRac";
    SelectOptionType[SelectOptionType["LyDoPhieuThu"] = 135] = "LyDoPhieuThu";
    SelectOptionType[SelectOptionType["LyDoPhieuChi"] = 136] = "LyDoPhieuChi";
    SelectOptionType[SelectOptionType["DiaDiemAnUong"] = 137] = "DiaDiemAnUong";
    SelectOptionType[SelectOptionType["TrieuChung"] = 138] = "TrieuChung";
    SelectOptionType[SelectOptionType["LayMau"] = 139] = "LayMau";
    SelectOptionType[SelectOptionType["LoaiBienLai"] = 140] = "LoaiBienLai";
    SelectOptionType[SelectOptionType["HinhThucThanhToan"] = 141] = "HinhThucThanhToan";
})(SelectOptionType || (SelectOptionType = {}));
class SelectOptionInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.type = data['type'];
            this.cascader = data['cascader'];
            this.benhVienId = data['benhVienId'];
            this.cascaderId = data['cascaderId'];
            this.keyCache = data['keyCache'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SelectOptionInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['type'] = this.type;
        data['cascader'] = this.cascader;
        data['benhVienId'] = this.benhVienId;
        data['cascaderId'] = this.cascaderId;
        data['keyCache'] = this.keyCache;
        return data;
    }
}
var SelectSearchServerType;
(function (SelectSearchServerType) {
    SelectSearchServerType[SelectSearchServerType["Huyen"] = 0] = "Huyen";
    SelectSearchServerType[SelectSearchServerType["Xa"] = 1] = "Xa";
})(SelectSearchServerType || (SelectSearchServerType = {}));
class SelectSearchServerDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.value = data['value'];
            this.valueId = data['valueId'];
            this.type = data['type'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SelectSearchServerDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['value'] = this.value;
        data['valueId'] = this.valueId;
        data['type'] = this.type;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedRequestSoKhamDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedRequestSoKhamDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class SoKhamDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SoKhamDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfSoKhamDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(SoKhamDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSoKhamDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class StaticRolePagedInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiBenhVien = data['loaiBenhVien'];
            this.isAdminTuyen = data['isAdminTuyen'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StaticRolePagedInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiBenhVien'] = this.loaiBenhVien;
        data['isAdminTuyen'] = this.isAdminTuyen;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class StaticRolePagedOutputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.isAdminTuyen = data['isAdminTuyen'];
            this.listLoaiCoSo = data['listLoaiCoSo'];
            if (Array.isArray(data['loaiBenhVien'])) {
                this.loaiBenhVien = [];
                for (let item of data['loaiBenhVien'])
                    this.loaiBenhVien.push(item);
            }
            if (Array.isArray(data['listTenLoaiCoSo'])) {
                this.listTenLoaiCoSo = [];
                for (let item of data['listTenLoaiCoSo'])
                    this.listTenLoaiCoSo.push(item);
            }
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StaticRolePagedOutputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['isAdminTuyen'] = this.isAdminTuyen;
        data['listLoaiCoSo'] = this.listLoaiCoSo;
        if (Array.isArray(this.loaiBenhVien)) {
            data['loaiBenhVien'] = [];
            for (let item of this.loaiBenhVien)
                data['loaiBenhVien'].push(item);
        }
        if (Array.isArray(this.listTenLoaiCoSo)) {
            data['listTenLoaiCoSo'] = [];
            for (let item of this.listTenLoaiCoSo)
                data['listTenLoaiCoSo'].push(item);
        }
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfStaticRolePagedOutputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(StaticRolePagedOutputDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfStaticRolePagedOutputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class SysRoleDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.roleId = data['roleId'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.isAdminTuyen = data['isAdminTuyen'];
            this.isStatic = data['isStatic'];
            this.listLoaiCoSo = data['listLoaiCoSo'];
            if (Array.isArray(data['loaiBenhVien'])) {
                this.loaiBenhVien = [];
                for (let item of data['loaiBenhVien'])
                    this.loaiBenhVien.push(item);
            }
            this.benhVienId = data['benhVienId'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SysRoleDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['roleId'] = this.roleId;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['isAdminTuyen'] = this.isAdminTuyen;
        data['isStatic'] = this.isStatic;
        data['listLoaiCoSo'] = this.listLoaiCoSo;
        if (Array.isArray(this.loaiBenhVien)) {
            data['loaiBenhVien'] = [];
            for (let item of this.loaiBenhVien)
                data['loaiBenhVien'].push(item);
        }
        data['benhVienId'] = this.benhVienId;
        data['id'] = this.id;
        return data;
    }
}
class CommonResultDtoOfSysRoleDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isSuccessful = data['isSuccessful'];
            this.errorCode = data['errorCode'];
            this.errorMessage = data['errorMessage'];
            this.dataResult = data['dataResult'] ? SysRoleDto.fromJS(data['dataResult']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CommonResultDtoOfSysRoleDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isSuccessful'] = this.isSuccessful;
        data['errorCode'] = this.errorCode;
        data['errorMessage'] = this.errorMessage;
        data['dataResult'] = this.dataResult ? this.dataResult.toJSON() : undefined;
        return data;
    }
}
class SetListPermissionAbleForAdminRoleRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.sysRoleId = data['sysRoleId'];
            if (Array.isArray(data['permissionNames'])) {
                this.permissionNames = [];
                for (let item of data['permissionNames'])
                    this.permissionNames.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SetListPermissionAbleForAdminRoleRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['sysRoleId'] = this.sysRoleId;
        if (Array.isArray(this.permissionNames)) {
            data['permissionNames'] = [];
            for (let item of this.permissionNames)
                data['permissionNames'].push(item);
        }
        return data;
    }
}
class SysPermissionAdminDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.sysRoleId = data['sysRoleId'];
            this.name = data['name'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SysPermissionAdminDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['sysRoleId'] = this.sysRoleId;
        data['name'] = this.name;
        data['id'] = this.id;
        return data;
    }
}
class SysPermissionLoaiBenhVienEntity {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiBenhVien = data['loaiBenhVien'];
            this.name = data['name'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SysPermissionLoaiBenhVienEntity();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiBenhVien'] = this.loaiBenhVien;
        data['name'] = this.name;
        data['id'] = this.id;
        return data;
    }
}
class SetPermissionLoaiBenhVienRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loaiBenhVien = data['loaiBenhVien'];
            if (Array.isArray(data['permissionNames'])) {
                this.permissionNames = [];
                for (let item of data['permissionNames'])
                    this.permissionNames.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SetPermissionLoaiBenhVienRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loaiBenhVien'] = this.loaiBenhVien;
        if (Array.isArray(this.permissionNames)) {
            data['permissionNames'] = [];
            for (let item of this.permissionNames)
                data['permissionNames'].push(item);
        }
        return data;
    }
}
class SetPermissionForSysRoleRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.sysRoleId = data['sysRoleId'];
            if (Array.isArray(data['permissionNames'])) {
                this.permissionNames = [];
                for (let item of data['permissionNames'])
                    this.permissionNames.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SetPermissionForSysRoleRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['sysRoleId'] = this.sysRoleId;
        if (Array.isArray(this.permissionNames)) {
            data['permissionNames'] = [];
            for (let item of this.permissionNames)
                data['permissionNames'].push(item);
        }
        return data;
    }
}
class SysRolePermissionDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.sysRoleId = data['sysRoleId'];
            if (Array.isArray(data['permissionNames'])) {
                this.permissionNames = [];
                for (let item of data['permissionNames'])
                    this.permissionNames.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SysRolePermissionDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['sysRoleId'] = this.sysRoleId;
        if (Array.isArray(this.permissionNames)) {
            data['permissionNames'] = [];
            for (let item of this.permissionNames)
                data['permissionNames'].push(item);
        }
        return data;
    }
}
class RoleCoSoPagedInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RoleCoSoPagedInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfSysRoleDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(SysRoleDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSysRoleDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class CommonResultDtoOfInt64 {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isSuccessful = data['isSuccessful'];
            this.errorCode = data['errorCode'];
            this.errorMessage = data['errorMessage'];
            this.dataResult = data['dataResult'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CommonResultDtoOfInt64();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isSuccessful'] = this.isSuccessful;
        data['errorCode'] = this.errorCode;
        data['errorMessage'] = this.errorMessage;
        data['dataResult'] = this.dataResult;
        return data;
    }
}
class GetListUserAdminCoSoRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.tinhId = data['tinhId'];
            this.huyenId = data['huyenId'];
            this.xaId = data['xaId'];
            this.benhVienId = data['benhVienId'];
            this.id = data['id'];
            this.sysRoleId = data['sysRoleId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetListUserAdminCoSoRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['tinhId'] = this.tinhId;
        data['huyenId'] = this.huyenId;
        data['xaId'] = this.xaId;
        data['benhVienId'] = this.benhVienId;
        data['id'] = this.id;
        data['sysRoleId'] = this.sysRoleId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class SysUserDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.userId = data['userId'];
            this.userName = data['userName'];
            this.ma = data['ma'];
            this.hoTen = data['hoTen'];
            this.hoTenKhongDau = data['hoTenKhongDau'];
            this.email = data['email'];
            this.soDienThoai = data['soDienThoai'];
            this.nhanLucId = data['nhanLucId'];
            this.benhVienId = data['benhVienId'];
            this.phongBanId = data['phongBanId'];
            this.listRoleName = data['listRoleName'];
            this.tenBenhVien = data['tenBenhVien'];
            this.sysRoleAdminId = data['sysRoleAdminId'];
            this.tenQuyen = data['tenQuyen'];
            this.isCreator = data['isCreator'];
            this.isLock = data['isLock'];
            this.tinhId = data['tinhId'];
            this.huyenId = data['huyenId'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['userId'] = this.userId;
        data['userName'] = this.userName;
        data['ma'] = this.ma;
        data['hoTen'] = this.hoTen;
        data['hoTenKhongDau'] = this.hoTenKhongDau;
        data['email'] = this.email;
        data['soDienThoai'] = this.soDienThoai;
        data['nhanLucId'] = this.nhanLucId;
        data['benhVienId'] = this.benhVienId;
        data['phongBanId'] = this.phongBanId;
        data['listRoleName'] = this.listRoleName;
        data['tenBenhVien'] = this.tenBenhVien;
        data['sysRoleAdminId'] = this.sysRoleAdminId;
        data['tenQuyen'] = this.tenQuyen;
        data['isCreator'] = this.isCreator;
        data['isLock'] = this.isLock;
        data['tinhId'] = this.tinhId;
        data['huyenId'] = this.huyenId;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfSysUserDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(SysUserDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSysUserDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class CreateSysUserDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.hoTen = data['hoTen'];
            this.nhanLucId = data['nhanLucId'];
            this.email = data['email'];
            this.soDienThoai = data['soDienThoai'];
            this.matKhau = data['matKhau'];
            this.benhVienId = data['benhVienId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSysUserDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['hoTen'] = this.hoTen;
        data['nhanLucId'] = this.nhanLucId;
        data['email'] = this.email;
        data['soDienThoai'] = this.soDienThoai;
        data['matKhau'] = this.matKhau;
        data['benhVienId'] = this.benhVienId;
        return data;
    }
}
class TaoTaiKhoanAdminCoSoInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.benhVienId = data['benhVienId'];
            this.sysRoleId = data['sysRoleId'];
            this.userDto = data['userDto'] ? CreateSysUserDto.fromJS(data['userDto']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TaoTaiKhoanAdminCoSoInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['benhVienId'] = this.benhVienId;
        data['sysRoleId'] = this.sysRoleId;
        data['userDto'] = this.userDto ? this.userDto.toJSON() : undefined;
        return data;
    }
}
class CommonResultDtoOfSysUserDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isSuccessful = data['isSuccessful'];
            this.errorCode = data['errorCode'];
            this.errorMessage = data['errorMessage'];
            this.dataResult = data['dataResult'] ? SysUserDto.fromJS(data['dataResult']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CommonResultDtoOfSysUserDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isSuccessful'] = this.isSuccessful;
        data['errorCode'] = this.errorCode;
        data['errorMessage'] = this.errorMessage;
        data['dataResult'] = this.dataResult ? this.dataResult.toJSON() : undefined;
        return data;
    }
}
class UpdateUserDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.hoTen = data['hoTen'];
            this.nhanLucId = data['nhanLucId'];
            this.email = data['email'];
            this.soDienThoai = data['soDienThoai'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['hoTen'] = this.hoTen;
        data['nhanLucId'] = this.nhanLucId;
        data['email'] = this.email;
        data['soDienThoai'] = this.soDienThoai;
        return data;
    }
}
class DoiMatKhauRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.userExtensionId = data['userExtensionId'];
            this.matKhauMoi = data['matKhauMoi'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DoiMatKhauRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['userExtensionId'] = this.userExtensionId;
        data['matKhauMoi'] = this.matKhauMoi;
        return data;
    }
}
class CommonResultDtoOfGuid {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.isSuccessful = data['isSuccessful'];
            this.errorCode = data['errorCode'];
            this.errorMessage = data['errorMessage'];
            this.dataResult = data['dataResult'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CommonResultDtoOfGuid();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['isSuccessful'] = this.isSuccessful;
        data['errorCode'] = this.errorCode;
        data['errorMessage'] = this.errorMessage;
        data['dataResult'] = this.dataResult;
        return data;
    }
}
class GetListUserCoSoRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.sysRoleId = data['sysRoleId'];
            this.id = data['id'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GetListUserCoSoRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['sysRoleId'] = this.sysRoleId;
        data['id'] = this.id;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class RoleAbleDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.sysRoleId = data['sysRoleId'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.isCheck = data['isCheck'];
            this.isStatic = data['isStatic'];
            this.isAdminTuyen = data['isAdminTuyen'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RoleAbleDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['sysRoleId'] = this.sysRoleId;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['isCheck'] = this.isCheck;
        data['isStatic'] = this.isStatic;
        data['isAdminTuyen'] = this.isAdminTuyen;
        return data;
    }
}
class SetRoleForUserRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.userExtensionId = data['userExtensionId'];
            if (Array.isArray(data['listSysRoleId'])) {
                this.listSysRoleId = [];
                for (let item of data['listSysRoleId'])
                    this.listSysRoleId.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SetRoleForUserRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['userExtensionId'] = this.userExtensionId;
        if (Array.isArray(this.listSysRoleId)) {
            data['listSysRoleId'] = [];
            for (let item of this.listSysRoleId)
                data['listSysRoleId'].push(item);
        }
        return data;
    }
}
class SysUserRoleEntity {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.sysRoleId = data['sysRoleId'];
            this.userExtensionId = data['userExtensionId'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserRoleEntity();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['sysRoleId'] = this.sysRoleId;
        data['userExtensionId'] = this.userExtensionId;
        data['id'] = this.id;
        return data;
    }
}
class CauHinhSysAppPrivateRoleItemDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.isCheck = data['isCheck'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CauHinhSysAppPrivateRoleItemDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['isCheck'] = this.isCheck;
        return data;
    }
}
class DanhSachCauHinhSysAppPrivateRoleDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            if (Array.isArray(data['listOfPhongBan'])) {
                this.listOfPhongBan = [];
                for (let item of data['listOfPhongBan'])
                    this.listOfPhongBan.push(CauHinhSysAppPrivateRoleItemDto.fromJS(item));
            }
            if (Array.isArray(data['listOfKhoDuoc'])) {
                this.listOfKhoDuoc = [];
                for (let item of data['listOfKhoDuoc'])
                    this.listOfKhoDuoc.push(CauHinhSysAppPrivateRoleItemDto.fromJS(item));
            }
            if (Array.isArray(data['listOfCanLamSang'])) {
                this.listOfCanLamSang = [];
                for (let item of data['listOfCanLamSang'])
                    this.listOfCanLamSang.push(CauHinhSysAppPrivateRoleItemDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DanhSachCauHinhSysAppPrivateRoleDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listOfPhongBan)) {
            data['listOfPhongBan'] = [];
            for (let item of this.listOfPhongBan)
                data['listOfPhongBan'].push(item.toJSON());
        }
        if (Array.isArray(this.listOfKhoDuoc)) {
            data['listOfKhoDuoc'] = [];
            for (let item of this.listOfKhoDuoc)
                data['listOfKhoDuoc'].push(item.toJSON());
        }
        if (Array.isArray(this.listOfCanLamSang)) {
            data['listOfCanLamSang'] = [];
            for (let item of this.listOfCanLamSang)
                data['listOfCanLamSang'].push(item.toJSON());
        }
        return data;
    }
}
class SysAppPrivateRoleDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.groupCode = data['groupCode'];
            this.code = data['code'];
            this.userId = data['userId'];
            this.userV1Id = data['userV1Id'];
            this.benhVienId = data['benhVienId'];
            this.valueId = data['valueId'];
            this.valueCode = data['valueCode'];
            this.valueName = data['valueName'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppPrivateRoleDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['groupCode'] = this.groupCode;
        data['code'] = this.code;
        data['userId'] = this.userId;
        data['userV1Id'] = this.userV1Id;
        data['benhVienId'] = this.benhVienId;
        data['valueId'] = this.valueId;
        data['valueCode'] = this.valueCode;
        data['valueName'] = this.valueName;
        data['id'] = this.id;
        return data;
    }
}
class LuuSysAppPrivateRoleUserRequset {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.userExtensionId = data['userExtensionId'];
            this.code = data['code'];
            if (Array.isArray(data['dtos'])) {
                this.dtos = [];
                for (let item of data['dtos'])
                    this.dtos.push(SysAppPrivateRoleDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new LuuSysAppPrivateRoleUserRequset();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['userExtensionId'] = this.userExtensionId;
        data['code'] = this.code;
        if (Array.isArray(this.dtos)) {
            data['dtos'] = [];
            for (let item of this.dtos)
                data['dtos'].push(item.toJSON());
        }
        return data;
    }
}
class ParamUpdateValueThamSoBenhVien {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.value = data['value'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ParamUpdateValueThamSoBenhVien();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['value'] = this.value;
        return data;
    }
}
class ParamsUpdateChangedThamSoBenhVien {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.value = data['value'];
            this.dataFieldChanged = data['dataFieldChanged'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ParamsUpdateChangedThamSoBenhVien();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['value'] = this.value;
        data['dataFieldChanged'] = this.dataFieldChanged;
        return data;
    }
}
class ThamSoBenhVienPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.groupCodeId = data['groupCodeId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ThamSoBenhVienPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['groupCodeId'] = this.groupCodeId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class SysAppSettingsDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.code = data['code'];
            this.value = data['value'];
            this.description = data['description'];
            this.locked = data['locked'];
            this.systemEditonOnly = data['systemEditonOnly'];
            this.groupCode = data['groupCode'];
            this.dataType = data['dataType'];
            this.language = data['language'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.tenNhom = data['tenNhom'];
            this.groupCodeId = data['groupCodeId'];
            this.tuyenBenhVien = data['tuyenBenhVien'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppSettingsDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['code'] = this.code;
        data['value'] = this.value;
        data['description'] = this.description;
        data['locked'] = this.locked;
        data['systemEditonOnly'] = this.systemEditonOnly;
        data['groupCode'] = this.groupCode;
        data['dataType'] = this.dataType;
        data['language'] = this.language;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['tenNhom'] = this.tenNhom;
        data['groupCodeId'] = this.groupCodeId;
        data['tuyenBenhVien'] = this.tuyenBenhVien;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfSysAppSettingsDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(SysAppSettingsDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSysAppSettingsDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class ThamSoHeThongPagedRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nhomThamSoId = data['nhomThamSoId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ThamSoHeThongPagedRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nhomThamSoId'] = this.nhomThamSoId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class ThamSoHeThongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.code = data['code'];
            this.value = data['value'];
            this.description = data['description'];
            this.locked = data['locked'];
            this.systemEditonOnly = data['systemEditonOnly'];
            this.groupCode = data['groupCode'];
            this.dataType = data['dataType'];
            this.language = data['language'];
            this.isActive = data['isActive'];
            this.nhomThamSoId = data['nhomThamSoId'];
            this.nhomThamSo = data['nhomThamSo'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ThamSoHeThongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['code'] = this.code;
        data['value'] = this.value;
        data['description'] = this.description;
        data['locked'] = this.locked;
        data['systemEditonOnly'] = this.systemEditonOnly;
        data['groupCode'] = this.groupCode;
        data['dataType'] = this.dataType;
        data['language'] = this.language;
        data['isActive'] = this.isActive;
        data['nhomThamSoId'] = this.nhomThamSoId;
        data['nhomThamSo'] = this.nhomThamSo;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfThamSoHeThongDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(ThamSoHeThongDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfThamSoHeThongDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class PagedRequestThietBiDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedRequestThietBiDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class ThietBiDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenKhongDau = data['tenKhongDau'];
            this.nhomThietBiId = data['nhomThietBiId'];
            this.phongBanId = data['phongBanId'];
            this.isActive = data['isActive'];
            this.benhVienId = data['benhVienId'];
            this.tenPhongBan = data['tenPhongBan'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ThietBiDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenKhongDau'] = this.tenKhongDau;
        data['nhomThietBiId'] = this.nhomThietBiId;
        data['phongBanId'] = this.phongBanId;
        data['isActive'] = this.isActive;
        data['benhVienId'] = this.benhVienId;
        data['tenPhongBan'] = this.tenPhongBan;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfThietBiDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(ThietBiDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfThietBiDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class TienTeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tenEn = data['tenEn'];
            this.isActive = data['isActive'];
            this.isExists = data['isExists'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TienTeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tenEn'] = this.tenEn;
        data['isActive'] = this.isActive;
        data['isExists'] = this.isExists;
        data['id'] = this.id;
        return data;
    }
}
class TienTePagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TienTePagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfTienTeDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(TienTeDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTienTeDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class TienTeTyGiaPagedRequestDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.tienTeId = data['tienTeId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TienTeTyGiaPagedRequestDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['tienTeId'] = this.tienTeId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class TienTeTyGiaDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.tienTeId = data['tienTeId'];
            this.tyGiaVND = data['tyGiaVND'];
            this.tyGiaUSD = data['tyGiaUSD'];
            this.benhVienId = data['benhVienId'];
            this.isActive = data['isActive'];
            this.tenTienTe = data['tenTienTe'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TienTeTyGiaDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['tienTeId'] = this.tienTeId;
        data['tyGiaVND'] = this.tyGiaVND;
        data['tyGiaUSD'] = this.tyGiaUSD;
        data['benhVienId'] = this.benhVienId;
        data['isActive'] = this.isActive;
        data['tenTienTe'] = this.tenTienTe;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfTienTeTyGiaDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(TienTeTyGiaDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTienTeTyGiaDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class PagedRequestToaThuocMauDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.loai = data['loai'];
            this.bacSiId = data['bacSiId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedRequestToaThuocMauDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['loai'] = this.loai;
        data['bacSiId'] = this.bacSiId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class DSToaThuocMauDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.bacSiId = data['bacSiId'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.maICD = data['maICD'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DSToaThuocMauDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['bacSiId'] = this.bacSiId;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['maICD'] = this.maICD;
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfDSToaThuocMauDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(DSToaThuocMauDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDSToaThuocMauDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class ToaThuocMauDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.bacSiId = data['bacSiId'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.duocId = data['duocId'];
            this.sang = data['sang'];
            this.trua = data['trua'];
            this.chieu = data['chieu'];
            this.toi = data['toi'];
            this.soNgay = data['soNgay'];
            this.soLuong = data['soLuong'];
            this.duongDungId = data['duongDungId'];
            this.loai = data['loai'];
            this.maICD = data['maICD'];
            this.benhVienId = data['benhVienId'];
            this.maDuoc = data['maDuoc'];
            this.tenDuoc = data['tenDuoc'];
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ToaThuocMauDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['bacSiId'] = this.bacSiId;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['duocId'] = this.duocId;
        data['sang'] = this.sang;
        data['trua'] = this.trua;
        data['chieu'] = this.chieu;
        data['toi'] = this.toi;
        data['soNgay'] = this.soNgay;
        data['soLuong'] = this.soLuong;
        data['duongDungId'] = this.duongDungId;
        data['loai'] = this.loai;
        data['maICD'] = this.maICD;
        data['benhVienId'] = this.benhVienId;
        data['maDuoc'] = this.maDuoc;
        data['tenDuoc'] = this.tenDuoc;
        data['id'] = this.id;
        return data;
    }
}
class PagedRequestToaThuocMauChiTietDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.bacSiId = data['bacSiId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedRequestToaThuocMauChiTietDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['bacSiId'] = this.bacSiId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class PagedResultDtoOfToaThuocMauDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(ToaThuocMauDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfToaThuocMauDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class BenhVienSessionDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.tinhId = data['tinhId'];
            this.huyenId = data['huyenId'];
            this.xaId = data['xaId'];
            this.tuyenBenhVien = data['tuyenBenhVien'];
            this.loaiBenhVien = data['loaiBenhVien'];
            this.benhVienChaId = data['benhVienChaId'];
            this.diaChi = data['diaChi'];
            this.coQuanChuQuanId = data['coQuanChuQuanId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new BenhVienSessionDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['tinhId'] = this.tinhId;
        data['huyenId'] = this.huyenId;
        data['xaId'] = this.xaId;
        data['tuyenBenhVien'] = this.tuyenBenhVien;
        data['loaiBenhVien'] = this.loaiBenhVien;
        data['benhVienChaId'] = this.benhVienChaId;
        data['diaChi'] = this.diaChi;
        data['coQuanChuQuanId'] = this.coQuanChuQuanId;
        return data;
    }
}
class NhanLucSessionDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.id = data['id'];
            this.ma = data['ma'];
            this.ten = data['ten'];
            this.ngaySinh = data['ngaySinh'] ? moment(data['ngaySinh'].toString()) : undefined;
            this.gioiTinh = data['gioiTinh'];
            this.phongBanId = data['phongBanId'];
            this.chucVuId = data['chucVuId'];
            this.chucDanhId = data['chucDanhId'];
            this.loaiNhanLucId = data['loaiNhanLucId'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new NhanLucSessionDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['id'] = this.id;
        data['ma'] = this.ma;
        data['ten'] = this.ten;
        data['ngaySinh'] = this.ngaySinh ? this.ngaySinh.toISOString() : undefined;
        data['gioiTinh'] = this.gioiTinh;
        data['phongBanId'] = this.phongBanId;
        data['chucVuId'] = this.chucVuId;
        data['chucDanhId'] = this.chucDanhId;
        data['loaiNhanLucId'] = this.loaiNhanLucId;
        return data;
    }
}
class UserSessionDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.userId = data['userId'];
            this.benhVienId = data['benhVienId'];
            this.nhanLucId = data['nhanLucId'];
            this.benhVienDto = data['benhVienDto'] ? BenhVienSessionDto.fromJS(data['benhVienDto']) : undefined;
            this.nhanLucDto = data['nhanLucDto'] ? NhanLucSessionDto.fromJS(data['nhanLucDto']) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UserSessionDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['userId'] = this.userId;
        data['benhVienId'] = this.benhVienId;
        data['nhanLucId'] = this.nhanLucId;
        data['benhVienDto'] = this.benhVienDto ? this.benhVienDto.toJSON() : undefined;
        data['nhanLucDto'] = this.nhanLucDto ? this.nhanLucDto.toJSON() : undefined;
        return data;
    }
}
class PagedVacXinInputDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.nhomVacXinId = data['nhomVacXinId'];
            this.filter = data['filter'];
            this.isActive = data['isActive'];
            this.exportMode = data['exportMode'];
            this.outputFileExtension = data['outputFileExtension'];
            this.sorting = data['sorting'];
            this.skipCount = data['skipCount'];
            this.maxResultCount = data['maxResultCount'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedVacXinInputDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['nhomVacXinId'] = this.nhomVacXinId;
        data['filter'] = this.filter;
        data['isActive'] = this.isActive;
        data['exportMode'] = this.exportMode;
        data['outputFileExtension'] = this.outputFileExtension;
        data['sorting'] = this.sorting;
        data['skipCount'] = this.skipCount;
        data['maxResultCount'] = this.maxResultCount;
        return data;
    }
}
class VacXinDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.ten = data['ten'];
            this.tenDayDu = data['tenDayDu'];
            this.cvx = data['cvx'];
            this.strLoai = data['strLoai'];
            this.loai = data['loai'];
            this.tcmr = data['tcmr'];
            this.duongDung = data['duongDung'];
            this.vacXinKhangNguyenId = data['vacXinKhangNguyenId'];
            this.tenKhangNguyen = data['tenKhangNguyen'];
            if (Array.isArray(data['listKhangNguyen'])) {
                this.listKhangNguyen = [];
                for (let item of data['listKhangNguyen'])
                    this.listKhangNguyen.push(item);
            }
            this.id = data['id'];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VacXinDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['ten'] = this.ten;
        data['tenDayDu'] = this.tenDayDu;
        data['cvx'] = this.cvx;
        data['strLoai'] = this.strLoai;
        data['loai'] = this.loai;
        data['tcmr'] = this.tcmr;
        data['duongDung'] = this.duongDung;
        data['vacXinKhangNguyenId'] = this.vacXinKhangNguyenId;
        data['tenKhangNguyen'] = this.tenKhangNguyen;
        if (Array.isArray(this.listKhangNguyen)) {
            data['listKhangNguyen'] = [];
            for (let item of this.listKhangNguyen)
                data['listKhangNguyen'].push(item);
        }
        data['id'] = this.id;
        return data;
    }
}
class PagedResultDtoOfVacXinDto {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(data) {
        if (data) {
            this.totalCount = data['totalCount'];
            if (Array.isArray(data['items'])) {
                this.items = [];
                for (let item of data['items'])
                    this.items.push(VacXinDto.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVacXinDto();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data['totalCount'] = this.totalCount;
        if (Array.isArray(this.items)) {
            data['items'] = [];
            for (let item of this.items)
                data['items'].push(item.toJSON());
        }
        return data;
    }
}
class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return throwError(result);
    else
        return throwError(new ApiException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new Observable((observer) => {
        if (!blob) {
            observer.next('');
            observer.complete();
        }
        else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

class OfComponent {
    constructor(selectSp, searchSp) {
        this.selectSp = selectSp;
        this.searchSp = searchSp;
        this.formDisable$ = new BehaviorSubject(false);
        this.ngaySinhMin$ = new BehaviorSubject(new Date(2021, 2, 27));
        this.danTocOption$ = new BehaviorSubject([{
                displayText: 'Kinh',
                value: '1'
            }, {
                displayText: 'Mông',
                value: '2'
            }]);
        this.schemaModel = new OfSchemaModel({
            fields: [
                new OfTextModel({
                    label: 'Mã',
                    dataField: 'ma',
                    required: true,
                    validations: [
                        {
                            name: 'email'
                        }
                    ],
                    disabled: true
                }),
                new OfTextModel({
                    label: 'Họ tên',
                    dataField: 'tenDayDu',
                    required: true,
                    disabledAsync: this.formDisable$
                }),
                new OfSelectModel({
                    label: 'Giới tính',
                    dataField: 'gioiTinhId',
                    value: 1,
                    options: [
                        { displayText: 'Nam', value: '1' },
                        { displayText: 'Nữ', value: '2' }
                    ]
                }),
                new OfSelectAsyncModel({
                    label: 'Dân tộc async',
                    dataField: 'danToc',
                    value: 1,
                    optionsAsync: this.danTocOption$
                }),
                new OfSelectApiModel({
                    label: 'Tỉnh',
                    dataField: 'tinhId',
                    functionService: this.selectSp.getoptions({
                        type: SelectOptionType.Tinh
                    }),
                    keyCache: 'tinh'
                }),
                new OfSelectCascadeModel({
                    label: 'Huyện',
                    dataField: 'huyenId',
                    cascadeField: 'tinhId',
                    functionService: (cascade) => {
                        return this.selectSp.getoptions({
                            type: SelectOptionType.Huyen,
                            cascader: cascade
                        });
                    },
                    renderOptionFunc: (opt) => {
                        if (opt) {
                            return opt.value + ' - ' + opt.displayText;
                        }
                        return '';
                    },
                    renderSelectedFunc: (opt) => {
                        if (opt) {
                            return `<b>${opt.value}</b>` + ' - ' + opt.displayText;
                        }
                        return '';
                    }
                }),
                new OfSelectCascadeModel({
                    label: 'Xã',
                    dataField: 'xaId',
                    cascadeField: 'huyenId',
                    functionService: (cascade) => {
                        return this.selectSp.getoptions({
                            type: SelectOptionType.Xa,
                            cascader: cascade
                        });
                    },
                    keyCache: 'xa'
                }),
                new OfSelectSearchServerModel({
                    label: 'Quận huyện search',
                    dataField: 'huyenSearchServerId',
                    functionService: (dto) => {
                        return this.searchSp.getoptions(Object.assign(Object.assign({}, dto), { type: SelectSearchServerType.Huyen }));
                    }
                }),
                new OfSelectSearchServerModel({
                    label: 'Quận huyện search showPagination',
                    dataField: 'huyenSearchServerId',
                    functionService: (dto) => {
                        return this.searchSp.getoptions(Object.assign(Object.assign({}, dto), { type: SelectSearchServerType.Huyen }));
                    },
                    showPagination: true
                }),
                new OfCheckBoxModel({
                    label: '',
                    dataField: 'checkBox',
                    checkBoxLabel: 'Check box',
                    disabledAsync: this.formDisable$
                }),
                new OfDateModel({
                    label: 'Ngày sinh',
                    dataField: 'ngaySinh',
                    required: true,
                    notGreaterThanCurrent: true,
                    minDateAsync: this.ngaySinhMin$,
                    disabledAsync: this.formDisable$
                }),
                new OfCurrencyModel({
                    label: 'Đơn giá',
                    dataField: 'donGia',
                    disabledAsync: this.formDisable$
                }),
                new OfContentHtmlModel({
                    label: ' ',
                    dataField: 'benhNhanId',
                    content: '<h3>content string html</h3>',
                    disabledAsync: this.formDisable$
                }),
                new OfTextAreaModel({
                    label: 'Ghi chú',
                    dataField: 'ghiChu',
                    rows: 2,
                    disabledAsync: this.formDisable$
                }),
                new OfNumberModel({
                    label: 'Số thứ tự',
                    dataField: 'soThuTu',
                    min: 10,
                    max: 100,
                    step: 2,
                    disabledAsync: this.formDisable$
                }),
                new OfNumberModel({
                    label: 'Điện thoại',
                    dataField: 'dienThoai',
                    onlyKeyNumber: true,
                    disabledAsync: this.formDisable$
                }),
                new OfPwdModel({
                    label: 'Mật khẩu',
                    dataField: 'matKhau',
                    disabledAsync: this.formDisable$,
                    validations: [
                        {
                            name: 'password'
                        }
                    ]
                }),
                new OfRadioModel({
                    label: 'Loại',
                    dataField: 'loai',
                    items: [{
                            label: 'Loại 1',
                            value: 1
                        }, {
                            label: 'Loại 2',
                            value: 2
                        }, {
                            label: 'Loại 3',
                            value: 3
                        }]
                }),
                new OfSwitchModel({
                    label: 'Switch',
                    dataField: 'switch',
                    yesText: 'Có'
                }),
                new OfTemplateRefModel({
                    label: 'templateRef',
                    dataField: 'templateRef',
                    controls: [
                        new OfExtendControlModel({
                            dataField: 'templateOpt',
                            value: '1'
                        }),
                        new OfExtendControlModel({
                            dataField: 'templateInput',
                            required: true
                        })
                    ]
                })
            ]
        });
        this.disable = false;
    }
    onClickDisable() {
        this.disable = !this.disable;
        this.schemaModel.disableAll(this.disable);
    }
    onClickSetValue() {
        this.schemaModel.patchValue({
            ngaySinh: new Date(2021, 2, 28),
            ma: Number(new Date()),
            ghiChu: Number(new Date()),
            huyenSearchServerId: '9361',
            tinhId: '867',
            huyenId: '531',
            xaId: '533'
        });
    }
    onClickAddControl() {
        this.schemaModel.addControls([
            new OfTextModel({
                label: 'Mã ' + Number(new Date()),
                dataField: 'ma' + Number(new Date()),
                required: true,
                validations: [
                    {
                        name: 'email'
                    }
                ],
                value: Number(new Date())
            })
        ], 0);
    }
}
OfComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-of',
                template: `
      <div class="form-group">
          <of #vcForm [schemaModel]="schemaModel">
              <of-field id="templateRef">
                  <ng-template #control let-group="group">
                      <form [formGroup]="group">
                          <nz-input-group nzCompact>
                              <nz-select formControlName="templateOpt" style="width: 50%">
                                  <nz-option [nzLabel]="'Option 1'" [nzValue]="'1'"></nz-option>
                                  <nz-option [nzLabel]="'Option 2'" [nzValue]="'2'"></nz-option>
                              </nz-select>
                              <input formControlName="templateInput" nz-input placeholder="templateInput"
                                     style="width: 50%"/>
                          </nz-input-group>
                      </form>
                  </ng-template>
              </of-field>
          </of>
      </div>
      <div>
          <button class="btn btn-primary" (click)="onClickDisable()">Disable</button>
          <button class="btn btn-primary" (click)="onClickSetValue()">Set value</button>
          <button class="btn btn-primary" (click)="vcForm.onSubmit()">Submit</button>
          <button class="btn btn-primary" (click)="schemaModel.submitted = false">Clear Submit</button>
          <button class="btn btn-primary" (click)="onClickAddControl()">AddControl</button>
      </div>
      <pre>{{vcForm.value|json}}</pre>

  `,
                providers: [SelectoptionServiceProxy, SelectsearchserverServiceProxy]
            },] }
];
OfComponent.ctorParameters = () => [
    { type: SelectoptionServiceProxy },
    { type: SelectsearchserverServiceProxy }
];

class DestroyRxjsService extends Subject {
    ngOnDestroy() {
        this.next();
        this.complete();
    }
}
DestroyRxjsService.decorators = [
    { type: Injectable }
];

class OfValidatorService {
    constructor() {
    }
    noWhitespaceValidator(control) {
        if (AppUtilityService.isNullOrEmpty(control.value)) {
            return { whiteSpace: true };
        }
        const v = '' + control.value;
        const isWhitespace = v.trim().length === 0;
        const isValid = !isWhitespace;
        return isValid ? null : { whiteSpace: true };
    }
    emailValidator(control) {
        const value = (control === null || control === void 0 ? void 0 : control.value) || '';
        const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        const isValid = re.test(value);
        return isValid ? null : { email: true };
    }
    passwordValidator(control) {
        const value = (control === null || control === void 0 ? void 0 : control.value) || '';
        const check = value.match(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d@$!%*#?&]{8,}$/);
        const isValid = !!check;
        return isValid ? null : { password: true };
    }
    phoneValidator(control) {
        const value = (control === null || control === void 0 ? void 0 : control.value) || '';
        const check = value.match(/(09|01[2|6|8|9])+([0-9]{8})\b/);
        const isValid = !!check;
        return isValid ? null : { phone: true };
    }
    focusControlItem(id) {
        const arr = $('#' + id).find('.ord-form-control');
        let flag = true;
        arr.each(function () {
            let txt = $(this).find('.form-control-err').text();
            if (txt) {
                txt = txt.replace(/ /g, '');
            }
            if (flag && AppUtilityService.isNotNull(txt)) {
                $(this).find('.ord-dynamic-input').focus();
                $(this).find('.ant-input-number-input').focus();
                $(this).find('.ant-input').focus();
                $(this).find('.ant-select-selection-search-input').focus();
                if ($(this).find('.ant-radio-input')[0]) {
                    $(this).find('.ant-radio-input')[0].focus();
                }
                flag = false;
            }
        });
    }
    focusFirst(id) {
        const arr = $('#' + id).find('.ord-form-control');
        let flag = true;
        arr.each(function () {
            if (flag) {
                $(this).find('.ord-dynamic-input').focus();
                $(this).find('.ant-input-number-input').focus();
                $(this).find('.ant-input').focus();
                $(this).find('.ant-select-selection-search-input').focus();
                if ($(this).find('.ant-radio-input')[0]) {
                    $(this).find('.ant-radio-input')[0].focus();
                }
                flag = false;
            }
        });
    }
}
OfValidatorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OfValidatorService_Factory() { return new OfValidatorService(); }, token: OfValidatorService, providedIn: "root" });
OfValidatorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
OfValidatorService.ctorParameters = () => [];

class OfCreateControlFormService {
    constructor(fb, validatorService) {
        this.fb = fb;
        this.validatorService = validatorService;
    }
    createControl(fields) {
        const group = this.fb.group({});
        _.forEach(fields, (field) => {
            this.createField(field, group);
        });
        return group;
    }
    createExtendControl(group, controls) {
        _.forEach(controls, (field) => {
            const f = group.get(field.dataField);
            if (f) {
                return;
            }
            this.createValidations(field);
            const control = this.fb.control(field.value, this.bindValidations(field));
            if (field.disabled) {
                control.disable({ onlySelf: true });
            }
            group.addControl(field.dataField, control);
        });
    }
    updateControl(fields, group) {
        Object.keys(group.controls).forEach(key => {
            const fDataField = fields.find(x => x.dataField === key);
            if (!fDataField) {
                group.removeControl(key);
            }
        });
        _.forEach(fields, (field) => {
            const f = group.get(field.dataField);
            if (f) {
                return;
            }
            this.createField(field, group);
        });
    }
    createField(field, group) {
        const ignoreType = ['contentHtml', 'componentRef', 'templateRef'];
        if (ignoreType.indexOf(field.type) > 0) {
            return;
        }
        this.createValidations(field);
        const control = this.fb.control(field.value, this.bindValidations(field));
        if (field.disabled) {
            control.disable({ onlySelf: true });
        }
        group.addControl(field.dataField, control);
    }
    createValidations(field) {
        field.validations = field.validations || [];
        field.validations.forEach(valid => {
            if (valid.name === 'email') {
                valid.validator = this.validatorService.emailValidator;
                valid.message = valid.message || 'Email sai định dạng!';
                return;
            }
            if (valid.name === 'phone') {
                valid.validator = this.validatorService.phoneValidator;
                valid.message = valid.message || 'Số điện thoại không đúng định dạng!';
                return;
            }
            if (valid.name === 'password') {
                valid.validator = this.validatorService.passwordValidator;
                valid.message = valid.message || 'Mật khẩu tối thiểu 8 ký tự, bao gồm chữ in hoa/ thường , số và ký tự đặc biệt!';
                return;
            }
        });
        if (field.required) {
            field.validations.push({
                name: 'whiteSpace',
                validator: this.validatorService.noWhitespaceValidator,
                message: field.errorEmpty
            });
        }
    }
    bindValidations(field) {
        const validations = field.validations || [];
        if (validations.length > 0) {
            const validList = [];
            validations.forEach(valid => {
                validList.push(valid.validator);
            });
            return Validators.compose(validList);
        }
        return null;
    }
}
OfCreateControlFormService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OfCreateControlFormService_Factory() { return new OfCreateControlFormService(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(OfValidatorService)); }, token: OfCreateControlFormService, providedIn: "root" });
OfCreateControlFormService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
OfCreateControlFormService.ctorParameters = () => [
    { type: FormBuilder },
    { type: OfValidatorService }
];

class OfDynamicComponent {
    constructor(fb, createCtrlService, validatorService, destroy$) {
        this.fb = fb;
        this.createCtrlService = createCtrlService;
        this.validatorService = validatorService;
        this.destroy$ = destroy$;
        this.submitValueEvent = new EventEmitter();
        this.searchEvent = new EventEmitter();
        this.fields = [];
        this.ofFieldTempates = [];
    }
    get value() {
        var _a;
        return (_a = this.form) === null || _a === void 0 ? void 0 : _a.getRawValue();
    }
    ngOnInit() {
        this.fields = this.schemaModel.fields || [];
        this.form = this.createCtrlService.createControl(this.fields);
        this.schemaModel.form = this.form;
        this.init$();
    }
    reBuilderForm() {
        this.fields = this.schemaModel.fields || [];
        this.createCtrlService.updateControl(this.fields, this.form);
        this.schemaModel.form = this.form;
    }
    init$() {
        this.schemaModel.rebuilder$.pipe(takeUntil(this.destroy$), distinctUntilChanged(), filter(x => x > 0))
            .subscribe(() => {
            this.reBuilderForm();
        });
    }
    trackByField(index, field) {
        return field.dataField;
    }
    onSubmit(isCheckValid = true) {
        this.schemaModel.submitted = true;
        if (!isCheckValid) {
            this.submitValueEvent.emit(this.value);
            return this.value;
        }
        _.forEach(this.fields, (field) => {
            const f = this.form.controls[field.dataField];
            if (f) {
                if (field.hidden) {
                    f.setValidators(null);
                }
                else {
                    f.setValidators(this.createCtrlService.bindValidations(field));
                }
            }
        });
        if (this.form.valid) {
            this.submitValueEvent.emit(this.value);
            return this.value;
        }
        else {
            setTimeout(() => {
                this.validatorService.focusControlItem(this.schemaModel.id);
            }, 500);
            return null;
        }
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.validatorService.focusFirst(this.schemaModel.id);
        }, 500);
    }
    onClickSearchBtn() {
        this.schemaModel.searchBtnBusy = true;
        this.searchEvent.emit(this.value);
        this.schemaModel.searchEvent$.next(this.value);
    }
    disableAll(f = true) {
        this.schemaModel.disableAll(f);
    }
    disableField(name, f = true) {
        this.schemaModel.disableField(name, f);
    }
    addOfFieldTempates(d) {
        this.ofFieldTempates.push(d);
    }
}
OfDynamicComponent.decorators = [
    { type: Component, args: [{
                selector: 'of',
                template: "<form class=\"dynamic-form\" [formGroup]=\"form\">\r\n  <div nz-row [nzGutter]=\"[18, 6]\" [id]=\"schemaModel.id\">\r\n    <ng-content select=\"[topContent]\"></ng-content>\r\n    <ng-container *ngFor=\"let field of fields;trackBy:trackByField\">\r\n      <div nz-col *ngIf=\"!field.hidden\" [nzSpan]=\"field.width\" [ngClass]=\"field.css\">\r\n        <nz-form-label [nzRequired]=\"field.required\" [hidden]=\"field.hiddenLabel\">\r\n          <span [innerHTML]=\"field.label\"></span>\r\n        </nz-form-label>\r\n        <div ofDynamicField [schemaModel]=\"schemaModel\" [field]=\"field\" [group]=\"form\"\r\n             [ofFieldTempates]=\"ofFieldTempates\" (searchEvent)=\"searchEvent.emit($event)\">\r\n        </div>\r\n        <span class=\"form-control-err text-danger\">\r\n              {{this.form.controls[field.dataField]?.errors | showValidationError : field?.validations : schemaModel.submitted}}\r\n        </span>\r\n        <div [innerHTML]=\"field.bottomHtml\"></div>\r\n      </div>\r\n    </ng-container>\r\n    <div *ngIf=\"schemaModel.isSearchBox\" nz-col class=\"gutter-row of-btn-search ord-form-control\" [nzSpan]=\"2\">\r\n      <button nz-button nzType=\"primary\"\r\n              [nzLoading]=\"schemaModel.searchBtnBusy\"\r\n              (click)=\"onClickSearchBtn()\">T\u00ECm ki\u1EBFm\r\n      </button>\r\n    </div>\r\n    <ng-content select=\"[bottomContent]\"></ng-content>\r\n  </div>\r\n</form>\r\n",
                encapsulation: ViewEncapsulation.None,
                providers: [DestroyRxjsService],
                styles: [".of-btn-search{max-width:109px}.of-btn-search button{margin-top:25px!important}.ant-form-item-label{padding:0!important;height:25px!important}.ant-form-item-label>label:after{content:\"\"!important}"]
            },] }
];
OfDynamicComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: OfCreateControlFormService },
    { type: OfValidatorService },
    { type: DestroyRxjsService }
];
OfDynamicComponent.propDecorators = {
    schemaModel: [{ type: Input }],
    submitValueEvent: [{ type: Output }],
    searchEvent: [{ type: Output }]
};

class OfFieldComponent {
    constructor(ofDynamic) {
        this.ofDynamic = ofDynamic;
        // map với dataField
        this.id = '';
        this.ofDynamic.addOfFieldTempates(this);
    }
}
OfFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-field',
                template: ``
            },] }
];
OfFieldComponent.ctorParameters = () => [
    { type: OfDynamicComponent }
];
OfFieldComponent.propDecorators = {
    id: [{ type: Input }],
    controlTemplate: [{ type: ContentChild, args: ['control',] }]
};

class OfService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'Of';
    }
    sample() {
        // return this.restService.request<void, any>(
        //   { method: 'GET', url: '/api/Of/sample' },
        //   { apiName: this.apiName }
        // );
    }
}
OfService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OfService_Factory() { return new OfService(i0.ɵɵinject(i1$1.RestService)); }, token: OfService, providedIn: "root" });
OfService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
OfService.ctorParameters = () => [
    { type: RestService }
];

const routes = [
    {
        path: '',
        pathMatch: 'full',
        component: DynamicLayoutComponent,
        children: [
            {
                path: '',
                component: OfComponent,
            },
        ],
    },
];
class OfRoutingModule {
}
OfRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [RouterModule.forChild(routes)],
                exports: [RouterModule],
            },] }
];

registerLocaleData(vi);
const antDesignIcons = AllIcons;
class Icon {
    static icons() {
        const ret = [];
        for (const key of Object.keys(antDesignIcons)) {
            ret.push(antDesignIcons[key]);
        }
        return ret;
    }
}
const antModule = [
    NzAffixModule,
    NzAlertModule,
    NzAnchorModule,
    NzAutocompleteModule,
    NzAvatarModule,
    NzBackTopModule,
    NzBadgeModule,
    NzButtonModule,
    NzBreadCrumbModule,
    NzCalendarModule,
    NzCardModule,
    NzCarouselModule,
    NzCascaderModule,
    NzCheckboxModule,
    NzCollapseModule,
    NzCommentModule,
    NzDatePickerModule,
    NzDescriptionsModule,
    NzDividerModule,
    NzDrawerModule,
    NzDropDownModule,
    NzEmptyModule,
    NzFormModule,
    NzGridModule,
    NzI18nModule,
    NzIconModule,
    NzInputModule,
    NzInputNumberModule,
    NzLayoutModule,
    NzListModule,
    NzMentionModule,
    NzMenuModule,
    NzMessageModule,
    NzModalModule,
    NzNoAnimationModule,
    NzNotificationModule,
    NzPageHeaderModule,
    NzPaginationModule,
    NzPopconfirmModule,
    NzPopoverModule,
    NzProgressModule,
    NzRadioModule,
    NzRateModule,
    NzResultModule,
    NzSelectModule,
    NzSkeletonModule,
    NzSliderModule,
    NzSpinModule,
    NzStatisticModule,
    NzStepsModule,
    NzSwitchModule,
    NzTableModule,
    NzTabsModule,
    NzTagModule,
    NzTimePickerModule,
    NzTimelineModule,
    NzToolTipModule,
    NzTransButtonModule,
    NzTransferModule,
    NzTreeModule,
    NzTreeSelectModule,
    NzTypographyModule,
    NzUploadModule,
    NzWaveModule,
    NzResizableModule,
    NzSpaceModule
];
const ɵ0 = vi_VN, ɵ1 = Icon.icons(), ɵ2 = vi$1;
class AntDesignModule {
}
AntDesignModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                exports: [antModule],
                providers: [
                    { provide: NZ_I18N, useValue: ɵ0 },
                    { provide: NZ_ICONS, useValue: ɵ1 },
                    { provide: NZ_DATE_LOCALE, useValue: ɵ2 }
                ]
            },] }
];

class OfCheckBoxComponent {
    constructor() {
    }
    ngOnInit() {
    }
}
OfCheckBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-check-box',
                template: `
      <form [formGroup]="group">
          <label nz-checkbox [formControlName]="field.dataField">{{ field.checkBoxLabel }}</label>
      </form>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfCheckBoxComponent.ctorParameters = () => [];

var ofCheckBox_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfCheckBoxComponent: OfCheckBoxComponent
});

class DynamicFieldDirective {
    constructor(resolver, container, destroy$) {
        this.resolver = resolver;
        this.container = container;
        this.destroy$ = destroy$;
        this.ofFieldTempates = [];
        this.searchEvent = new EventEmitter();
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.mapComponent();
            if (this.component) {
                const factory = this.resolver.resolveComponentFactory(this.component);
                this.componentRef = this.container.createComponent(factory);
                this.componentRef.instance.field = this.field;
                this.componentRef.instance.group = this.group;
                this.componentRef.instance.schemaModel = this.schemaModel;
                if (this.field.type === 'templateRef') {
                    this.componentRef.instance.ofFieldTempates = this.ofFieldTempates;
                }
                if (this.schemaModel.isSearchBox && this.field.type === 'text') {
                    this.componentRef.instance.searchEvent.pipe(takeUntil(this.destroy$)).subscribe(d => {
                        this.searchEvent.emit(d);
                    });
                }
            }
            this.init$();
        });
    }
    mapComponent() {
        return __awaiter(this, void 0, void 0, function* () {
            const type = this.field.type;
            switch (type) {
                case 'checkBox':
                    const { OfCheckBoxComponent } = yield Promise.resolve().then(function () { return ofCheckBox_component; });
                    this.component = OfCheckBoxComponent;
                    break;
                case 'textArea':
                    const { OfTextAreaComponent } = yield Promise.resolve().then(function () { return ofTextArea_component; });
                    this.component = OfTextAreaComponent;
                    break;
                case 'text':
                    const { OfTextComponent } = yield Promise.resolve().then(function () { return ofText_component; });
                    this.component = OfTextComponent;
                    break;
                case 'select':
                    const { OfSelectComponent } = yield Promise.resolve().then(function () { return ofSelect_component; });
                    this.component = OfSelectComponent;
                    break;
                case 'selectAsync':
                    const { OfSelectAsyncComponent } = yield Promise.resolve().then(function () { return ofSelectAsync_component; });
                    this.component = OfSelectAsyncComponent;
                    break;
                case 'selectApi':
                    const { OfSelectApiComponent } = yield Promise.resolve().then(function () { return ofSelectApi_component; });
                    this.component = OfSelectApiComponent;
                    break;
                case 'selectApiCascade':
                    const { OfSelectCascadeComponent } = yield Promise.resolve().then(function () { return ofSelectCascade_component; });
                    this.component = OfSelectCascadeComponent;
                    break;
                case 'selectSearchServer':
                    const { OfSelectSearchServerComponent } = yield Promise.resolve().then(function () { return ofSelectSearchServer_component; });
                    this.component = OfSelectSearchServerComponent;
                    break;
                case 'currencyInput':
                    const { OfCurrencyComponent } = yield Promise.resolve().then(function () { return ofCurrency_component; });
                    this.component = OfCurrencyComponent;
                    break;
                case 'datePicker':
                    const { OfDatePickerComponent } = yield Promise.resolve().then(function () { return ofDatePicker_component; });
                    this.component = OfDatePickerComponent;
                    break;
                case 'contentHtml':
                    const { OfContentHtmlComponent } = yield Promise.resolve().then(function () { return ofContentHtml_component; });
                    this.component = OfContentHtmlComponent;
                    break;
                case 'numberInput':
                    const { OfNumberInputComponent } = yield Promise.resolve().then(function () { return ofNumberInput_component; });
                    this.component = OfNumberInputComponent;
                    break;
                case 'passWordInput':
                    const { OfPasswordComponent } = yield Promise.resolve().then(function () { return ofPassword_component; });
                    this.component = OfPasswordComponent;
                    break;
                case 'radio':
                    const { OfRadioComponent } = yield Promise.resolve().then(function () { return ofRadio_component; });
                    this.component = OfRadioComponent;
                    break;
                case 'switch':
                    const { OfSwitchComponent } = yield Promise.resolve().then(function () { return ofSwitch_component; });
                    this.component = OfSwitchComponent;
                    break;
                case 'componentRef':
                    const field = this.field;
                    this.component = field.componentRef;
                    break;
                case 'templateRef':
                    const { OfTemplateRefComponent } = yield Promise.resolve().then(function () { return ofTemplateRef_component; });
                    this.component = OfTemplateRefComponent;
                    break;
            }
        });
    }
    get f() {
        return this.group.get(this.field.dataField) || null;
    }
    init$() {
        if (this.field.hiddenAsync) {
            this.field.hiddenAsync.pipe(takeUntil(this.destroy$))
                .pipe(debounceTime(300))
                .subscribe(d => {
                this.field.hidden = d;
            });
        }
        if (this.field.disabledAsync) {
            this.field.disabledAsync.pipe(takeUntil(this.destroy$))
                .subscribe(d => {
                this.field.disabled = d;
                if (this.f) {
                    if (d) {
                        this.f.disable({ onlySelf: true });
                    }
                    else {
                        this.f.enable({ onlySelf: true });
                    }
                }
                this.disableExtendControl(d);
            });
        }
    }
    disableExtendControl(d) {
        if (!AppUtilityService.isNotAnyItem(this.field.controls)) {
            this.field.controls.forEach(ctrl => {
                ctrl.disabled = d;
                const fControl = this.group.get(ctrl.dataField);
                if (fControl) {
                    if (d) {
                        fControl.disable({ onlySelf: true });
                    }
                    else {
                        fControl.enable({ onlySelf: true });
                    }
                }
            });
        }
    }
}
DynamicFieldDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ofDynamicField]',
                providers: [DestroyRxjsService]
            },] }
];
DynamicFieldDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: DestroyRxjsService }
];
DynamicFieldDirective.propDecorators = {
    schemaModel: [{ type: Input }],
    field: [{ type: Input }],
    group: [{ type: Input }],
    ofFieldTempates: [{ type: Input }],
    searchEvent: [{ type: Output }]
};

class OfTextComponent {
    constructor(destroy$) {
        this.destroy$ = destroy$;
        this.searchEvent = new EventEmitter();
        this.keyEnter$ = new Subject();
        this.nzSpinning = false;
    }
    ngOnInit() {
        this.keyEnter$.pipe(takeUntil(this.destroy$), debounceTime(500), distinctUntilChanged())
            .subscribe(d => {
            if (this.schemaModel.isSearchBox) {
                this.schemaModel.searchBtnBusy = true;
                this.schemaModel.searchEvent$.next(d);
                this.searchEvent.emit(d);
                this.nzSpinning = false;
            }
        });
    }
    onKeyEnterControl() {
        if (this.schemaModel.isSearchBox) {
            this.nzSpinning = true;
            this.keyEnter$.next(this.group.getRawValue());
        }
    }
}
OfTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-text',
                template: `
      <nz-spin [nzSpinning]="nzSpinning">
          <form [formGroup]="group" (keyup.enter)="onKeyEnterControl()">
              <input [formControlName]="field.dataField" nz-input [disabled]="true" [placeholder]="field.placeholder"
                     maxlength="{{ field?.maxLength }}"/>
          </form>
      </nz-spin>

  `,
                providers: [DestroyRxjsService]
            },] }
];
OfTextComponent.ctorParameters = () => [
    { type: DestroyRxjsService }
];
OfTextComponent.propDecorators = {
    searchEvent: [{ type: Output }]
};

var ofText_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfTextComponent: OfTextComponent
});

class OfCurrencyComponent {
    constructor() {
        this.options = {};
    }
    ngOnInit() {
        this.options = {
            prefix: this.field.prefix,
            suffix: this.field.suffix,
            thousands: '.',
            decimal: ',',
            precision: this.field.precision
        };
    }
}
OfCurrencyComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-currency',
                template: `
      <form [formGroup]="group">
          <input
                  currencyMask
                  nz-input
                  [formControlName]="field.dataField"
                  class="ord-dynamic-input"
                  [disabled]="field.disabled"
                  [placeholder]="field.placeholder"
                  [options]="field"
          />
      </form>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
      input::placeholder {
          text-align: left;
      }
  `]
            },] }
];
OfCurrencyComponent.ctorParameters = () => [];

var ofCurrency_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfCurrencyComponent: OfCurrencyComponent
});

class OfDatePickerComponent {
    constructor(destroy$, cdr) {
        this.destroy$ = destroy$;
        this.cdr = cdr;
        this.disabledDate = (current) => {
            var _a;
            if (((_a = this.field) === null || _a === void 0 ? void 0 : _a.dateNotGreaterThanCurrent) && !this.maxDate) {
                this.maxDate = new Date();
            }
            let check = false;
            if (this.minDate) {
                check = check || differenceInCalendarDays(current, this.minDate) < 0;
            }
            if (this.maxDate) {
                check = check || differenceInCalendarDays(current, this.maxDate) > 0;
            }
            return check;
        };
    }
    ngOnInit() {
        this.minDate = this.field.minDate;
        this.maxDate = this.field.maxDate;
        if (this.field.minDateAsync) {
            this.field.minDateAsync.pipe(takeUntil(this.destroy$))
                .subscribe(min => {
                this.setMinDate(min);
            });
        }
        if (this.field.maxDateAsync) {
            this.field.maxDateAsync.pipe(takeUntil(this.destroy$)).subscribe(max => {
                this.setMaxDate(max);
            });
        }
        this.schemaModel.subRender(this.cdr, this.destroy$);
    }
    setMinDate(min) {
        const d = this.convertDate(min);
        if (AppUtilityService.isNullOrEmpty(this.field.minDate)) {
            this.minDate = d;
        }
        else if (AppUtilityService.isNotNull(d) && differenceInCalendarDays(d, this.field.minDate) > 0) {
            this.minDate = d;
        }
        else {
            this.minDate = this.field.minDate;
        }
        this.cdr.detectChanges();
    }
    setMaxDate(max) {
        const d = this.convertDate(max);
        if (AppUtilityService.isNullOrEmpty(this.field.maxDate)) {
            this.maxDate = d;
        }
        else if (AppUtilityService.isNotNull(d) && differenceInCalendarDays(d, this.field.maxDate) < 0) {
            this.maxDate = d;
        }
        else {
            this.maxDate = this.field.maxDate;
        }
        this.cdr.detectChanges();
    }
    convertDate(date) {
        if (moment.isMoment(date)) {
            return date.toDate();
        }
        else {
            return date;
        }
    }
    get f() {
        return this.group.get(this.field.dataField);
    }
    handlerTuNgayChange() {
        if (AppUtilityService.isNotNull(this.field.tuNgayDataField) && this.group.get(this.field.tuNgayDataField)) {
            this.group.get(this.field.tuNgayDataField).valueChanges
                .pipe(takeUntil(this.destroy$)).subscribe(min => {
                this.setMinDate(min);
            });
        }
    }
    handlerDenNgayChange() {
        if (AppUtilityService.isNotNull(this.field.denNgayDataField) && this.group.get(this.field.denNgayDataField)) {
            this.group.get(this.field.denNgayDataField).valueChanges
                .pipe(takeUntil(this.destroy$)).subscribe(max => {
                this.setMaxDate(max);
            });
        }
    }
    ngAfterContentChecked() {
        this.handlerDenNgayChange();
        this.handlerTuNgayChange();
    }
}
OfDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-date-picker',
                template: `
      <form [formGroup]="group">
          <of-date-picker-ctrl #vcDatePicker [formControlName]="field.dataField"
                               [disabled]="field.disabled"
                               [disabledDate]="disabledDate"></of-date-picker-ctrl>
      </form>
  `,
                providers: [DestroyRxjsService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfDatePickerComponent.ctorParameters = () => [
    { type: DestroyRxjsService },
    { type: ChangeDetectorRef }
];
OfDatePickerComponent.propDecorators = {
    vcDatePicker: [{ type: ViewChild, args: ['vcDatePicker',] }]
};

var ofDatePicker_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfDatePickerComponent: OfDatePickerComponent
});

class OfNumberInputComponent {
    constructor() {
    }
    ngOnInit() {
    }
}
OfNumberInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-number-input',
                template: `
      <form [formGroup]="group">
          <input nz-input *ngIf="field.onlyKeyNumber;else tplNumberInput"
                 numbersOnlyInput [formControlName]="field.dataField"
                 [placeholder]="field.placeholder"
                 maxlength="{{ field.maxlength }}"
          />
          <ng-template #tplNumberInput>
              <nz-input-number [formControlName]="field.dataField"
                               [nzPlaceHolder]="field.placeholder"
                               style="width: 100%"
                               [nzMin]="field.min"
                               [nzMax]="field.max"
                               [nzStep]="field.step">
              </nz-input-number>
          </ng-template>
      </form>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfNumberInputComponent.ctorParameters = () => [];

var ofNumberInput_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfNumberInputComponent: OfNumberInputComponent
});

class OfTextAreaComponent {
}
OfTextAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-text-area',
                template: `
      <form [formGroup]="group">
          <textarea nz-input
                    [formControlName]="field.dataField"
                    [placeholder]="field.placeholder"
                    [rows]="field.rows"
                    maxlength="{{field.maxLength}}"></textarea>
      </form>
  `
            },] }
];

var ofTextArea_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfTextAreaComponent: OfTextAreaComponent
});

const VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => OfDataPickerControlComponent),
    multi: true
};
class OfDataPickerControlComponent {
    constructor() {
        this.placeHolder = 'Ngày/Tháng/Năm';
        this.mask = [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/];
        this.$destroy = new Subject();
        this.isWriteValue = false;
        this.mouseEvent$ = new Subject();
        this.nzIcon = 'calendar';
        this.nzIcon$ = new BehaviorSubject('calendar');
        // tslint:disable-next-line:variable-name
        this.isShowIconCalendar = true;
        this.isDisabled = false;
        this.control = new FormControl({ value: null, disabled: true });
        this.inputValue = new FormControl({ value: '', disabled: false });
    }
    get value() {
        return this.control.value;
    }
    set value(v) {
        this.control.setValue(v);
    }
    get disabled() {
        return this.isDisabled;
    }
    set disabled(v) {
        this.isDisabled = v;
        if (v === true) {
            this.inputValue.disable();
        }
        else {
            this.inputValue.enable();
        }
    }
    onChange(v) {
    }
    onTouched() {
    }
    onChangeValue(event) {
        this.onChange(event);
    }
    onFocus(event) {
        this.onTouched();
    }
    mouseLeaveMain() {
        this.mouseEvent$.next('mouseLeave');
    }
    mouseEnterMain() {
        this.mouseEvent$.next('mouseEnter');
    }
    ngAfterViewInit() {
        fromEvent(this.refInput.nativeElement, 'click')
            .pipe(debounceTime(222), takeUntil(this.$destroy)).subscribe(() => {
            this.refDate.picker.showOverlay();
            setTimeout(() => {
                this.refInput.nativeElement.focus();
            });
        });
        this.refDate.nzOnOpenChange
            .pipe(takeUntil(this.$destroy))
            .subscribe(o => {
            if (!o) {
                setTimeout(() => {
                    this.refInput.nativeElement.focus();
                });
            }
        });
        this.mouseEvent$.pipe(takeUntil(this.$destroy))
            .pipe(debounceTime(222))
            .pipe(map(d => {
            if (d === 'mouseLeave') {
                return 'calendar';
            }
            if (this.disabled) {
                return 'calendar';
            }
            if (AppUtilityService.isNullOrEmpty(this.control.value)) {
                return 'calendar';
            }
            return 'close-circle';
        })).pipe(tap((icon) => {
            this.nzIcon$.next(icon);
            this.nzIcon = icon;
        })).subscribe();
        this.nzIcon$.next('calendar');
    }
    ngOnDestroy() {
        this.$destroy.next(true);
        this.$destroy.unsubscribe();
    }
    ngOnInit() {
        this.control.valueChanges.pipe(takeUntil(this.$destroy), distinctUntilChanged()).subscribe((result) => {
            if (this.isWriteValue) {
                if (result) {
                    const valueText = moment(result).format('DD/MM/YYYY');
                    this.inputValue.setValue(valueText);
                }
                this.onChangeValue(result);
            }
        });
        this.inputValue.valueChanges.pipe(takeUntil(this.$destroy), distinctUntilChanged(), debounceTime(100)).subscribe(result => {
            try {
                const arrStr = result.split('/');
                if (!isNaN(arrStr[0]) && !isNaN(arrStr[1]) && !isNaN(arrStr[2])) {
                    const date = moment(result, 'DD/MM/YYYY');
                    if (date.isValid()) {
                        if (typeof this.disabledDate === 'function') {
                            if (this.disabledDate(date.toDate())) {
                                this.inputValue.setValue(null);
                            }
                            else {
                                this.control.setValue(date.toDate());
                                this.refDate.picker.hideOverlay();
                            }
                        }
                        else {
                            this.control.setValue(date.toDate());
                            this.refDate.picker.hideOverlay();
                        }
                    }
                    else {
                        this.control.setValue(null);
                    }
                }
                else {
                    this.control.setValue(null);
                }
            }
            catch (e) {
                this.control.setValue(null);
            }
        });
    }
    //#region base ControlValueAccessor
    writeValue(obj) {
        if (obj) {
            const valueText = moment(obj).format('DD/MM/YYYY');
            this.inputValue.setValue(valueText);
            this.value = moment(obj).toDate();
        }
        else {
            this.inputValue.setValue('');
            this.value = null;
        }
        this.isWriteValue = true;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
    }
    //#endregion
    onFocusOutInputMask() {
        if (AppUtilityService.isNullOrEmpty(this.control.value)) {
            this.inputValue.setValue(null);
        }
    }
    onClickIcon() {
        if (this.disabled) {
            return;
        }
        if (this.nzIcon === 'calendar') {
            this.refDate.picker.showOverlay();
            return;
        }
        this.nzIcon$.next('calendar');
        this.inputValue.setValue(null);
        this.control.setValue(null);
    }
}
OfDataPickerControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-date-picker-ctrl',
                template: `
      <div class="main-ora-date" (mouseenter)="mouseEnterMain()" (mouseleave)="mouseLeaveMain()">
          <nz-date-picker class="ora-date" #refDate style="width:100%" [nzPlaceHolder]="placeHolder"
                          [nzDisabled]="disabled"
                          [nzDisabledDate]="disabledDate"
                          tabindex="-1"
                          [formControl]="control"
                          nzFormat="dd/MM/yyyy"></nz-date-picker>
          <input #refInput class="ora-input-date" nz-input (focusout)="onFocusOutInputMask()"
                 [placeholder]="placeHolder"
                 [formControl]="inputValue"
                 [textMask]="{mask: mask}"/>
          <i class="ora-calendar" (click)="onClickIcon()" nz-icon
             [nzType]="nzIcon$ | async"
             nzTheme="outline"></i>
      </div>
  `,
                encapsulation: ViewEncapsulation.None,
                providers: [VALUE_ACCESSOR],
                styles: [`.main-ora-date {
      position: relative;
  }

  .ora-date {
      border: 0;
  }

  .ora-input-date {
      position: absolute;
      top: 0;
      left: 0
  }

  .ora-close {
      position: absolute;
      top: 7px;
      right: 5px;
  }

  .ora-calendar {
      position: absolute;
      top: 7px;
      right: 5px;
  }`]
            },] }
];
OfDataPickerControlComponent.ctorParameters = () => [];
OfDataPickerControlComponent.propDecorators = {
    refDate: [{ type: ViewChild, args: ['refDate',] }],
    refInput: [{ type: ViewChild, args: ['refInput',] }],
    disabledDate: [{ type: Input }],
    placeHolder: [{ type: Input }],
    disabled: [{ type: Input }],
    control: [{ type: Input }]
};

class OfContentHtmlComponent {
    constructor() {
    }
    ngOnInit() {
    }
}
OfContentHtmlComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-content-html',
                template: `
      <div [innerHTML]="field.content"></div>`,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfContentHtmlComponent.ctorParameters = () => [];

var ofContentHtml_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfContentHtmlComponent: OfContentHtmlComponent
});

class NumbersOnlyDirective {
    // tslint:disable-next-line:variable-name
    constructor(_el) {
        this._el = _el;
    }
    onInputChange(event) {
        const initalValue = this._el.nativeElement.value;
        this._el.nativeElement.value = initalValue.replace(/[^0-9]*/g, '');
        if (initalValue !== this._el.nativeElement.value) {
            event.stopPropagation();
        }
    }
}
NumbersOnlyDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[numbersOnlyInput]'
            },] }
];
NumbersOnlyDirective.ctorParameters = () => [
    { type: ElementRef }
];
NumbersOnlyDirective.propDecorators = {
    onInputChange: [{ type: HostListener, args: ['input', ['$event'],] }]
};

class OfPasswordComponent {
    constructor() {
        this.passwordVisible = false;
    }
    ngOnInit() {
        this.field.placeholder = this.field.placeholder || 'Nhập mật khẩu';
    }
}
OfPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-password',
                template: `
      <form [formGroup]="group">
          <nz-input-group nzPrefixIcon="lock" [nzSuffix]="suffixTemplate">
              <input [type]="passwordVisible ? 'text' : 'password'" nz-input placeholder="{{field.placeholder}}"
                     [formControlName]="field.dataField"/>
          </nz-input-group>
          <ng-template #suffixTemplate>
              <i nz-icon [nzType]="passwordVisible ? 'eye-invisible' : 'eye'"
                 (click)="passwordVisible = !passwordVisible"></i>
          </ng-template>
      </form>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfPasswordComponent.ctorParameters = () => [];

var ofPassword_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfPasswordComponent: OfPasswordComponent
});

class OfRadioComponent {
    constructor() {
    }
    ngOnInit() {
    }
}
OfRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-radio',
                template: `
      <form [formGroup]="group">
          <nz-radio-group [formControlName]="field.dataField"
                          [nzDisabled]="field.disabled"
                          style="width: 100%">
              <label *ngFor="let op of field.items" nz-radio [nzValue]="op.value">{{ op.label }}</label>
          </nz-radio-group>
      </form>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfRadioComponent.ctorParameters = () => [];

var ofRadio_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfRadioComponent: OfRadioComponent
});

class OfSwitchComponent {
    constructor() {
    }
    ngOnInit() {
    }
}
OfSwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-switch',
                template: `
      <form [formGroup]="group">
          <nz-switch [formControlName]="field.dataField"
                     [nzCheckedChildren]="field.yesText ? field.yesText : checkedTemplate"
                     [nzUnCheckedChildren]="field.noText ? field.noText : unCheckedTemplate"
                     [nzDisabled]="field.disabled"
          >
              <ng-template #checkedTemplate><i nz-icon nzType="check"></i></ng-template>
              <ng-template #unCheckedTemplate><i nz-icon nzType="close"></i></ng-template>
          </nz-switch>
      </form>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfSwitchComponent.ctorParameters = () => [];

var ofSwitch_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfSwitchComponent: OfSwitchComponent
});

class OfSelectSearchServerComponent {
    constructor(destroy$, cdr) {
        this.destroy$ = destroy$;
        this.cdr = cdr;
        this.options = [];
        this.option$ = new BehaviorSubject([]);
        this.backUpItems = [];
        this.optionDebound$ = this.option$.pipe(debounceTime(222)).pipe(tap(() => {
            this.triggerDetectChanges();
        }));
        this.txtSearch = '';
        this.txtSearch$ = new Subject();
        this.skipCount = 0;
        this.totalItems = 0;
        this.nzPageIndex = 1;
        this.firstOptions = [];
        this.firstTotal = 0;
        this.isLoading = false;
        this.maxResultCount = 12;
    }
    ngOnInit() {
        this.handlerSearch();
    }
    handlerSearch() {
        this.txtSearch$.pipe(takeUntil(this.destroy$))
            .pipe(debounceTime(1000))
            .subscribe(txt => {
            this.txtSearch = txt;
            if (AppUtilityService.isNullOrEmpty(txt)) {
                this.loadFirstOption();
            }
            else {
                this.skipCount = 0;
                this.nzPageIndex = 1;
                this.getOptionsFromBE(txt);
            }
        });
    }
    search(txt) {
        this.txtSearch$.next(txt);
    }
    nzOpenChange(open) {
        if (open) {
            this.loadFirstOption();
        }
    }
    trackBySelect(index, item) {
        return item.value;
    }
    loadFirstOption() {
        var _a;
        if (this.firstTotal > 0) {
            this.totalItems = this.firstTotal;
            this.nzPageIndex = 1;
            let opt = this.firstOptions;
            if ((_a = this.field) === null || _a === void 0 ? void 0 : _a.itemSelected) {
                // tslint:disable-next-line:triple-equals
                const f = opt.find(s => s.value == this.field.itemSelected.value);
                if (AppUtilityService.isNullOrEmpty(f)) {
                    opt = [this.field.itemSelected, ...this.firstOptions];
                }
            }
            this.setOptions(opt);
        }
        else {
            this.getOptionsFromBE('', null, true);
        }
    }
    // tslint:disable-next-line:no-shadowed-variable
    getOptionsFromBE(filter, value, isFirst = false) {
        const getOneId = AppUtilityService.isNotNull(value);
        if (getOneId) {
            filter = '';
            // tslint:disable-next-line:triple-equals
            const f = _.find(this.backUpItems, s => s.value == value);
            if (f) {
                this.setOptions([f]);
                return;
            }
        }
        this.isLoading = true;
        let skipCount = this.skipCount;
        const maxResultCount = (!this.field.showPagination && isFirst) ? 50 : this.maxResultCount;
        if (this.field.showPagination) {
            skipCount = (this.nzPageIndex - 1) * this.maxResultCount;
        }
        const reqBody = {
            filter,
            value,
            maxResultCount,
            skipCount
        };
        this.field.functionService(reqBody)
            .pipe(finalize(() => {
            this.isLoading = false;
        }))
            .subscribe(d => {
            let options = (d === null || d === void 0 ? void 0 : d.items) || [];
            this.backUpItems = [...this.backUpItems, ...options];
            if (isFirst) {
                this.firstOptions = options;
                this.firstTotal = d.totalCount;
            }
            if (getOneId) {
                this.field.itemSelected = (d === null || d === void 0 ? void 0 : d.items[0]) || null;
            }
            if (AppUtilityService.isNullOrEmpty(value)) {
                this.totalItems = (d === null || d === void 0 ? void 0 : d.totalCount) || 0;
            }
            if (skipCount > 0 && !this.field.showPagination) {
                options = [...this.options, ...options];
            }
            this.setOptions(options);
            this.skipCount = reqBody.skipCount + reqBody.maxResultCount;
        });
    }
    setOptions(options) {
        this.options = options;
        this.option$.next(options);
        this.triggerDetectChanges();
    }
    getItemSelected() {
        const value$ = this.group.get(this.field.dataField).valueChanges.pipe(takeUntil(this.destroy$))
            .pipe(tap((v) => {
            if (AppUtilityService.isNullOrEmpty(v)) {
                this.field.itemSelected = null;
            }
            this.triggerDetectChanges();
        })).pipe(filter(s => !AppUtilityService.isNullOrEmpty(s)));
        value$.subscribe(value => {
            var _a;
            // tslint:disable-next-line:triple-equals
            const f = (_a = this.backUpItems) === null || _a === void 0 ? void 0 : _a.find(s => s.value == value);
            if (AppUtilityService.isNotNull(f)) {
                this.field.itemSelected = f;
                this.setOptions([f]);
                return;
            }
            else {
                this.getOptionsFromBE(null, value);
            }
            this.triggerDetectChanges();
        });
    }
    get f() {
        return this.group.get(this.field.dataField);
    }
    ngAfterViewInit() {
        this.getItemSelected();
        this.triggerDetectChanges();
        this.schemaModel.subRender(this.cdr, this.destroy$);
    }
    triggerDetectChanges() {
        setTimeout(() => {
            this.cdr.detectChanges();
        }, 200);
    }
    loadMore() {
        if (this.field.showPagination) {
            return;
        }
        this.isLoading = true;
        if (this.skipCount > this.totalItems) {
            this.isLoading = false;
            return;
        }
        this.getOptionsFromBE(this.txtSearch, null);
    }
    nzPageIndexChange() {
        this.getOptionsFromBE(this.txtSearch);
    }
}
OfSelectSearchServerComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-select-search-server',
                template: "<form [formGroup]=\"group\">\r\n  <nz-select [formControlName]=\"field.dataField\" style=\" width: 100%;\"\r\n             (nzOpenChange)=\"nzOpenChange($event)\"\r\n             (nzScrollToBottom)=\"loadMore()\"\r\n             [nzCustomTemplate]=\"tplSelectedView\"\r\n             [nzOptionHeightPx]=\"26\"\r\n             [nzPlaceHolder]=\"field.placeholder\"\r\n             [nzMode]=\"field.nzMode\" [nzAllowClear]=\"field.nzAllowClear\"\r\n             nzShowSearch nzServerSearch (nzOnSearch)=\"search($event)\"\r\n             [nzMaxMultipleCount]=\"field?.nzMaxMultipleCount\" [nzMaxTagCount]=\"field?.nzMaxTagCount\"\r\n             [nzDropdownRender]=\"renderTemplate\">\r\n    <nz-option [nzCustomContent]=\"true\" *ngFor=\"let option of optionDebound$ | async;trackBy:trackBySelect\"\r\n               [nzLabel]=\"option.displayText\"\r\n               [nzValue]=\"option.value\"\r\n    >\r\n      <span [innerHTML]=\"option.displayText | ofSelectRenderOption: field: option\">\r\n      </span>\r\n    </nz-option>\r\n  </nz-select>\r\n</form>\r\n<ng-template #tplSelectedView let-selected>\r\n  <span [innerHTML]=\"selected.nzValue | ofOptionSelected:selected.nzLabel:field\"></span>\r\n</ng-template>\r\n<ng-template #renderTemplate>\r\n\r\n  <div class=\"select-pagination\" *ngIf=\"field.showPagination\">\r\n    <nz-pagination nzSize=\"small\" [nzPageSize]=\"maxResultCount\" [(nzPageIndex)]=\"nzPageIndex\"\r\n                   (nzPageIndexChange)=\"nzPageIndexChange()\"\r\n                   [nzTotal]=\"totalItems\"></nz-pagination>\r\n  </div>\r\n  <nz-spin *ngIf=\"isLoading\"></nz-spin>\r\n</ng-template>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [DestroyRxjsService],
                encapsulation: ViewEncapsulation.None,
                styles: [":host ::ng-deep .cdk-virtual-scroll-viewport{min-height:120px!important}.select-pagination{margin-top:8px;margin-bottom:3px}"]
            },] }
];
OfSelectSearchServerComponent.ctorParameters = () => [
    { type: DestroyRxjsService },
    { type: ChangeDetectorRef }
];

var ofSelectSearchServer_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfSelectSearchServerComponent: OfSelectSearchServerComponent
});

class OfTemplateRefComponent {
    constructor(formService) {
        this.formService = formService;
        this.ofFieldTempates = [];
        this.id = Number(new Date());
    }
    ngOnInit() {
        var _a;
        this.formService.createExtendControl(this.group, this.field.controls);
        this.templateRef = (_a = this.ofFieldTempates.find(x => x.id === this.field.dataField)) === null || _a === void 0 ? void 0 : _a.controlTemplate;
    }
}
OfTemplateRefComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-template-ref',
                template: `
      <ng-container [ngTemplateOutlet]="templateRef"
                    [ngTemplateOutletContext]="{ $implicit: { value: id }, group: group,field: field }"></ng-container>
      <span *ngIf="!templateRef" class="text-danger">Chưa có tempate</span>
  `
            },] }
];
OfTemplateRefComponent.ctorParameters = () => [
    { type: OfCreateControlFormService }
];

var ofTemplateRef_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfTemplateRefComponent: OfTemplateRefComponent
});

class ShowValidationErrorPipe {
    transform(errors, validations, submitted) {
        if (!submitted) {
            return '';
        }
        let err = '';
        if (errors && (validations === null || validations === void 0 ? void 0 : validations.length) > 0) {
            _.forEach(validations, valid => {
                if (errors[valid.name]) {
                    err = valid.message;
                    return false;
                }
            });
        }
        return err;
    }
}
ShowValidationErrorPipe.decorators = [
    { type: Pipe, args: [{
                name: 'showValidationError'
            },] }
];

class OfOptionSelectedPipe {
    transform(value, label, field) {
        if (AppUtilityService.isNotNull(value)) {
            if (typeof field.renderSelectedFunc === 'function') {
                if (field === null || field === void 0 ? void 0 : field.itemSelected) {
                    return field.renderSelectedFunc(field === null || field === void 0 ? void 0 : field.itemSelected);
                }
                return '';
            }
            else {
                return label;
            }
        }
        return null;
    }
}
OfOptionSelectedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'ofOptionSelected',
                pure: false
            },] }
];

class OfSelectRenderOptionPipe {
    transform(displayText, field, option) {
        return typeof (field.renderOptionFunc) === 'function' ? field === null || field === void 0 ? void 0 : field.renderOptionFunc(option) : displayText;
    }
}
OfSelectRenderOptionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'ofSelectRenderOption'
            },] }
];

class OfSelectComponent {
    constructor(cdr, destroy$) {
        this.cdr = cdr;
        this.destroy$ = destroy$;
        this.options = [];
    }
    ngOnInit() {
        this.setOptionsView(this.field.options);
    }
    trackBySelect(index, item) {
        return item.value;
    }
    search(value) {
        if (AppUtilityService.isWhitespace(value)) {
            this.setOptionsView(this.field.options);
            return;
        }
        const searchTxt = AppUtilityService.getFullTextSearch(value);
        const options = _.filter(this.field.options, (s) => {
            const ftsVietTat = AppUtilityService.searchVietTat(s.displayText);
            const checkVietTat = ftsVietTat.indexOf(searchTxt) > -1;
            if (AppUtilityService.isNullOrEmpty(s.fts)) {
                s.fts = AppUtilityService.getFullTextSearch(s.displayText);
            }
            return s.fts.indexOf(searchTxt) > -1 || checkVietTat;
        });
        this.setOptionsView(options);
    }
    setOptionsView(options) {
        _.forEach(options, opt => {
            opt.fts = AppUtilityService.getFullTextSearch(opt.displayText);
        });
        this.options = options;
        this.getItemSelected();
        this.cdr.detectChanges();
    }
    selectAll() {
        const values = _.map(this.field.options, opt => {
            return opt.value;
        });
        this.group.get(this.field.dataField).patchValue(values);
        this.cdr.detectChanges();
    }
    unSelectAll() {
        this.group.get(this.field.dataField).patchValue(null);
        this.cdr.detectChanges();
    }
    handlerValueDataFieldChange() {
        var _a;
        const f = this.group.get(this.field.dataField);
        if (f) {
            (_a = this.group.get(this.field.dataField)) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(debounceTime(111)).pipe(takeUntil(this.destroy$)).subscribe(v => {
                if (typeof v === 'number') {
                    f.patchValue('' + v);
                }
                this.getItemSelected();
            });
        }
    }
    getItemSelected() {
        const v = this.group.get(this.field.dataField).value;
        if (AppUtilityService.isNullOrEmpty(v)) {
            this.field.itemSelected = null;
            this.cdr.detectChanges();
            return;
        }
        // tslint:disable-next-line:triple-equals
        this.field.itemSelected = _.find(this.options, x => x.value == v);
        this.cdr.detectChanges();
    }
    ngAfterViewInit() {
        this.schemaModel.subRender(this.cdr, this.destroy$);
        this.handlerValueDataFieldChange();
    }
}
OfSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-select',
                template: "<form [formGroup]=\"group\">\n  <nz-select [formControlName]=\"field.dataField\" style=\"width: 100%\"\n             [nzCustomTemplate]=\"tplSelectedView\"\n             [nzPlaceHolder]=\"field.placeholder\"\n             [nzMode]=\"field.nzMode\" [nzAllowClear]=\"field.nzAllowClear\"\n             nzShowSearch nzServerSearch (nzOnSearch)=\"search($event)\"\n             [nzMaxMultipleCount]=\"field?.nzMaxMultipleCount\" [nzMaxTagCount]=\"field?.nzMaxTagCount\"\n             [nzDropdownRender]=\"nzDropdownRenderTpl\">\n    <nz-option [nzCustomContent]=\"true\" *ngFor=\"let option of options;trackBy:trackBySelect\"\n               [nzLabel]=\"option.displayText\"\n               [nzValue]=\"option.value\"\n    >\n      <span [innerHTML]=\"option.displayText | ofSelectRenderOption: field: option\">\n      </span>\n    </nz-option>\n  </nz-select>\n</form>\n<ng-template #tplSelectedView let-selected>\n  <span [innerHTML]=\"selected.nzValue | ofOptionSelected:selected.nzLabel:field\"></span>\n</ng-template>\n\n<ng-template #nzDropdownRenderTpl>\n  <div *ngIf=\"field.nzMode === 'multiple' && field.options?.length > 3\">\n    <nz-divider></nz-divider>\n    <div class=\"margin-top-10 margin-left-10 margin-bottom-5\">\n      <button nz-button nzType=\"primary\" (click)=\"selectAll()\" nzSize=\"small\"><i nz-icon nzType=\"plus\"></i> Ch\u1ECDn t\u1EA5t c\u1EA3\n      </button>\n      <button nz-button nzType=\"default\" (click)=\"unSelectAll()\" nzSize=\"small\"><i nz-icon nzType=\"minus\"></i> B\u1ECF ch\u1ECDn\n      </button>\n    </div>\n  </div>\n</ng-template>\n",
                providers: [DestroyRxjsService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfSelectComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DestroyRxjsService }
];
OfSelectComponent.propDecorators = {
    schemaModel: [{ type: Input }],
    field: [{ type: Input }],
    group: [{ type: Input }]
};

var ofSelect_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfSelectComponent: OfSelectComponent
});

class OfSelectAsyncComponent {
    constructor(destroy$) {
        this.destroy$ = destroy$;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.field.optionsAsync.pipe(takeUntil(this.destroy$)).subscribe(opt => {
                this.field.options = opt;
                if (this.vcSelect) {
                    this.vcSelect.setOptionsView(opt);
                }
            });
        });
    }
}
OfSelectAsyncComponent.decorators = [
    { type: Component, args: [{
                selector: 'select-async',
                template: `
      <of-select #vcSelect [schemaModel]="schemaModel" [group]="group" [field]="field"></of-select>`,
                providers: [DestroyRxjsService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfSelectAsyncComponent.ctorParameters = () => [
    { type: DestroyRxjsService }
];
OfSelectAsyncComponent.propDecorators = {
    vcSelect: [{ type: ViewChild, args: ['vcSelect',] }]
};

var ofSelectAsync_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfSelectAsyncComponent: OfSelectAsyncComponent
});

class OfSelectApiComponent {
    constructor(destroy$) {
        this.destroy$ = destroy$;
    }
    get hasCacheOption() {
        return !AppUtilityService.isNullOrEmpty(this.field.keyCache);
    }
    get key() {
        return 'selectOpt_' + this.field.keyCache;
    }
    getOptionsFromApi() {
        if (this.hasCacheOption) {
            const cache = sessionStorage.getItem(this.key);
            if (cache) {
                return of(JSON.parse(cache));
            }
        }
        return this.field.functionService;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.getOptionsFromApi().pipe(takeUntil(this.destroy$))
                .subscribe(opt => {
                if (this.hasCacheOption && !AppUtilityService.isNotAnyItem(opt)) {
                    sessionStorage.setItem(this.key, JSON.stringify(opt));
                }
                this.field.options = opt;
                if (this.vcSelect) {
                    this.vcSelect.setOptionsView(opt);
                }
            });
        });
    }
}
OfSelectApiComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-of-select-api',
                template: `
      <of-select #vcSelect [schemaModel]="schemaModel" [group]="group" [field]="field"></of-select>`,
                providers: [DestroyRxjsService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfSelectApiComponent.ctorParameters = () => [
    { type: DestroyRxjsService }
];
OfSelectApiComponent.propDecorators = {
    vcSelect: [{ type: ViewChild, args: ['vcSelect',] }]
};

var ofSelectApi_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfSelectApiComponent: OfSelectApiComponent
});

class OfSelectCascadeComponent {
    constructor(destroy$) {
        this.destroy$ = destroy$;
    }
    getOptionsFromApi(cascade) {
        if (this.hasCacheOption) {
            const cache = sessionStorage.getItem(this.key(cascade));
            if (cache) {
                return of(JSON.parse(cache));
            }
        }
        return this.field.functionService(cascade);
    }
    get ctrl() {
        return this.group.get(this.field.dataField);
    }
    get hasCacheOption() {
        return !AppUtilityService.isNullOrEmpty(this.field.keyCache);
    }
    key(cascade) {
        return 'selectOpt_' + this.field.keyCache + cascade;
    }
    disableIfCascadeEmpty(cascade) {
        const ctrl = this.group.get(this.field.dataField);
        if (AppUtilityService.isNullOrEmpty(cascade)) {
            ctrl.disable({ onlySelf: true });
        }
        else {
            if (!this.field.disabled) {
                ctrl.enable({ onlySelf: true });
            }
        }
    }
    setOptionsForView(options) {
        if (this.vcSelect) {
            this.vcSelect.setOptionsView(options);
        }
        this.field.options = options;
    }
    checkCurrentValue(options) {
        if (AppUtilityService.isNotNull(this.ctrl.value)) {
            // tslint:disable-next-line:triple-equals
            const f = options.find(x => x.value == this.ctrl.value);
            if (AppUtilityService.isNullOrEmpty(f)) {
                this.ctrl.patchValue(null);
            }
        }
    }
    handlerCascadeChange() {
        var _a;
        const cascadeField = this.group.get((_a = this.field) === null || _a === void 0 ? void 0 : _a.cascadeField);
        if (cascadeField) {
            cascadeField.valueChanges
                .pipe(debounceTime(111), takeUntil(this.destroy$), distinctUntilChanged())
                .subscribe(cascade => {
                this.disableIfCascadeEmpty(cascade);
                const ctrl = this.group.get(this.field.dataField);
                if (AppUtilityService.isNullOrEmpty(cascade)) {
                    ctrl.patchValue(null);
                    this.setOptionsForView([]);
                }
                else {
                    this.getOptionsFromApi(cascade).pipe(takeUntil(this.destroy$))
                        .subscribe(opt => {
                        if (AppUtilityService.isNotAnyItem(opt)) {
                            ctrl.patchValue(null);
                            this.setOptionsForView([]);
                        }
                        else {
                            if (this.hasCacheOption) {
                                sessionStorage.setItem(this.key(cascade), JSON.stringify(opt));
                            }
                            this.setOptionsForView(opt);
                            this.checkCurrentValue(opt);
                        }
                    });
                }
            });
        }
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.ctrl.disable({ onlySelf: true });
            this.handlerCascadeChange();
        }, 300);
    }
}
OfSelectCascadeComponent.decorators = [
    { type: Component, args: [{
                selector: 'of-select-cascade',
                template: `
      <of-select #vcSelect [schemaModel]="schemaModel" [group]="group" [field]="field"></of-select>`,
                providers: [DestroyRxjsService],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
OfSelectCascadeComponent.ctorParameters = () => [
    { type: DestroyRxjsService }
];
OfSelectCascadeComponent.propDecorators = {
    vcSelect: [{ type: ViewChild, args: ['vcSelect',] }]
};

var ofSelectCascade_component = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OfSelectCascadeComponent: OfSelectCascadeComponent
});

const Of = [
    OfDynamicComponent,
    DynamicFieldDirective,
    OfTextComponent,
    ShowValidationErrorPipe,
    OfCheckBoxComponent,
    OfCurrencyComponent,
    OfDatePickerComponent,
    OfDataPickerControlComponent,
    OfTextAreaComponent,
    OfContentHtmlComponent,
    OfNumberInputComponent,
    NumbersOnlyDirective,
    OfPasswordComponent,
    OfRadioComponent,
    OfSwitchComponent,
    OfOptionSelectedPipe,
    OfSelectRenderOptionPipe,
    OfSelectSearchServerComponent,
    OfTemplateRefComponent,
    OfFieldComponent,
    OfSelectComponent,
    OfSelectAsyncComponent,
    OfSelectApiComponent,
    OfSelectCascadeComponent
];
class OfModule {
    static forChild() {
        return {
            ngModule: OfModule,
            providers: []
        };
    }
    static forLazy() {
        return new LazyModuleFactory(OfModule.forChild());
    }
}
OfModule.decorators = [
    { type: NgModule, args: [{
                declarations: [OfComponent, Of],
                imports: [CoreModule,
                    ThemeSharedModule,
                    OfRoutingModule,
                    AntDesignModule,
                    CurrencyMaskModule,
                    TextMaskModule],
                exports: [
                    OfComponent,
                    OfDynamicComponent,
                    OfFieldComponent
                ]
            },] }
];

/*
 * Public API Surface of of
 */

/**
 * Generated bundle index. Do not edit.
 */

export { OfCheckBoxModel, OfComponent, OfComponentRefModel, OfContentHtmlModel, OfControlModel, OfCurrencyModel, OfDateModel, OfDynamicComponent, OfExtendControlModel, OfFieldComponent, OfModule, OfNumberModel, OfPwdModel, OfRadioModel, OfSchemaModel, OfSelectApiModel, OfSelectAsyncModel, OfSelectCascadeModel, OfSelectModel, OfSelectSearchServerModel, OfService, OfSwitchModel, OfTemplateRefModel, OfTextAreaModel, OfTextModel, SelectoptionServiceProxy as ɵa, SelectsearchserverServiceProxy as ɵb, OfSelectCascadeComponent as ɵba, OfRoutingModule as ɵbb, Icon as ɵbc, AntDesignModule as ɵbd, OfControlModel as ɵbe, OfSelectBaseModel as ɵbg, DestroyRxjsService as ɵc, OfCreateControlFormService as ɵd, OfValidatorService as ɵe, DynamicFieldDirective as ɵf, OfTextComponent as ɵg, ShowValidationErrorPipe as ɵh, OfCheckBoxComponent as ɵi, OfCurrencyComponent as ɵj, OfDatePickerComponent as ɵk, OfDataPickerControlComponent as ɵl, OfTextAreaComponent as ɵm, OfContentHtmlComponent as ɵn, OfNumberInputComponent as ɵo, NumbersOnlyDirective as ɵp, OfPasswordComponent as ɵq, OfRadioComponent as ɵr, OfSwitchComponent as ɵs, OfOptionSelectedPipe as ɵt, OfSelectRenderOptionPipe as ɵu, OfSelectSearchServerComponent as ɵv, OfTemplateRefComponent as ɵw, OfSelectComponent as ɵx, OfSelectAsyncComponent as ɵy, OfSelectApiComponent as ɵz };
//# sourceMappingURL=of.js.map
