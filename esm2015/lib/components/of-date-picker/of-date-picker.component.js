import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';
import differenceInCalendarDays from 'date-fns/differenceInCalendarDays';
import * as moment from 'moment';
import { DestroyRxjsService } from '../../services/destroy-rxjs.service';
import { takeUntil } from 'rxjs/operators';
import { AppUtilityService } from '../../services/app-utility-service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/destroy-rxjs.service";
import * as i2 from "@angular/forms";
import * as i3 from "./of-data-picker-control.component";
const _c0 = ["vcDatePicker"];
export class OfDatePickerComponent {
    constructor(destroy$, cdr) {
        this.destroy$ = destroy$;
        this.cdr = cdr;
        this.disabledDate = (current) => {
            var _a;
            if (((_a = this.field) === null || _a === void 0 ? void 0 : _a.dateNotGreaterThanCurrent) && !this.maxDate) {
                this.maxDate = new Date();
            }
            let check = false;
            if (this.minDate) {
                check = check || differenceInCalendarDays(current, this.minDate) < 0;
            }
            if (this.maxDate) {
                check = check || differenceInCalendarDays(current, this.maxDate) > 0;
            }
            return check;
        };
    }
    ngOnInit() {
        this.minDate = this.field.minDate;
        this.maxDate = this.field.maxDate;
        if (this.field.minDateAsync) {
            this.field.minDateAsync.pipe(takeUntil(this.destroy$))
                .subscribe(min => {
                this.setMinDate(min);
            });
        }
        if (this.field.maxDateAsync) {
            this.field.maxDateAsync.pipe(takeUntil(this.destroy$)).subscribe(max => {
                this.setMaxDate(max);
            });
        }
        this.schemaModel.subRender(this.cdr, this.destroy$);
    }
    setMinDate(min) {
        const d = this.convertDate(min);
        if (AppUtilityService.isNullOrEmpty(this.field.minDate)) {
            this.minDate = d;
        }
        else if (AppUtilityService.isNotNull(d) && differenceInCalendarDays(d, this.field.minDate) > 0) {
            this.minDate = d;
        }
        else {
            this.minDate = this.field.minDate;
        }
        this.cdr.detectChanges();
    }
    setMaxDate(max) {
        const d = this.convertDate(max);
        if (AppUtilityService.isNullOrEmpty(this.field.maxDate)) {
            this.maxDate = d;
        }
        else if (AppUtilityService.isNotNull(d) && differenceInCalendarDays(d, this.field.maxDate) < 0) {
            this.maxDate = d;
        }
        else {
            this.maxDate = this.field.maxDate;
        }
        this.cdr.detectChanges();
    }
    convertDate(date) {
        if (moment.isMoment(date)) {
            return date.toDate();
        }
        else {
            return date;
        }
    }
    get f() {
        return this.group.get(this.field.dataField);
    }
    handlerTuNgayChange() {
        if (AppUtilityService.isNotNull(this.field.tuNgayDataField) && this.group.get(this.field.tuNgayDataField)) {
            this.group.get(this.field.tuNgayDataField).valueChanges
                .pipe(takeUntil(this.destroy$)).subscribe(min => {
                this.setMinDate(min);
            });
        }
    }
    handlerDenNgayChange() {
        if (AppUtilityService.isNotNull(this.field.denNgayDataField) && this.group.get(this.field.denNgayDataField)) {
            this.group.get(this.field.denNgayDataField).valueChanges
                .pipe(takeUntil(this.destroy$)).subscribe(max => {
                this.setMaxDate(max);
            });
        }
    }
    ngAfterContentChecked() {
        this.handlerDenNgayChange();
        this.handlerTuNgayChange();
    }
}
OfDatePickerComponent.ɵfac = function OfDatePickerComponent_Factory(t) { return new (t || OfDatePickerComponent)(i0.ɵɵdirectiveInject(i1.DestroyRxjsService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
OfDatePickerComponent.ɵcmp = i0.ɵɵdefineComponent({ type: OfDatePickerComponent, selectors: [["of-date-picker"]], viewQuery: function OfDatePickerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.vcDatePicker = _t.first);
    } }, features: [i0.ɵɵProvidersFeature([DestroyRxjsService])], decls: 3, vars: 4, consts: [[3, "formGroup"], [3, "formControlName", "disabled", "disabledDate"], ["vcDatePicker", ""]], template: function OfDatePickerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "form", 0);
        i0.ɵɵelement(1, "of-date-picker-ctrl", 1, 2);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("formGroup", ctx.group);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("formControlName", ctx.field.dataField)("disabled", ctx.field.disabled)("disabledDate", ctx.disabledDate);
    } }, directives: [i2.ɵangular_packages_forms_forms_y, i2.NgControlStatusGroup, i2.FormGroupDirective, i3.OfDataPickerControlComponent, i2.NgControlStatus, i2.FormControlName], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(OfDatePickerComponent, [{
        type: Component,
        args: [{
                selector: 'of-date-picker',
                template: `
      <form [formGroup]="group">
          <of-date-picker-ctrl #vcDatePicker [formControlName]="field.dataField"
                               [disabled]="field.disabled"
                               [disabledDate]="disabledDate"></of-date-picker-ctrl>
      </form>
  `,
                providers: [DestroyRxjsService],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i1.DestroyRxjsService }, { type: i0.ChangeDetectorRef }]; }, { vcDatePicker: [{
            type: ViewChild,
            args: ['vcDatePicker']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,