import { NgModule } from '@angular/core';
import { AntDesignModule } from '../ant-design/ant-design.module';
import { OfFieldComponent } from './components/of-template-ref/of-field.component';
import { OfDynamicComponent } from './components/of-dynamic/of-dynamic.component';
import { OfCheckBoxComponent } from './components/of-check-box/of-check-box.component';
import { DynamicFieldDirective } from './directives/dynamic-field.directive';
import { OfTextComponent } from './components/of-text/of-text.component';
import { OfCurrencyComponent } from './components/of-currency/of-currency.component';
import { OfDatePickerComponent } from './components/of-date-picker/of-date-picker.component';
import { OfNumberInputComponent } from './components/of-number-input/of-number-input.component';
import { OfTextAreaComponent } from './components/of-text-area/of-text-area.component';
import { OfDataPickerControlComponent } from './components/of-date-picker/of-data-picker-control.component';
import { OfContentHtmlComponent } from './components/of-content-html/of-content-html.component';
import { NumbersOnlyDirective } from './directives/numbers-only.directive';
import { OfPasswordComponent } from './components/of-password/of-password.component';
import { OfRadioComponent } from './components/of-radio/of-radio.component';
import { OfSwitchComponent } from './components/of-switch/of-switch.component';
import { OfSelectSearchServerComponent } from './components/of-select-search-server/of-select-search-server.component';
import { OfTemplateRefComponent } from './components/of-template-ref/of-template-ref.component';
import { ShowValidationErrorPipe } from './pipes/show-validation-error.pipe';
import { CurrencyMaskModule } from 'ng2-currency-mask';
import { TextMaskModule } from 'angular2-text-mask';
import { OfOptionSelectedPipe } from './pipes/of-option-selected.pipe';
import { OfSelectRenderOptionPipe } from './pipes/of-select-render-option.pipe';
import { OfSelectComponent } from './components/of-select/of-select.component';
import { OfSelectAsyncComponent } from './components/of-select-async/of-select-async.component';
import { OfSelectApiComponent } from './components/of-select-api/of-select-api.component';
import { OfSelectCascadeComponent } from './components/of-select-cascade/of-select-cascade.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
const Of = [
    OfDynamicComponent,
    DynamicFieldDirective,
    OfTextComponent,
    ShowValidationErrorPipe,
    OfCheckBoxComponent,
    OfCurrencyComponent,
    OfDatePickerComponent,
    OfDataPickerControlComponent,
    OfTextAreaComponent,
    OfContentHtmlComponent,
    OfNumberInputComponent,
    NumbersOnlyDirective,
    OfPasswordComponent,
    OfRadioComponent,
    OfSwitchComponent,
    OfOptionSelectedPipe,
    OfSelectRenderOptionPipe,
    OfSelectSearchServerComponent,
    OfTemplateRefComponent,
    OfFieldComponent,
    OfSelectComponent,
    OfSelectAsyncComponent,
    OfSelectApiComponent,
    OfSelectCascadeComponent
];
export class OfModule {
    static forChild() {
        return {
            ngModule: OfModule,
            providers: []
        };
    }
}
OfModule.decorators = [
    { type: NgModule, args: [{
                declarations: [Of],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormsModule,
                    AntDesignModule,
                    CurrencyMaskModule,
                    TextMaskModule
                ],
                exports: [
                    OfDynamicComponent,
                    OfFieldComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2YubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvb2Yvc3JjL2xpYi9vZi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ25GLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNyRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM3RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNoRyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN2RixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUM1RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNoRyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNyRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx3RUFBd0UsQ0FBQztBQUN2SCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNoRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDaEcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDMUYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDdEcsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxNQUFNLEVBQUUsR0FBRztJQUNULGtCQUFrQjtJQUNsQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQiw0QkFBNEI7SUFDNUIsbUJBQW1CO0lBQ25CLHNCQUFzQjtJQUN0QixzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIsNkJBQTZCO0lBQzdCLHNCQUFzQjtJQUN0QixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLHNCQUFzQjtJQUN0QixvQkFBb0I7SUFDcEIsd0JBQXdCO0NBQ3pCLENBQUM7QUFpQkYsTUFBTSxPQUFPLFFBQVE7SUFDbkIsTUFBTSxDQUFDLFFBQVE7UUFDYixPQUFPO1lBQ0wsUUFBUSxFQUFFLFFBQVE7WUFDbEIsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO0lBQ0osQ0FBQzs7O1lBckJGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ2xCLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLG1CQUFtQjtvQkFDbkIsV0FBVztvQkFDWCxlQUFlO29CQUNmLGtCQUFrQjtvQkFDbEIsY0FBYztpQkFDZjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1Asa0JBQWtCO29CQUNsQixnQkFBZ0I7aUJBQ2pCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBbnREZXNpZ25Nb2R1bGUgfSBmcm9tICcuLi9hbnQtZGVzaWduL2FudC1kZXNpZ24ubW9kdWxlJztcclxuaW1wb3J0IHsgT2ZGaWVsZENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9vZi10ZW1wbGF0ZS1yZWYvb2YtZmllbGQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgT2ZEeW5hbWljQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29mLWR5bmFtaWMvb2YtZHluYW1pYy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBPZkNoZWNrQm94Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29mLWNoZWNrLWJveC9vZi1jaGVjay1ib3guY29tcG9uZW50JztcclxuaW1wb3J0IHsgRHluYW1pY0ZpZWxkRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2R5bmFtaWMtZmllbGQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgT2ZUZXh0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29mLXRleHQvb2YtdGV4dC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBPZkN1cnJlbmN5Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29mLWN1cnJlbmN5L29mLWN1cnJlbmN5LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE9mRGF0ZVBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9vZi1kYXRlLXBpY2tlci9vZi1kYXRlLXBpY2tlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBPZk51bWJlcklucHV0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29mLW51bWJlci1pbnB1dC9vZi1udW1iZXItaW5wdXQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgT2ZUZXh0QXJlYUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9vZi10ZXh0LWFyZWEvb2YtdGV4dC1hcmVhLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE9mRGF0YVBpY2tlckNvbnRyb2xDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvb2YtZGF0ZS1waWNrZXIvb2YtZGF0YS1waWNrZXItY29udHJvbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBPZkNvbnRlbnRIdG1sQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29mLWNvbnRlbnQtaHRtbC9vZi1jb250ZW50LWh0bWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTnVtYmVyc09ubHlEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbnVtYmVycy1vbmx5LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IE9mUGFzc3dvcmRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvb2YtcGFzc3dvcmQvb2YtcGFzc3dvcmQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgT2ZSYWRpb0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9vZi1yYWRpby9vZi1yYWRpby5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBPZlN3aXRjaENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9vZi1zd2l0Y2gvb2Ytc3dpdGNoLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE9mU2VsZWN0U2VhcmNoU2VydmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29mLXNlbGVjdC1zZWFyY2gtc2VydmVyL29mLXNlbGVjdC1zZWFyY2gtc2VydmVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE9mVGVtcGxhdGVSZWZDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvb2YtdGVtcGxhdGUtcmVmL29mLXRlbXBsYXRlLXJlZi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTaG93VmFsaWRhdGlvbkVycm9yUGlwZSB9IGZyb20gJy4vcGlwZXMvc2hvdy12YWxpZGF0aW9uLWVycm9yLnBpcGUnO1xyXG5pbXBvcnQgeyBDdXJyZW5jeU1hc2tNb2R1bGUgfSBmcm9tICduZzItY3VycmVuY3ktbWFzayc7XHJcbmltcG9ydCB7IFRleHRNYXNrTW9kdWxlIH0gZnJvbSAnYW5ndWxhcjItdGV4dC1tYXNrJztcclxuaW1wb3J0IHsgT2ZPcHRpb25TZWxlY3RlZFBpcGUgfSBmcm9tICcuL3BpcGVzL29mLW9wdGlvbi1zZWxlY3RlZC5waXBlJztcclxuaW1wb3J0IHsgT2ZTZWxlY3RSZW5kZXJPcHRpb25QaXBlIH0gZnJvbSAnLi9waXBlcy9vZi1zZWxlY3QtcmVuZGVyLW9wdGlvbi5waXBlJztcclxuaW1wb3J0IHsgT2ZTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvb2Ytc2VsZWN0L29mLXNlbGVjdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBPZlNlbGVjdEFzeW5jQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL29mLXNlbGVjdC1hc3luYy9vZi1zZWxlY3QtYXN5bmMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgT2ZTZWxlY3RBcGlDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvb2Ytc2VsZWN0LWFwaS9vZi1zZWxlY3QtYXBpLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE9mU2VsZWN0Q2FzY2FkZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9vZi1zZWxlY3QtY2FzY2FkZS9vZi1zZWxlY3QtY2FzY2FkZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmNvbnN0IE9mID0gW1xyXG4gIE9mRHluYW1pY0NvbXBvbmVudCxcclxuICBEeW5hbWljRmllbGREaXJlY3RpdmUsXHJcbiAgT2ZUZXh0Q29tcG9uZW50LFxyXG4gIFNob3dWYWxpZGF0aW9uRXJyb3JQaXBlLFxyXG4gIE9mQ2hlY2tCb3hDb21wb25lbnQsXHJcbiAgT2ZDdXJyZW5jeUNvbXBvbmVudCxcclxuICBPZkRhdGVQaWNrZXJDb21wb25lbnQsXHJcbiAgT2ZEYXRhUGlja2VyQ29udHJvbENvbXBvbmVudCxcclxuICBPZlRleHRBcmVhQ29tcG9uZW50LFxyXG4gIE9mQ29udGVudEh0bWxDb21wb25lbnQsXHJcbiAgT2ZOdW1iZXJJbnB1dENvbXBvbmVudCxcclxuICBOdW1iZXJzT25seURpcmVjdGl2ZSxcclxuICBPZlBhc3N3b3JkQ29tcG9uZW50LFxyXG4gIE9mUmFkaW9Db21wb25lbnQsXHJcbiAgT2ZTd2l0Y2hDb21wb25lbnQsXHJcbiAgT2ZPcHRpb25TZWxlY3RlZFBpcGUsXHJcbiAgT2ZTZWxlY3RSZW5kZXJPcHRpb25QaXBlLFxyXG4gIE9mU2VsZWN0U2VhcmNoU2VydmVyQ29tcG9uZW50LFxyXG4gIE9mVGVtcGxhdGVSZWZDb21wb25lbnQsXHJcbiAgT2ZGaWVsZENvbXBvbmVudCxcclxuICBPZlNlbGVjdENvbXBvbmVudCxcclxuICBPZlNlbGVjdEFzeW5jQ29tcG9uZW50LFxyXG4gIE9mU2VsZWN0QXBpQ29tcG9uZW50LFxyXG4gIE9mU2VsZWN0Q2FzY2FkZUNvbXBvbmVudFxyXG5dO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtPZl0sXHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgQW50RGVzaWduTW9kdWxlLFxyXG4gICAgQ3VycmVuY3lNYXNrTW9kdWxlLFxyXG4gICAgVGV4dE1hc2tNb2R1bGVcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIE9mRHluYW1pY0NvbXBvbmVudCxcclxuICAgIE9mRmllbGRDb21wb25lbnRcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBPZk1vZHVsZSB7XHJcbiAgc3RhdGljIGZvckNoaWxkKCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8T2ZNb2R1bGU+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBPZk1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19